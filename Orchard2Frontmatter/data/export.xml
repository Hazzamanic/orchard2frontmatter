<!--Exported from Orchard-->
<Orchard>
  <Recipe>
    <Name>Generated by Orchard.ImportExport</Name>
    <Author>admin</Author>
    <ExportUtc>2020-01-13T22:02:28.6892Z</ExportUtc>
  </Recipe>
  <Data>
    <BlogPost Id="/alias=blog\/christmas-ifying-orchard" Status="Published">
      <BodyPart Text="&lt;p&gt;So it is Christmas, a time to be merry, break out into song for no good reason and drink copious amounts of sickingly warm wine. But it is also when super nerds can make their blogs...snow! Exciting, I know. You should hopefully be able to see my blog snowing at the top. Not very impressively, and although I am no expert, I&amp;#39;m fairly certain snow doesn&amp;#39;t fall in perfect circles but hey, I&amp;#39;m lazy. I thought I would write a quick post on how I went about making this pathetic little weather system.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;I decided to make it as a widget so that I didn&amp;#39;t have to mess around in the theme. It will also make it easy to remove the snow later. So let&amp;#39;s go ahead and create a module using the command line:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;codegen module Hazza.Christmas&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Next we&amp;#39;ll create a part that will be attached to a widget and create our snow. Again we will use the command line because nobody can be bothered to remember how to write Orchard parts. You will need the exceptional Code Generation Extensions module by &lt;a href=&quot;http://www.szmyd.com.pl/blog&quot;&gt;http://www.szmyd.com.pl/blog&lt;/a&gt;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;codegen part Hazza.Christmas ChristmasPart&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;We are just going to create a blank part with no properties. If you wanted to add your properties from the command line, you can! Check it out:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;codegen part Hazza.Christmas ChristmasPart /Properties:Santa:string,Milk:bool,Cookies:int&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Anyway, getting sidetracked there. We now have a part, but what we really want is a widget. We&amp;#39;ll create a widget in our migrations. The code will look like this:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;public int Create() {&#xD;&#xA; SchemaBuilder.CreateTable(&amp;quot;ChristmasPartRecord&amp;quot;, table =&amp;gt; table&#xD;&#xA;  .ContentPartRecord()&#xD;&#xA; );&#xD;&#xA;&#xD;&#xA; ContentDefinitionManager.AlterPartDefinition(&amp;quot;ChristmasPart&amp;quot;, builder =&amp;gt; builder.Attachable());&#xD;&#xA; return 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public int UpdateFrom1()&#xD;&#xA;{&#xD;&#xA; ContentDefinitionManager.AlterTypeDefinition(&amp;quot;ChristmasWidget&amp;quot;, cfg =&amp;gt; cfg&#xD;&#xA;  .WithPart(&amp;quot;ChristmasPart&amp;quot;)&#xD;&#xA;  .WithPart(&amp;quot;WidgetPart&amp;quot;)&#xD;&#xA;  .WithPart(&amp;quot;CommonPart&amp;quot;)&#xD;&#xA;  .WithSetting(&amp;quot;Stereotype&amp;quot;, &amp;quot;Widget&amp;quot;));&#xD;&#xA;&#xD;&#xA; return 2; &#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Basically we are creating an empty part (using the .ContentPartRecord() setting, don&amp;#39;t forget it when creating parts!) and making it attachable in the Create() method. We are then running a new migration and creating a new Content Type called &amp;quot;ChristmasWidget&amp;quot;. The two important things we are doing to our Content Type to make it a widget is attaching the WidgetPart and setting the Stereotype of our Content Type to &amp;quot;Widget&amp;quot;. This lets Orchard know that it should show up in the Widgets section. And probably some other important stuff.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Okay so the snow, I decided not to try to explain the JavaScript code on here, but in comments within the code itself. &lt;a href=&quot;https://hazzachristmas.codeplex.com/&quot;&gt;Here&lt;/a&gt; is a link to the file on CodePlex where you can have a look through it. Can also download the entire source code there.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;There are few little bits and bobs in the CSS. You may have to adapt the module a little for your theme. I&amp;#39;m pretty much using the excellent Wise Words theme, though I think it also worked with TheThemeMachine. I used !important (dangerous, I know) so that I didn&amp;#39;t have to mess around in the theme at all. Always nice&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So I think that is pretty much it. I doubt I will see many snowy Orchard blogs out there, but would be cool to let me know if you did use it!&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2013-12-12T16:15:00Z" PublishedUtc="2015-03-24T14:54:36.4188Z" ModifiedUtc="2015-03-24T14:54:36.372Z" />
      <AutoroutePart Alias="blog/christmas-ifying-orchard" UseCustomPattern="false" />
      <TitlePart Title="Christmas-ifying Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,Widgets,Javascript" />
    </BlogPost>
    <BlogPost Id="/alias=importing-widgets-in-orchard-beware" Status="Published">
      <BodyPart Text="&lt;p&gt;This post is a sort of warning to developers planning to import widgets into their site.&lt;br /&gt;&#xD;&#xA;&lt;strong&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Make sure you import the layers first!&lt;/strong&gt;&lt;br /&gt;&#xD;&#xA;If you don&amp;#39;t, like I didn&amp;#39;t...three times in a row, you will end up with a horrible error screen in the widgets section. It is because it tries to reference a layer by its Id, so even if you import the layers later it still will not work properly. Would be cool if Orchard checked to see if the layer existed before adding the widget.&lt;p&gt;&#xD;&#xA;&lt;p&gt;&#xD;&#xA;So anyway, if you do find yourself in this situation, it is easily fixed by just deleting the widget. So go into your database and find the content item id of your widget. Can find it in the WidgetPart table. Then head over to the content list and use FireBug or some other dev tools to inspect the delete link for a random piece of content. Edit that link by replacing the ContentItemId with your widgets one. Click the link and bob&amp;#39;s your uncle, the offending widget is gone. Then import your layers (!) and then re-import your widgets.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2013-12-03T20:02:00Z" PublishedUtc="2015-03-24T14:54:48.2592Z" ModifiedUtc="2015-03-24T14:54:48.228Z" />
      <AutoroutePart Alias="importing-widgets-in-orchard-beware" UseCustomPattern="false" />
      <TitlePart Title="Importing Widgets in Orchard: Beware" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Widgets" />
    </BlogPost>
    <BlogPost Id="/alias=what-the-hell-is-an-item-template" Status="Published">
      <BodyPart Text="&lt;p&gt;Theming in Orchard is a pretty vast subject. In the docs on theming for Orchard, &lt;a href=&quot;http://docs.orchardproject.net/Documentation/Anatomy-of-a-theme&quot;&gt;http://docs.orchardproject.net/Documentation/Anatomy-of-a-theme&lt;/a&gt; , it covers a&amp;nbsp;lot of content. A good overview but if you are still trying to wrap your head around whatis going on in Orchard, a bit overwhelming. A few people have found all the different ways of overriding displays a tough one so this post will try, and possibly fail, to address one aspect of templating: Item Templates.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote&gt;&#xD;&#xA;&lt;p&gt;&lt;strong&gt;tl;dr;&lt;/strong&gt; Item Templates are the master views for content items.&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So let&amp;#39;s go into a little more detail. Say we have a ContentType, Movie, with three parts attached to it.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;ul&gt;&#xD;&#xA;&#x9;&lt;li&gt;Movie&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;TitlePart&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;DirectorPart&lt;/li&gt;&#xD;&#xA;&#x9;&lt;li&gt;StudioPart&lt;/li&gt;&#xD;&#xA;&lt;/ul&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;We will use the Placement file to control what is displayed on the page. In this case we want all the parts displayed in the Detail view and only the TitlePart displayed in the Summary view (Detail view in the display type used when you navigate directly to a content item and Summary is displayed, for example, in the search results).&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;&amp;lt;Match ContentType=&amp;quot;Movie&amp;quot;&amp;gt;&#xD;&#xA;  &amp;lt;Match DisplayType=&amp;quot;Summary&amp;quot;&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_TitlePart=&amp;quot;Summary:1&amp;quot; /&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_DirectorPart=&amp;quot;-&amp;quot; /&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_StudioPart=&amp;quot;-&amp;quot; /&amp;gt;&#xD;&#xA;  &amp;lt;/Match&amp;gt;&#xD;&#xA;  &amp;lt;Match DisplayType=&amp;quot;Detail&amp;quot;&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_TitlePart=&amp;quot;Content:1&amp;quot; /&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_DirectorPart=&amp;quot;Movie:1&amp;quot; /&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_StudioPart=&amp;quot;Movie:2&amp;quot; /&amp;gt;&#xD;&#xA;  &amp;lt;/Match&amp;gt;&#xD;&#xA;&amp;lt;/Match&amp;gt;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;The placement file basically defines which content parts will be displayed and where they will go. Summary, Content and Movie are &amp;quot;zones&amp;quot; within a content item that you assign parts to so they can be displayed. So let&amp;#39;s go ahead and define our Content and Movie zones in a file called &lt;strong&gt;Content-Movie.Detail.cshtml&lt;/strong&gt;.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;@using Orchard.Utility.Extensions;&#xD;&#xA;&amp;lt;article class=&amp;quot;content-item&amp;quot;&amp;gt;&#xD;&#xA;&amp;nbsp; &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&#xD;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Display(Model.Content)&#xD;&#xA;&amp;nbsp; &amp;lt;/div&amp;gt;&#xD;&#xA;&amp;nbsp; &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&#xD;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; @Display(Model.Movie)&#xD;&#xA;&amp;nbsp; &amp;lt;/div&amp;gt;&#xD;&#xA;&amp;lt;/article&amp;gt;&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;And one for Summary, &lt;strong&gt;Content-Movie.Summary.cshtml&lt;/strong&gt;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;@using Orchard.Utility.Extensions;&#xD;&#xA;&#xD;&#xA;&amp;lt;article class=&amp;quot;content-item&amp;quot;&amp;gt;&#xD;&#xA;   &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;&#xD;&#xA;      @Display(Model.Summary)&#xD;&#xA;   &amp;lt;/div&amp;gt;&#xD;&#xA;&amp;lt;/article&amp;gt;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;These would both be Item Templates. If we wanted to change how the title was being displayed, we could create a Part Template eg. Parts.Title.cshtml&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Hopefully that helped you out a little, if you have any questions, don&amp;#39;t hesitate to ask&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2013-12-25T20:18:00Z" PublishedUtc="2015-03-24T14:54:19.6644Z" ModifiedUtc="2015-03-24T14:54:19.6332Z" />
      <AutoroutePart Alias="what-the-hell-is-an-item-template" UseCustomPattern="false" />
      <TitlePart Title="What the Hell is an Item Template?" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Orchard Themes" />
    </BlogPost>
    <BlogPost Id="/alias=extending-search-with-settings" Status="Published">
      <BodyPart Text="&lt;p&gt;This post will look into extending some core features of Orchard with custom settings. In this example, we will extend the default search with a setting to change the default display to use for search results. By default the search uses the Summary display view. This is fine in most situations, but Summary view is baked into some of our modules and we needed to be able to use a different view for the Search results.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So the first thing we need to do is create a module. We will use the code generation features provided by Orchard. Head to the dashboard and enable Code Generation. To use Code Generation, you need to fire up the Orchard command line application. This is located in \src\Orchard.Web\bin and called orchard.exe. We are going to create a module called Mod.Search with the following command:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote&gt;&#xD;&#xA;&lt;p&gt;&amp;nbsp;&lt;em&gt;codegen module Mod.Search&lt;/em&gt;&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;You can go ahead and add this to your solution. We now need to change how the search displays content. This could be done by directly editing the source code but this can present problems updating in the future and is generally a bad practise. So instead we will just overwrite the controller with our own. To do this, first we will create a folder in our module called Controllers, copy the SearchController from Orchard.Search and paste it into our own module, changing the namespace etc. to your own. To make Orchard use our controller instead of the original we will simply create a route with a higher priority and point it to our controller instead of the original one. So create a Routes.cs file in the root of our module with the following route:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;public IEnumberable&amp;lt;RouteDescriptor&amp;gt; GetRoutes()&#xD;&#xA;{&#xD;&#xA; yield return&#xD;&#xA;  new RouteDescriptor&#xD;&#xA;  {&#xD;&#xA;   Priority = 100,&#xD;&#xA;   Route = new Route(&#xD;&#xA;    &amp;ldquo;Search&amp;rdquo;,&#xD;&#xA;    new RoutevalueDictionary() {&#xD;&#xA;     {&amp;ldquo;area&amp;rdquo;, &amp;ldquo;Mod.Search&amp;rdquo;},&#xD;&#xA;     {&amp;ldquo;controller&amp;rdquo;, &amp;ldquo;search&amp;rdquo;},&#xD;&#xA;     {&amp;ldquo;action&amp;rdquo;, &amp;ldquo;index&amp;rdquo;}&#xD;&#xA;    },&#xD;&#xA;    null,&#xD;&#xA;    new RouteValueDictionary {&#xD;&#xA;     {&amp;ldquo;area&amp;rdquo;, &amp;ldquo;Mod.Search&amp;rdquo;}&#xD;&#xA;    },&#xD;&#xA;    new MvcRouteHandler()&#xD;&#xA;   )&#xD;&#xA;  };&#xD;&#xA; yield break;&#xD;&#xA;}&#xD;&#xA;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Now we need to change what display is used in our controller. This is controlled by the following line:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;var foundItems = _contentManager.GetMany&amp;lt;IContent&amp;gt;(foundIds, VersionOptions.Published, new QueryHints()).ToList();&#xD;&#xA;foreach (var contentItem in foundItems)&#xD;&#xA;{&#xD;&#xA; list.Add(_contentManager.BuildDisplay(contentItem, &amp;quot;SummaryItem&amp;quot;));&#xD;&#xA;}&#xD;&#xA;searchHits.TotalItemCount -= foundIds.Count() - foundItems.Count();&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So by default it uses the &amp;quot;Summary&amp;quot; view. We could now change that to whatever view we want, but we may want to have a different display view later. To give us this flexibility, we will create a site scope setting for it.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&amp;quot;Site&amp;quot; is actually a content type, so attaching settings to it is very easy. We will use the excellent code generation features provided by Szmyd. This module is on the gallery and called Code Generation Extensions. Once you have installed this module, we can use it to generate all the bits and bobs we need for our site settings.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Open the Orchard command line again and then type the following command:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote&gt;&#xD;&#xA;&lt;p&gt;&amp;nbsp;&lt;em&gt;codegen part Mod.Search SearchSiteSettings /Properties:DisplayType:string /AttachTo:Site&lt;/em&gt;&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;This should have created the handler, driver, models and views. Next on the list of things to do is to create the migrations that will turn our models into tables in the database. You can write all this migrations code into the Migrations.cs file itself, but I tend to break it up into separate sections so I can keep track of the migrations more easily. We will also need to set a default value, for our display type. Orchard does appear to have this functionality with the .WithDefault() function but this didn&amp;#39;t seem to work for me so we will write an update feature to manually set the value ourselves.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Firstly, let&amp;#39;s create a folder called MigrationTasks in our module and add a new class to it called SearchSettings. The class will be an internal class because we don&amp;#39;t want any silly people to come along and try to use it somewhere else. So the code is as follows.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;using System;&#xD;&#xA;using System.Collections.Generic;&#xD;&#xA;using System.Linq;&#xD;&#xA;using System.Web;&#xD;&#xA;using Orchard.ContentManagement;&#xD;&#xA;using Orchard.Data.Migration.Schema;&#xD;&#xA;using Mod.Search.Models;&#xD;&#xA;&#xD;&#xA;namespace Mod.Search.MigrationTasks&#xD;&#xA;{&#xD;&#xA;    internal static class SearchSettings&#xD;&#xA;    {&#xD;&#xA;        internal static string SearchSiteSettingsRecord = typeof(SearchSiteSettingsRecord).Name;&#xD;&#xA;&#xD;&#xA;        /// &amp;lt;summary&amp;gt;&#xD;&#xA;        /// Creates the search settings record.&#xD;&#xA;        /// &amp;lt;/summary&amp;gt;&#xD;&#xA;        /// &amp;lt;param name=&amp;quot;schemaBuilder&amp;quot;&amp;gt;The schema builder.&amp;lt;/param&amp;gt;&#xD;&#xA;        internal static void CreateSearchSettingsRecord(SchemaBuilder schemaBuilder)&#xD;&#xA;        {&#xD;&#xA;            schemaBuilder.CreateTable(SearchSiteSettingsRecord, table =&amp;gt;&#xD;&#xA;                table&#xD;&#xA;                    .ContentPartRecord()&#xD;&#xA;                    .Column&amp;lt;string&amp;gt;(&amp;quot;DisplayType&amp;quot;, c =&amp;gt; c.WithDefault(&amp;quot;Summary&amp;quot;)));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        /// &amp;lt;summary&amp;gt;&#xD;&#xA;        /// Sets the default display type for search to &amp;quot;Summary&amp;quot;&#xD;&#xA;        /// &amp;lt;/summary&amp;gt;&#xD;&#xA;        /// &amp;lt;param name=&amp;quot;schemaBuilder&amp;quot;&amp;gt;The Work Context&amp;lt;/param&amp;gt;&#xD;&#xA;        internal static void SetDefaultValueForSettings(Orchard.WorkContext workContext)&#xD;&#xA;        {&#xD;&#xA;            var settings = workContext.CurrentSite.As&amp;lt;Models.SearchSiteSettings&amp;gt;();&#xD;&#xA;            settings.DisplayType = &amp;quot;Summary&amp;quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;This creates the table in the database then will set the value in this table to Summary. Now we just need to create the actual migrations file and we should have a table.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;private Work&amp;lt;WorkContext&amp;gt; workContext;&#xD;&#xA;&#xD;&#xA;public Migrations(Work&amp;lt;WorkContext&amp;gt; workContext)&#xD;&#xA;{&#xD;&#xA; this.workContext = workContext;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public int Create()&#xD;&#xA;{&#xD;&#xA; MigrationTasks.SearchSettings.CreateSearchSettingsRecord(this.SchemaBuilder);&#xD;&#xA;&#xD;&#xA; return 1;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;public int UpdateFrom1()&#xD;&#xA;{&#xD;&#xA; MigrationTasks.SearchSettings.SetDefaultValueForSettings(this.workContext.Value);&#xD;&#xA;&#xD;&#xA; return 2;&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;An interesting thing to note here is the use of Work&amp;lt;T&amp;gt;. This basically lets us inject dependencies that are appropriate to the current requests context.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Next we need to actually make use of this setting and inject it into the search controller. So let&amp;#39;s create a variable at the top of the Index method called searchSettings to retrieve the search setting.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;public ActionResult Index(PagerParameters pagerParameters, string q = &amp;quot;&amp;quot;)&#xD;&#xA;{&#xD;&#xA; var searchSettings = Services.WorkContext.CurrentSite.As&amp;lt;Models.SearchSiteSettings&amp;gt;();&#xD;&#xA; var pager = new Pager(_siteService.GetSiteSettings(), pagerParameters);&#xD;&#xA; var searchSettingPart = Services.WorkContext.CurrentSite.As&amp;lt;SearchSettingsPart&amp;gt;();&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Then use this instead of the default.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;var foundItems = _contentManager.GetMany&amp;lt;IContent&amp;gt;(foundIds, VersionOptions.Published, new QueryHints()).ToList();&#xD;&#xA;foreach (var contentItem in foundItems)&#xD;&#xA;{&#xD;&#xA; list.Add(_contentManager.BuildDisplay(contentItem, searchSettings.DisplayType)); //&amp;quot;SummaryItem&amp;quot;));&#xD;&#xA;}&#xD;&#xA;searchHits.TotalItemCount -= foundIds.Count() - foundItems.Count();&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;All that is left is to clean it all up a little. Our module depends on Orchard.Search so let&amp;#39;s edit the Module.txt.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;IMAGE!!!!&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;We could leave it here but currently our site settings are mixed into the general settings section. It would make sense to have them in the same section as the other search settings. To achieve this we just need to edit the driver a little.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;protected override DriverResult Editor(SearchSiteSettings part, dynamic shapeHelper)&#xD;&#xA;{&#xD;&#xA; return ContentShape(&amp;quot;Parts_SearchSiteSettings&amp;quot;,&#xD;&#xA;     () =&amp;gt; shapeHelper.EditorTemplate(&#xD;&#xA;      TemplateName: TemplateName,&#xD;&#xA;      Model: part,&#xD;&#xA;      Prefix: Prefix))&#xD;&#xA;      .OnGroup(&amp;quot;search&amp;quot;);&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So we have just added .OnGroup(&amp;quot;search&amp;quot;); to the end of the editor shape. This group is defined by the Orchard.Search module so we don&amp;#39;t need to explicitly do it ourselves. However, if you did want to define your own group, it is done in the handler like so.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;protected override void GetItemMetadata(GetContentItemMetadataContext context)&#xD;&#xA;{&#xD;&#xA; if (context.ContentItem.ContentType != &amp;quot;Site&amp;quot;)&#xD;&#xA;  return;&#xD;&#xA; base.GetItemMetadata(context);&#xD;&#xA; context.Metadata.EditorGroupInfo.Add(new GroupInfo(T(&amp;quot;Search&amp;quot;)));&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;And there we have it, site settings to extend a core Orchard feature. Part of this code was written by Matthew Green, and you can find more of his awesome work at &lt;a href=&quot;http://www.breakoutdeveloper.com/&quot;&gt;http://www.breakoutdeveloper.com/&lt;/a&gt;&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2013-11-25T09:28:00Z" PublishedUtc="2015-03-24T14:54:01.4748Z" ModifiedUtc="2015-03-24T14:54:01.428Z" />
      <AutoroutePart Alias="extending-search-with-settings" UseCustomPattern="false" />
      <TitlePart Title="Extending Search with Settings" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=internet-explorer-demands-an-accurate-content-type" Status="Published">
      <BodyPart Text="&lt;p&gt;If you regularly use HTML5 video and S3 (or any other provider I suppose) to deliver the content, you have probably seen this message: &amp;quot;Error: &lt;em&gt;Unsupported&lt;/em&gt; audio &lt;em&gt;type&lt;/em&gt; or invalid &lt;em&gt;file&lt;/em&gt; path&amp;quot;. So you have your code like so:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;&amp;lt;video preload=&amp;quot;none&amp;quot; controls=&amp;quot;controls&amp;quot;&amp;gt;&#xD;&#xA; &amp;lt;source src=&amp;quot;https://mysite.com/video.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;&#xD;&#xA;&amp;lt;/video&amp;gt;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Looks good? Works fine in all browsers except IE. Delve into the dev tools and you will see the content-type that the mp4 file is being delivered under is &amp;quot;application/octet-streaming&amp;quot;, which IE doesn&amp;#39;t like. Hosting files on your own server usually wont bring up this kind of problem since the content-type will default to that of the file extension. S3, however, requires you explicitly set it yourself. For some reason.&amp;nbsp;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So if you go into your AWS Console, select the file, then its properties and expand the Metadata section, you should see a dropdown list where you can type in your content-type, &amp;quot;video/mp4&amp;quot;.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2013-11-20T16:15:00Z" PublishedUtc="2015-01-30T16:10:59.4068Z" ModifiedUtc="2014-01-21T09:35:26Z" />
      <AutoroutePart Alias="internet-explorer-demands-an-accurate-content-type" UseCustomPattern="false" />
      <TitlePart Title="Internet Explorer demands an accurate Content Type" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="internet explorer,metadata,html5 video" />
    </BlogPost>
    <BlogPost Id="/alias=windows-8-tablet-settings" Status="Published">
      <BodyPart Text="&lt;p&gt;This has been one of my few complaints with Windows 8, which unlike seemingly everyone else on the planet, I have quiet enjoyed. Windows 8 has this annoying habit of changing my Tablet settings, even though I am working on a desktop. You would think this wouldn&amp;#39;t be an issue, except that any sort of drop down menu in programs will drop down the wrong way. It is weird and makes me sad inside. After hunting around a little bit on the internet I came across the solution.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Press ctrl + q (to access the search) and type &amp;quot;Tablet PC Settings&amp;quot;. This should bring up a little window with two tabs. Select Other and change the &amp;quot;Handedness&amp;quot; (awesome name, right?) setting to left-handed and all should be good.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;I have yet to work out the cause of the random changes I keep getting subjected to as it appears to be utterly random. I have reported the issue to Microsoft but they are probably inundated with Windows 8 related complaints that my voice is unlikely to be heard. Ah well&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2013-11-07T01:00:00Z" PublishedUtc="2015-01-30T16:10:59.516Z" ModifiedUtc="2014-01-22T01:00:46Z" />
      <AutoroutePart Alias="windows-8-tablet-settings" UseCustomPattern="false" />
      <TitlePart Title="Windows 8 Tablet Settings" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="" />
    </BlogPost>
    <BlogPost Id="/alias=windows-phone-8-capitalisation-of-i-s" Status="Published">
      <BodyPart Text="&lt;p&gt;I recently upgraded my Nokia Lumia 800 to a Lumia 520, so I am now running Windows Phone 8. It has been a good experience so far, a nice step up from Windows Phone 7. However, one thing that has been bugging me is that it refuses to capitalise my i&amp;#39;s. So I type i followed by a space and it stays as a little i. Hardly a massive problem, just a little irritation. I tried &amp;quot;training&amp;quot; it by correcting i to I a multitude of times but had no luck. Eventually, after digging around on the internet for a while, I found a post on some forums where a user mentioned it being a bug with the En/GB keyboard. So I switched to En/US and lo and behold, my i&amp;#39;s are now being capitalised. Hooray. To change your keyboard to the American version go to:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;blockquote&gt;&#xD;&#xA;&lt;p&gt;Settings -&amp;gt; Keyboard -&amp;gt; Add Keyboards -&amp;gt; Select English (United States)&lt;/p&gt;&#xD;&#xA;&lt;/blockquote&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;It will download and install the new keyboard, you can then remove your En/GB keyboard to get the wide spacebar back if you so wish. So if you don&amp;#39;t mind capitalise becoming capitalize, all is well. I have contacted Microsoft for confirmation of whether it is a bug and if a fix for it is on the roadmap but have received no reply as of writing this post&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-01-23T15:20:00Z" PublishedUtc="2015-03-24T14:53:45.5472Z" ModifiedUtc="2015-03-24T14:53:45.516Z" />
      <AutoroutePart Alias="windows-phone-8-capitalisation-of-i-s" UseCustomPattern="false" />
      <TitlePart Title="Windows Phone 8 Capitalisation of I's" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="WP8" />
    </BlogPost>
    <BlogPost Id="/alias=open-command-prompt-here" Status="Published">
      <BodyPart Text="&lt;p&gt;I sometimes find myself in the situation where I want to have the command prompt open from where I currently am in the file explorer. Usually I have always just opened the command prompt and navigated there using a command. I was just looking through my downloads the other day when I spazzed out and right clicked with the shift key down and noticed that it had added the option to &amp;quot;Open command window here&amp;quot;. This is an cool little feature that I reckon could come in&amp;nbsp; quite handy in the future.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-03-30T17:52:00Z" PublishedUtc="2015-03-24T14:53:27.4044Z" ModifiedUtc="2015-03-24T14:53:27.3576Z" />
      <AutoroutePart Alias="open-command-prompt-here" UseCustomPattern="false" />
      <TitlePart Title="Open Command Prompt Here" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Windows 8,Command Prompt" />
    </BlogPost>
    <BlogPost Id="/alias=orchard-default-value-in-infoset" Status="Published">
      <BodyPart Text="&lt;p&gt;Orchard 1.8 recently opened up InfoSet storage, which was previously used by fields and content type settings, to parts as well, meaning you don&amp;#39;t need to worry about any pesky migrations. So I have been playing around with this and have converted many of my site setting parts to use the InfoSet storage. Much of the time I want to assign a default value to my site settings. This was simple using migrations with the old record storage system.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;.Column&amp;lt;string&amp;gt;(&amp;quot;ExcludedColumns&amp;quot;, column =&amp;gt; column.NotNull().WithDefault(&amp;quot;UserPart.HashAlgorithm&amp;quot;))&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;However, it wasn&amp;#39;t immediately obvious to me if this was possible with the new InfoSet storage and since Orchard 1.8 was released relatively recently, there is not a lot of documentation. But, of course, the gurus who make Orchard had catered for all us lovers of default properties and there is an optional property on the retrieve method called &amp;quot;defaultValue&amp;quot;. The default value will appear in your site setting views for editing, so it isn&amp;#39;t just a silent default.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;public string ExcludedColumns&#xD;&#xA;{&#xD;&#xA; get { &#xD;&#xA;  return this.Retrieve(x =&amp;gt; x.ExcludedColumns, &amp;quot;UserPart.EmailStatus&amp;quot;); &#xD;&#xA; }&#xD;&#xA; set&#xD;&#xA; {&#xD;&#xA;  this.Store(x =&amp;gt; x.ExcludedColumns, value);&#xD;&#xA; }&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So there we have it, simples.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-05-30T14:48:00Z" PublishedUtc="2015-03-24T14:53:03.2868Z" ModifiedUtc="2015-03-24T14:53:03.24Z" />
      <AutoroutePart Alias="orchard-default-value-in-infoset" UseCustomPattern="false" />
      <TitlePart Title="Orchard Default Value in InfoSet" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=using-placement-info-to-specify-alternates" Status="Published">
      <BodyPart Text="&lt;p&gt;A little used feature of Orchard&amp;#39;s Placement.info is the ability to define custom alternates to be used within it.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;A previous developer at my company needed a part to be formatted slightly differently based on the DisplayType. To this end he wrote a class that generated alternates for parts based on the current DisplayType. This may have seemed like a good idea at the time but in practise, it generates a huge number of useless alternates that will only be of use in one scenario, which does not seem particularly efficient. The simpler solution would have been to use the placement file.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Within your &amp;lt;place&amp;gt; tags you can add extra arguments after the standard location and priority. So let&amp;#39;s take a look at what this would look like.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;&amp;lt;Match ContentType=&amp;quot;Page&amp;quot;&amp;gt;&#xD;&#xA;  &amp;lt;Place Parts_Title=&amp;quot;Header:1&amp;quot;/&amp;gt;&#xD;&#xA;  &amp;lt;Match DisplayType=&amp;quot;Detail&amp;quot;&amp;gt;&#xD;&#xA;    &amp;lt;Place Parts_Title=&amp;quot;/PageTitle:3;Alternate=Parts_Title__Detail&amp;quot;/&amp;gt;&#xD;&#xA;  &amp;lt;/Match&amp;gt;&#xD;&#xA;&amp;lt;/Match&amp;gt;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So as you can see, when we match a content type of &amp;quot;Page&amp;quot; and a display type of &amp;quot;Detail&amp;quot;, we will offer an alternate of Parts_Title__Detail, which we can create in our theme, either manually or via Shape Tracing.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&lt;img alt=&quot;Shape Tracing Image&quot; src=&quot;/Media/blog/Images/ShapeTracing.png&quot; /&gt;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;As you can see, the alternates corresponding file name is &lt;var&gt;Parts.Title-Detail.cshtml&lt;/var&gt;, one underscore (_) becomes a dot (.) and two underscores (__) becomes a dash (-). Another interesting thing to note is the use of the forward slash (/) in front of PageTitle in this line:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA; &amp;lt;Place Parts_Title=&amp;quot;/PageTitle:3;Alternate=Parts_Title__Detail&amp;quot;/&amp;gt;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;PageTitle is a custom zone I have defined in my &lt;var&gt;Layout.cshtml&lt;/var&gt; (and added to the list of zones in the Module.txt!)&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;    @if (Model.PageTitle != null) {&#xD;&#xA;        &amp;lt;header id=&amp;quot;page-title&amp;quot;&amp;gt;&#xD;&#xA;            &amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;&#xD;&#xA;                @Zone(Model.PageTitle)&#xD;&#xA;            &amp;lt;/div&amp;gt;&#xD;&#xA;        &amp;lt;/header&amp;gt;&#xD;&#xA;    }&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So using the forward slash (/) pushes parts into Layout Zones, not in Content Zones, which can come in pretty handy.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-07-22T15:34:00Z" PublishedUtc="2015-03-24T14:52:45.5652Z" ModifiedUtc="2015-03-24T14:52:45.5184Z" />
      <AutoroutePart Alias="using-placement-info-to-specify-alternates" UseCustomPattern="false" />
      <TitlePart Title="Using Placement.info to specify alternates" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Orchard Themes" />
    </BlogPost>
    <BlogPost Id="/alias=visual-studio-failed-to-initialize-the-powershell-host" Status="Published">
      <BodyPart Text="&lt;p&gt;You may see this when you are creating a new project in Visual Studio and several packages fail to install. The error is fairly self explanatory, Visual Studio cant control PowerShell! Googling it may possibly give you the answer, which is basically to allow scripts to run by running PowerShell as Administrator:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;set-executionpolicy RemoteSigned&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;However, if this doesn&amp;#39;t work, it may be because you have two copies of PowerShell, 32bit and 64bit, and you need to change the execution policy for the other one. PowerShell is located:&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;C:\Windows\SysWOW64\WindowsPowerShell\v1.0&#xD;&#xA;C:\Windows\System32\WindowsPowerShell\v1.0&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So change both execution policies, restart Visual Studio and you should be good to go.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-07-22T20:03:00Z" PublishedUtc="2015-03-24T14:52:22.9764Z" ModifiedUtc="2015-03-24T14:52:22.9452Z" />
      <AutoroutePart Alias="visual-studio-failed-to-initialize-the-powershell-host" UseCustomPattern="false" />
      <TitlePart Title="Visual Studio Failed to initialize the PowerShell Host" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Visual Studio" />
    </BlogPost>
    <BlogPost Id="/alias=using-the-canvas-to-take-a-away-a-little-more-internet-privacy" Status="Published">
      <BodyPart Text="&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;You can of course blanket block all this stuff using &lt;a href=&quot;https://adblockplus.org&quot;&gt;AdBlock&lt;/a&gt;, which I was apparently too slow to realise.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;Today I read about a novel way of tracking unique users even when they&amp;nbsp;have&amp;nbsp;cookies disabled. Now, we all know there are many ways to track users beyond the standard cookies, generally referred to as evercookies (probably named after this &lt;a href=&quot;https://github.com/samyk/evercookie&quot;&gt;library &lt;/a&gt;created by Samy?), using a wide variety of methods such as Flash objects and various HTML5 storages. However, this slightly different method, which was &lt;a href=&quot;http://www.w2spconf.com/2012/papers/w2sp12-final4.pdf&quot;&gt;discovered&lt;/a&gt; in 2012 by a group researchers, is pretty fucking cool and a slight bit more canny. It collects a bunch of data unique to that user from their computer (operating system etc.), then writes this information onto the browsers canvas. It then instructs the browser to read this image back, generating what is effectively a unique fingerprint. So when a user visits a different site, that same fingerprint can be created and matched to build a profile on that user. I imagine it also does something clever and extracts a unique section of the image generated by the browser to send back to its servers so it doesn&amp;#39;t have to store a shitload of data.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So is this being used out in the wild? A group of researchers at KU Leuven and Princeton University have done a massive &lt;a href=&quot;https://securehomes.esat.kuleuven.be/~gacar/persistent/index.html&quot;&gt;study&lt;/a&gt; and discovered that a whopping one in eighteen of the top 100,000 websites are using this technique. And even more astounding, it can all be traced back to a single company: &lt;a href=&quot;http://www.addthis.com/&quot;&gt;AddThis&lt;/a&gt;. Well, we never really suspected them to be a bastion of morality, did we? (I bring up morals here&amp;nbsp;because there is little a user can do to block this kind of tracking, even if they have disabled cookies in an effort not to be tracked).&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;I say little, you can use Tor browser, which does have functionality to stop this tracking. I do remember seeing it prompt me long ago that the website I was on was trying to read image data from my canvas and having no clue why I should care about that. Ignorance isn&amp;#39;t always bliss. However, using Tor browser&amp;nbsp;to look&amp;nbsp;at pictures of cats is a bit of a mission.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So ultimately, what does all this mean? Nothing. Websites are tracking as much as they can about you in as many ways as they can. And can we blame them? Data is money, and most of these sites can only stay in operation because of advertising displayed on their sites. Companies will only pay for adverts if they know that everything possible is being done to target their potential customers.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;But regardless of where you stand on privacy on the internet (there is only one place you should stand though really, privacy matters), this is a cool way to destroy internet privacy.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-07-28T09:27:00Z" PublishedUtc="2015-03-24T14:52:04.6464Z" ModifiedUtc="2015-03-24T14:52:04.5996Z" />
      <AutoroutePart Alias="using-the-canvas-to-take-a-away-a-little-more-internet-privacy" UseCustomPattern="false" />
      <TitlePart Title="Using the canvas to take away a little more internet privacy" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Privacy" />
    </BlogPost>
    <BlogPost Id="/alias=what-are-stereotypes-in-orchard" Status="Published">
      <BodyPart Text="&lt;p&gt;I&amp;#39;ve recently been digging a little deeper into how and why Orchard does the things it does, and one of the things I didn&amp;#39;t quite know the point of was Stereotypes.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;You&amp;#39;ve probably noticed when editing or creating a content type there is an option to set the &amp;quot;Stereotype&amp;quot;. This setting is used by widgets and menu items, amongst others, to provide some useful features. Firstly, it is used to populate the list of available Widgets and Menu items in their respective UI&amp;#39;s and secondly, where it is most useful, is for adjusting the type of shape that Orchard will render. By default Orchard uses Content as the shape type, which is why you can create alternates like &lt;var&gt;Content.Page.cshtml&lt;/var&gt; and &lt;var&gt;Content-Detail.cshtml&lt;/var&gt; etc. However, if you have specified a Stereotype &amp;quot;MyFirstStereotype&amp;quot;, for example, then Orchard will look for a view &lt;var&gt;MyFirstStereotype.cshtml&lt;/var&gt; to render the content item. The same applies for editors, so when editing your content type Orchard will look for a view &lt;var&gt;MyFirstStereotype.Edit.cshtml&lt;/var&gt;.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;I can imagine this potentially coming in pretty handy. I&amp;#39;m currently working on a small customizable dashboard module for Orchard and may utilize content items combined with stereotypes to render items on the dashboard.&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-07-28T10:47:00Z" PublishedUtc="2015-03-24T14:51:52.5408Z" ModifiedUtc="2015-03-24T14:51:52.5096Z" />
      <AutoroutePart Alias="what-are-stereotypes-in-orchard" UseCustomPattern="false" />
      <TitlePart Title="What are Stereotypes in Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=grouping-your-site-settings-in-orchard" Status="Published">
      <BodyPart Text="&lt;p&gt;I&amp;#39;m slightly OCD when it comes to organising my settings in Orchard, of which I seem to have a vast amount. And luckily, Orchard has a nifty way of doing this for you and it is beautifully simple to implement.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So to start with you are going to need to have some site settings, which I have covered in &lt;a href=&quot;http://arkleseizure.net/extending-search-with-settings&quot;&gt;this post&lt;/a&gt;. Once you have built your site setting, you are going to need to create a menu item that will be displayed in an expandable list under the Settings menu item in the Orchard dashboard, which will be done in the handler.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;public class UniTownSiteSettingsPartHandler : ContentHandler&#xD;&#xA;{&#xD;&#xA; public UniTownSiteSettingsPartHandler(IRepository&amp;lt;UniTownSiteSettingsPartRecord&amp;gt; repository)&#xD;&#xA; {&#xD;&#xA;  Filters.Add(StorageFilter.For(repository));&#xD;&#xA;  Filters.Add(new ActivatingFilter&amp;lt;UniTownSiteSettingsPart&amp;gt;(&amp;quot;Site&amp;quot;));&#xD;&#xA;&#xD;&#xA;  T = NullLocalizer.Instance;&#xD;&#xA; }&#xD;&#xA;&#xD;&#xA; public Localizer T { get; set; }&#xD;&#xA;&#xD;&#xA; protected override void GetItemMetadata(GetContentItemMetadataContext context)&#xD;&#xA; {&#xD;&#xA;  if (context.ContentItem.ContentType != &amp;quot;Site&amp;quot;)&#xD;&#xA;   return;&#xD;&#xA;  base.GetItemMetadata(context);&#xD;&#xA;  context.Metadata.EditorGroupInfo.Add(new GroupInfo(T(&amp;quot;Statistics&amp;quot;)));&#xD;&#xA; }&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;The important method here is GetItemMetadata, which I have used to add a new group &amp;quot;Statistics. Next you need to actually place your site settings into that group via the Editor method in your driver.&lt;/p&gt;&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&#xD;&#xA;protected override DriverResult Editor(UniTownSiteSettingsPart part, dynamic shapeHelper)&#xD;&#xA;{&#xD;&#xA; return ContentShape(&amp;quot;Parts_UniTownSiteSettingsPart&amp;quot;,&#xD;&#xA;  () =&amp;gt; shapeHelper.EditorTemplate(TemplateName: TemplateName,&#xD;&#xA;   Model: part,&#xD;&#xA;   Prefix: Prefix))&#xD;&#xA;  .OnGroup(&amp;quot;Statistics&amp;quot;);&#xD;&#xA;}&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&lt;p&gt;So all we are doing is appending .OnGroup(&amp;quot;Statistics&amp;quot;) to our return statement. Simple!&lt;/p&gt;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2014-07-28T15:31:00Z" PublishedUtc="2015-03-24T14:51:41.0904Z" ModifiedUtc="2015-03-24T14:51:41.0592Z" />
      <AutoroutePart Alias="grouping-your-site-settings-in-orchard" UseCustomPattern="false" />
      <TitlePart Title="Grouping your Site Settings in Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=add-custom-settings-to-your-theme" Status="Published">
      <BodyPart Text="When building themes in Orchard, it is often desirable to make certain aspects of the theme available to the administrator to customize. &#xD;&#xA;This article describes how to add several simple theme settings to the Site Settings menu in the Orchard dashboard. &#xD;&#xA;&#xD;&#xA;#Creating the Theme&#xD;&#xA;First thing we will need is a theme, so let's go ahead and use the codegen command to generate a theme&#xD;&#xA;&#xD;&#xA;    feature enable Orchard.CodeGeneration&#xD;&#xA;&#xD;&#xA;Now we can generate a theme that we will base on TheThemeMachine so that we have a basic theme to work on. We will also need to create a project file for this theme so that we can add our settings. This is the key to creating settings in our themes because by making our theme a C# project, our themes can do almost anything a module can do.&#xD;&#xA;&#xD;&#xA;    codegen theme CleanBlog /BasedOn:TheThemeMachine /CreateProject:true&#xD;&#xA;&#xD;&#xA;#Defining the Settings&#xD;&#xA;Visual Studio should now prompt you to reload the solution so you can get started with your new theme. If it doesn't right click on your themes folder in the Solution Explorer and Add -&gt; Existing Project then select your new themes project file (it will be located in the Themes folder).&#xD;&#xA;&#xD;&#xA;These will be the two settings added to our theme:&#xD;&#xA;&#xD;&#xA;- Add a custom class to the main layout element&#xD;&#xA;- Load a custom style sheet based on the users selection&#xD;&#xA;&#xD;&#xA;&#x9;&#xD;&#xA;We are going to attach a new part to the Site content type to store these custom theme settings. So let's create a **Models** folder and add a file called *CleanBlogSettingsPart.cs*.&#xD;&#xA;&#xD;&#xA;    using Orchard.ContentManagement;&#xD;&#xA;    &#xD;&#xA;    namespace CleanBlog.Models&#xD;&#xA;    {&#xD;&#xA;    &#x9;public class CleanBlogSettingsPart : ContentPart&#xD;&#xA;        {&#xD;&#xA;            public string CustomClass {&#xD;&#xA;                get { return this.Retrieve(x =&gt; x.CustomClass); }&#xD;&#xA;                set { this.Store(x =&gt; x.CustomClass, value); }&#xD;&#xA;            }&#xD;&#xA;         &#xD;&#xA;            public string HoverColor {&#xD;&#xA;                get { return this.Retrieve(x =&gt; x.HoverColor, &quot;custom_blue.css&quot;); }&#xD;&#xA;                set { this.Store(x =&gt; x.HoverColor, value); }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This example is using the InfoSet storage that was made available in 1.8 (it is perfectly possible to achieve the same in older versions of Orchard using the ContentPartRecord storage method and building the table in the migrations, see *this* for more details). The &quot;custom_blue.css&quot; parameter in the getter for HoverColor is the default value for that setting.&#xD;&#xA;&#xD;&#xA;We will be offering them the option to choose from 3 different colours to have their hyperlinks, so let's create three style sheets in the Styles folder of our theme:&#xD;&#xA;&#xD;&#xA;- custom_blue.css&#xD;&#xA;- custom_green.css&#xD;&#xA;- custom_yellow.css&#xD;&#xA;&#xD;&#xA;Add the following to each style sheet and adjust the colour to match the file.&#xD;&#xA;&#xD;&#xA;    a:hover {&#xD;&#xA;        color: *color*;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;So custom_blue.css will look like this:&#xD;&#xA;&#xD;&#xA;    a:hover {&#xD;&#xA;        color: blue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Setting up the Editor&#xD;&#xA;Now we will need an editor to select these options. Create a file in **~/Views/EditorTemplates/Parts** called *CleanBlogSettingsPart.cshtm*. &#xD;&#xA;&#xD;&#xA;    @model CleanBlog.Models.CleanBlogSettingsPart&#xD;&#xA;               &#xD;&#xA;    @{&#xD;&#xA;        var colourScheme = new List&lt;SelectListItem&gt;();&#xD;&#xA;        colourScheme.Add(new SelectListItem { Text = &quot;Blue&quot;, Value = &quot;custom_blue.css&quot; });&#xD;&#xA;        colourScheme.Add(new SelectListItem { Text = &quot;Green&quot;, Value = &quot;custom_green.css&quot; });&#xD;&#xA;        colourScheme.Add(new SelectListItem { Text = &quot;Yellow&quot;, Value = &quot;custom_yellow.css&quot; });&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &lt;fieldset&gt;&#xD;&#xA;        &lt;legend&gt;Clean Blog Settings&lt;/legend&gt;&#xD;&#xA;    &#x9;&lt;div&gt;&#xD;&#xA;    &#x9;&#x9;@Html.LabelFor(m =&gt; m.CustomClass, T(&quot;Custom Class&quot;))&#xD;&#xA;    &#x9;&#x9;@Html.EditorFor(m =&gt; m.CustomClass)&#xD;&#xA;    &#x9;&lt;/div&gt;&#xD;&#xA;    &#x9;&lt;div&gt;&#xD;&#xA;    &#x9;&#x9;@Html.LabelFor(m =&gt; m.HoverColor, T(&quot;Hover Color&quot;))&#xD;&#xA;    &#x9;&#x9;@Html.DropDownListFor(m =&gt; m.HoverColor, colourScheme.AsEnumerable())&#xD;&#xA;    &#x9;&lt;/div&gt;&#xD;&#xA;    &lt;/fieldset&gt;&#xD;&#xA;&#xD;&#xA;To handle the display of this view and attach the settings to the Site content type, we will use a ContentHandler. So create a folder called **Handlers** in the root of your theme with a file called *CleanBlogSettingsPartHandler.cs*.&#xD;&#xA;&#xD;&#xA;using Orchard.ContentManagement.Handlers;&#xD;&#xA;using Orchard.ContentManagement;&#xD;&#xA;using Orchard.Localization;&#xD;&#xA;using CleanBlog.Models;&#xD;&#xA;&#xD;&#xA;    namespace CleanBlog.Handlers&#xD;&#xA;    {&#xD;&#xA;    &#x9;public class CleanBlogSettingsPartHandler : ContentHandler&#xD;&#xA;        {&#xD;&#xA;            public CleanBlogSettingsPartHandler() {&#xD;&#xA;    &#x9;&#x9;&#x9;Filters.Add(new ActivatingFilter&lt;CleanBlogSettingsPart&gt;(&quot;Site&quot;));&#xD;&#xA;                Filters.Add(new TemplateFilterForPart&lt;CleanBlogSettingsPart&gt;(&quot;CleanBlogSettingsPart&quot;, &quot;Parts/CleanBlogSettingsPart&quot;, &quot;Theme&quot;));&#xD;&#xA;                T = NullLocalizer.Instance;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;public Localizer T { get; set; }&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;protected override void GetItemMetadata(GetContentItemMetadataContext context) {&#xD;&#xA;                if (context.ContentItem.ContentType != &quot;Site&quot;)&#xD;&#xA;                    return;&#xD;&#xA;                base.GetItemMetadata(context);&#xD;&#xA;                context.Metadata.EditorGroupInfo.Add(new GroupInfo(T(&quot;Theme&quot;)));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;There are a few things of note here. We don't want to just display our themes settings in the main settings menu, but in its own subsection called &quot;Theme&quot;. You can name this subsection whatever you like. But if you do want your settings to be in the main settings page, just remove the 'GetItemMetadata()' method and change this line:&#xD;&#xA;&#xD;&#xA;    Filters.Add(new TemplateFilterForPart&lt;CleanBlogSettingsPart&gt;(&quot;CleanBlogSettingsPart&quot;, &quot;Parts/CleanBlogSettingsPart&quot;, &quot;Theme&quot;));&#xD;&#xA;&#xD;&#xA;to:&#xD;&#xA;&#xD;&#xA;    Filters.Add(new TemplateFilterForPart&lt;CleanBlogSettingsPart&gt;(&quot;CleanBlogSettingsPart&quot;, &quot;Parts/CleanBlogSettingsPart&quot;));&#xD;&#xA;&#xD;&#xA;You'll also notice that this line is defining what template to use for rendering our settings editor. You may be wondering why we don’t just use a driver like we usually do for a parts editor template. This is due to the fact that to call the **Editor** method of your **Driver** and return a shape, you need to have specified in the Placement.info that you want to do that. Since this theme is not active in the admin section of Orchard, our themes **Placement.info** file is never run hence a Driver would never display anything.&#xD;&#xA;&#xD;&#xA;Finally, the line:&#xD;&#xA;&#xD;&#xA;    Filters.Add(new ActivatingFilter&lt;CleanBlogSettingsPart&gt;(&quot;Site&quot;));&#xD;&#xA;&#xD;&#xA;Is what attaches our part to the Site content type. &#xD;&#xA;&#xD;&#xA;#Accessing the Theme Settings&#xD;&#xA;All that is left is to do now is to actually make use of our theme settings. Let's copy the *Layout.cshtml* file from TheThemeMachine into our CleanBlog theme. This means our theme will now use our Layout file instead of the base Layout from TheThemeMachine. Accessing our settings is as simple as:&#xD;&#xA;&#xD;&#xA;    var settings = WorkContext.CurrentSite.As&lt;CleanBlogSettingsPart&gt;();&#xD;&#xA;&#xD;&#xA;**WorkContext** is effectively an extension of the **HttpContext**, containing additional information about Orchard, such as the current user and current site (which you can see us doing above). This gives us access to the **site content item**, meaning we can access any parts that we have attached to the Site content type. We will need to add two using statements into our view to resolve the .As&lt;&gt; extension and our model.&#xD;&#xA;&#xD;&#xA;    @using CleanBlog.Models&#xD;&#xA;    @using Orchard.ContentManagement&#xD;&#xA;&#xD;&#xA;So now we have our settings in the view we can actually make use of them. Anywhere after the line&#xD;&#xA;&#xD;&#xA;    Style.Include(&quot;Site.css&quot;);&#xD;&#xA;&#xD;&#xA;add the line&#xD;&#xA;&#xD;&#xA;    Style.Include(settings.HoverColor);&#xD;&#xA;&#xD;&#xA;This will load the selected stylesheet after the main sheet and apply our overriding colour scheme. Our final setting is to add a custom class to the main div element. This element is generated by the Tag method. This is an implementation of C#'s TagBuilder class. It takes a dynamic shape object and a tag name and builds that tag with all the attributes (id, classes and additional attributes) gleaned from the shape that was passed in. So we can add our class to the Model so our class will be added to the rendered tag like so:&#xD;&#xA;&#xD;&#xA;    Model.Classes.Add(settings.CustomClass);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;#Wrapping Up&#xD;&#xA;The real power here is that themes in Orchard don't just have to be templates and stylesheets, they can be fully-fledged **projects** that run C# code outside of views; basically do anything a module can do. Here we saw just one way to utilize this power: modify the look and feel of your theme from the dashboard without having to change any **HTML** or **CSS**&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-01-31T22:53:00Z" PublishedUtc="2015-03-24T14:51:24.0708Z" ModifiedUtc="2015-03-24T14:51:24.0084Z" />
      <AutoroutePart Alias="add-custom-settings-to-your-theme" UseCustomPattern="false" />
      <TitlePart Title="Add Custom Settings to your Theme" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Orchard Themes" />
    </BlogPost>
    <BlogPost Id="/alias=introducing-orchardizer-a-visual-studio-extension-for-orchard-developers" Status="Published">
      <BodyPart Text="This is just a quick post to announce a new free extension for Visual Studio. It is for Orchard developers and aims to basically generate a bunch of Orchard specific template code for you. It is available on the [Visual Studio Gallery][1], and the source code is up on [GitHub][2]. List of up-to-date (potentially anyway) features can be found [here][3]. Go get it!&#xD;&#xA;&#xD;&#xA;I'm hoping to add new features every now and again, usually as and when I need them but if you have any ideas I'd love to hear them. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://visualstudiogallery.msdn.microsoft.com/6408f2a0-ddb0-4fa1-938e-eef0f3ff73a3&#xD;&#xA;  [2]: http://github.com/Hazzamanic/orchardizer&#xD;&#xA;  [3]: https://github.com/Hazzamanic/orchardizer/wiki/Features" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-03-20T17:05:00Z" PublishedUtc="2015-03-24T14:51:01.7784Z" ModifiedUtc="2015-03-24T14:51:01.7316Z" />
      <AutoroutePart Alias="introducing-orchardizer-a-visual-studio-extension-for-orchard-developers" UseCustomPattern="false" />
      <TitlePart Title="Introducing: Orchardizer, a Visual Studio Extension for Orchard Developers" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,Visual Studio" />
    </BlogPost>
    <BlogPost Id="/alias=building-a-visual-studio-extension" Status="Published">
      <BodyPart Text="In late 2014 I got sick of writing [parts][1] for Orchard. Like, super bored. Previously I had used [Piotr's][2] exceptional [Code Generation Extensions][3] module for Orchard to take away some of that hassle. However, I never much liked having to go into the command line. I always wrote the commands wrong or had to go and look up the syntax because it had to be just right else it would fail. I'm just command line retarded. It also required a reload in Visual Studio, which, with my PC at the time, was an absolute nightmare. And, unfortunately, it has never been updated to work with 'The Shift', so does not generate the latest, sexiest syntax. I have also been hanging around on the side lines of the Orchard community for a while now, answering a few questions here and there, but never really getting involved. So I thought, why not finally contribute something worthwhile?&#xD;&#xA;&#xD;&#xA;So, if you didn't know, I released [Orchardizer][4] a little while back, it's had a few downloads. And I've found it very helpful, so it has at least one happy customer. I originally planned to write this post as soon as I had finished the extension but being the lazy bastard that I am, six months have passed. &#xD;&#xA;&#xD;&#xA;Before getting started on the extension I had a little look into what I was getting myself into. I read quite a few articles that talked about how simple it was to build an extension for Visual Studio. So, with my spirits high, I dived in.  &#xD;&#xA;&#xD;&#xA;I want to say that I enjoyed it. I want to write an upbeat blog post about how awesome it all was and show everyone what a great coder I am, how up for a challenge I am. Convince you guys the only thing you should do is build your own Visual Studio extension. But really I just remember being exceedingly frustrated by EnvDTE (the assembly-wrapped COM library containing the objects and members for Visual Studio core automation) development. I wanted this to be simple. This was my spare time, I didn't want to have to trawl the internet looking for some documentation or example of how to achieve something that seemed so simple but EnvDTE turned into some convoluted ridiculous mess. I know using famously overused quotes is pretty lame but...&#xD;&#xA;&#xD;&#xA;&gt; I choose a lazy person to do a hard job. Because a lazy person will find an easy way to do it - *Bill Gates*&#xD;&#xA;&#xD;&#xA;I'm outrageously lazy. And EnvDTE made being me difficult. So as I continued plucking away, I read as much as I could, as many blog posts as I could find on the subject. I remember reading one blogger who mentioned a talk by Mads Kristensen that aimed to remove the stigma surround Visual Studio extension development, how it was no longer just for the big boys, the staff working at Jetbrains or the Microsoft employees of the world. But for all this talk, these bloggers all copied code from existing open source extensions. And who could blame them? The underlying COM stuff is ugly and dealing with the code model that EnvDTE gives you access to is fiddly; limited in its ability to emit code or glean information from the code; buggy; and unintuitive.&#xD;&#xA;&#xD;&#xA;Another problem I had was the total lack of support from the online community, not that I blame them, I guess no one really cares about Visual Studio development. It's for the big boys after all. The multitude of queries I posted all went unanswered. These were mostly regarding improving the stability of my code or its performance, situations where an expert would have been a godsend to improve my hacky-but-functional code.&#xD;&#xA;&#xD;&#xA;Was it all bad? Of course not. When I wasn't dealing with Visual Studio and just writing pure C#-y stuff I was happy again. And I admit I wasn't entirely truthful when I said my online queries went unanswered. Several times I got the unhelpful comment: use Roslyn.&#xD;&#xA;&#xD;&#xA;So, Roslyn. I didn't use Roslyn because Roslyn isn't really out. It's in the Visual Studio 2015 preview. But I did have a play with it. And my god it is nice. Currently, VS has access to the compiler. Obviously. You and I, little developers wanting to build something cool for VS, get the file code model (EnvDTE.Project.CodeModel). Which sucks. But, you might say, there are cool extensions for VS, like [ReSharper][5]! Ha, they don't use the code model, they have a Roslyn-esque model under the hood that builds the syntax trees for offering all their awesome refactoring's etc. So what will change with Roslyn? You, I and Visual Studio will all be using the same API to make VS do its sexy thang. And that is what will really make building Visual Studio extensions for the little fish in the pond too.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.orchardproject.net/Documentation/Writing-a-content-part&#xD;&#xA;  [2]: http://www.szmyd.com.pl/&#xD;&#xA;  [3]: https://gallery.orchardproject.net/List/Modules/Orchard.Module.Szmyd.CodeGeneration&#xD;&#xA;  [4]: http://arkleseizure.net/introducing-orchardizer-a-visual-studio-extension-for-orchard-developers&#xD;&#xA;  [5]: http://www.jetbrains.com/resharper/" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-03-22T14:39:00Z" PublishedUtc="2015-03-24T11:38:17.7948Z" ModifiedUtc="2015-03-24T11:38:17.7168Z" />
      <AutoroutePart Alias="building-a-visual-studio-extension" UseCustomPattern="false" />
      <TitlePart Title="Building a Visual Studio Extension" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Visual Studio,EnvDTE" />
    </BlogPost>
    <BlogPost Id="/alias=losing-images-in-your-website" Status="Published">
      <BodyPart Text="At work we are currently building a system that involves advert management. I'm only playing a small role in this project currently, but sat down with the lead developer for a while last week to try and fix a strange issue where some of the advert images were not being loaded onto the page.&#xD;&#xA;&#xD;&#xA;The lead developer worked it out. Turns out, [AdBlockPlus][1] was blocking any images with &quot;adv&quot; in the title. It's pretty crazy, I thought it just had a list of domains that it blocks adverts from but it actually does far more than that. [Here][2] is a link to their filter cheat sheet. Although this doesn't seem to cover everything as they also block images with common ad dimensions in the file name too, and probably more sneaky ways to protect us from pesky ads.  &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://adblockplus.org/&#xD;&#xA;  [2]: https://adblockplus.org/en/filter-cheatsheet" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-03-21T11:16:00Z" PublishedUtc="2015-03-24T14:50:42.5904Z" ModifiedUtc="2015-03-24T14:50:42.5592Z" />
      <AutoroutePart Alias="losing-images-in-your-website" UseCustomPattern="false" />
      <TitlePart Title="Losing Images in your Website" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Adblock" />
    </BlogPost>
    <BlogPost Id="/alias=custom-layer-rule-in-orchard-cms" Status="Published">
      <BodyPart Text="I sometimes question the usage of Orchard at work, where we often use it for small, one-time use webcast sites and using a fully-fledged CMS seems a bit overkill. However, when it comes down to it, Orchard is perfect because it is so damn flexible. &#xD;&#xA;&#xD;&#xA;We run live webcast events from Orchard and during the course of an event the homepage is changed depending on the status of the event. Currently we have a page with a list of the different homepages and a button where the client can easily set the active homepage. We wanted a little more flexibility with widgets and not requiring a separate page to manage the homepage. So I set about creating a slightly different solution to what we have now that we could use if needed.&#xD;&#xA;&#xD;&#xA;Unfortunately, I cant provide the full source code because there is a lot of work stuff there but it should give you a decent shove in the right direction. We'll cover:&#xD;&#xA;&#xD;&#xA; - Creating a site setting&#xD;&#xA; - Creating a custom layer rule&#xD;&#xA;&#xD;&#xA;The first thing we will need is [Orchardizer][1], a Visual Studio extension that will generate most of the code here for us. You can install it from within Visual Studio, and once that is set up, right click your module and select **New Scaffolded Item**&#xD;&#xA;&#xD;&#xA;![Creating a new scaffolded item][2]&#xD;&#xA;&#xD;&#xA;You should now see a screen where you can select **Orchard Content Part**&#xD;&#xA;&#xD;&#xA;![Creating Orchard Content Part][3]&#xD;&#xA;&#xD;&#xA;We are going to create a new site setting part called &quot;CurrentEventSettingsPart&quot; with one property ContentId of type int, as you can see in the picture below&#xD;&#xA;&#xD;&#xA;![Creating an Orchard Content Part][4]&#xD;&#xA;&#xD;&#xA;Easy. Once that has done its thing you should have a content part attached to the site content (a site setting!). Our site setting basically contains a link to a content item. In my scenario I have a custom content part that stores the status of that content item, which is out of the scope of this blog post. So I wanted to create a layer that would only show widgets that match the current status, something like:&#xD;&#xA;&#xD;&#xA;    EventStatus(&quot;live&quot;)&#xD;&#xA;&#xD;&#xA;I had never written a layer rule before but as with all these things, Orchards source code provided all the answers and it turned out to be simple.&#xD;&#xA;&#xD;&#xA;    public class EventStatusRuleProvider : IRuleProvider {&#xD;&#xA;    &#x9;private readonly IOrchardServices _services;&#xD;&#xA;    &#xD;&#xA;    &#x9;public EventStatusRuleProvider(IOrchardServices services) {&#xD;&#xA;    &#x9;&#x9;_services = services;&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;public void Process(RuleContext ruleContext) {&#xD;&#xA;    &#x9;&#x9;if (!String.Equals(ruleContext.FunctionName, &quot;currentevent&quot;, StringComparison.OrdinalIgnoreCase)) {&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;var contentId = _services.WorkContext.CurrentSite.As&lt;CurrentEventSettingsPart&gt;().ContentId;&#xD;&#xA;    &#x9;&#x9;if (contentId == 0)&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;var contentItem = _services.ContentManager.Get(contentId);&#xD;&#xA;    &#x9;&#x9;if (contentItem == null)&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;var part = contentItem.As&lt;ModEventPart&gt;();&#xD;&#xA;    &#x9;&#x9;if (part == null)&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;ruleContext.Result = String.Equals(part.CurrentEventStatus.ToString(), Convert.ToString(ruleContext.Arguments[0]), StringComparison.OrdinalIgnoreCase);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;A few things are going on here, with most of the code being checks for nulls etc. The first thing we are doing is implementing the *IRuleProvider* interface and injecting *IOrchardServices* into our class. *IRuleProvider* requires us to implement one method called *Process*, which takes in one parameter of type *RuleContext*. This just holds the function that needs to be evaluated, an array of arguments, and the result. All we do then is check whether we need to evaluate the function, get our content id from the site settings, get that content item, check its status versus the status sent in from the layers argument and set the result property of the *RuleContext* to true or false.&#xD;&#xA;&#xD;&#xA;Orchards layers allow you to easily combine different rules together. So my layer looks like this:&#xD;&#xA;&#xD;&#xA;    EventStatus(&quot;live&quot;) and url('~/') and authenticated&#xD;&#xA;&#xD;&#xA;This layer will trigger on the homepage, when the event is live and the user is authenticated. Perfect. &#xD;&#xA;&#xD;&#xA;In the next post we'll look at exposing our site setting as a token.&#xD;&#xA;&#xD;&#xA;  [1]: http://arkleseizure.net/introducing-orchardizer-a-visual-studio-extension-for-orchard-developers&#xD;&#xA;  [2]: /Media/Arkleseizure/Images/scaffold3.png&#xD;&#xA;  [3]: /Media/Arkleseizure/Images/scaffold4.png&#xD;&#xA;  [4]: /Media/Arkleseizure/Images/scaffold5.png" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-03-24T11:27:00Z" PublishedUtc="2015-05-06T09:00:12.7836Z" ModifiedUtc="2015-05-06T09:00:12.7524Z" />
      <AutoroutePart Alias="custom-layer-rule-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Custom Layer Rule in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=custom-tokens-in-orchard-cms" Status="Published">
      <BodyPart Text="In the [previous][1] post we created a site setting and a custom layer rule for widgets. We are now going to look at exposing our setting as a token so it can be used in workflows. Tokens are pieces of text within Orchard that can be dynamically substituted with a value. There is not much by the way of official documentation on tokens but, as always, Bertrand supplies an excellent [two][2] [part][3] introduction to tokens and the basics of how to use them.&#xD;&#xA;&#xD;&#xA;The first thing we are going to do is create a class with the *ITokenProvider* interface and the class implementing it. So something like this:&#xD;&#xA;&#xD;&#xA;    public interface ITokenProvider : IEventHandler&#xD;&#xA;    {&#xD;&#xA;    &#x9;void Describe(dynamic context);&#xD;&#xA;    &#x9;void Evaluate(dynamic context);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public class CurrentEventTokens : ITokenProvider {}&#xD;&#xA;&#xD;&#xA;What are we doing here? We have basically copied the *ITokenProvider* interface from Orchard.Tokens into our own module and implemented that instead of referencing Orchard.Tokens and implementing their interface. How can we do this? We are inheriting here from *IEventHandler*. This is a specific implementation of IDependecy which, when injected and a method on it called, it will send that message to the event bus, where every implementation of the same interface and method name will be called. This is what allows us to decouple our module from Orchard.Tokens. If you want to know more about IEventHander (and how to use it yourself), I encourage you to read [Sipke's excellent overview][4].&#xD;&#xA;&#xD;&#xA;We now must implement the two methods, *Describe* and *Evaluate*. The *Describe* method will provide the description for the tokens, as seen in the image above. The *Evaluate* method will actually parse our token into the desired value.&#xD;&#xA;&#xD;&#xA;![Site setting tokens][5]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;As we can see above, there is currently a group of tokens for Site Settings, so it would make sense that our tokens could be contained within that too. &#xD;&#xA;&#xD;&#xA;    public void Describe(dynamic context) {&#xD;&#xA;    &#x9;context.For(&quot;Site&quot;, T(&quot;Site Settings&quot;), T(&quot;Tokens for Site Settings&quot;))&#xD;&#xA;    &#x9;&#x9;.Token(&quot;CurrentEvent&quot;, T(&quot;Current Event&quot;), T(&quot;Tokens for the current event&quot;));&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;So here we are just adding our new token, *CurrentEvent*, to the **Site Settings** group. &#xD;&#xA;&#xD;&#xA;    public void Evaluate(dynamic context) {&#xD;&#xA;    &#x9;context.For&lt;CurrentEventSettingsPart&gt;(&quot;Site&quot;, (Func&lt;CurrentEventSettingsPart&gt;)(() =&gt; _orchardServices.WorkContext.CurrentSite.As&lt;CurrentEventSettingsPart&gt;()))&#xD;&#xA;    &#x9;&#x9;.Token(&quot;CurrentEvent&quot;, (Func&lt;CurrentEventSettingsPart, object&gt;)(part =&gt; part.ContentId))&#xD;&#xA;    &#x9;&#x9;&#x9;.Chain(&quot;CurrentEvent&quot;, &quot;Content&quot;, (Func&lt;CurrentEventSettingsPart, object&gt;)(part =&gt; _contentManager.Get(part.ContentId)));&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This is where it gets a little more complicated. We can split this up into three distinct parts.&#xD;&#xA;&#xD;&#xA;**The Context**&#xD;&#xA;This is the default, global data that our tokens will be accessing. This gets the current site content item and gets our part data. This data is just the default, as it can be overridden if an object with the name of Site is passed into the tokenizer. In the main settings token implementation, an object of type ISite is the default object. This could be a little dangerous because we are sharing the Site token group and if a different object was passed in, it would likely be an object of type ISite, so our code would not work. An example would be:&#xD;&#xA;&#xD;&#xA;    var text = _tokenizer.Replace(&quot;{Site.CurrentEvent} - {Site.SiteName}&quot;, new { Site = WorkContext.CurrentSite });&#xD;&#xA;&#xD;&#xA;But I'm sure we will be fine.&#xD;&#xA;&#xD;&#xA;**The Token**&#xD;&#xA;This is our token (yay!). Here we say we have a token called *CurrentEvent* that will be evaluated as the property *ContentId* of the data we get from the Context.&#xD;&#xA;&#xD;&#xA;**The Chain**&#xD;&#xA;This isn't required, but it is probably the most powerful bit of tokens. Chaining tokens allows us to pass more data on to be processed further in the token chain (did that make sense?). So in our case we produce a Content token from the content id stored in the site setting. This is then passed on and we can access all the contents properties using content tokens. How awesome is that?! &#xD;&#xA;&#xD;&#xA;I'm using this token in a countdown widget, so if the events time is ever changed, there is no need to make a change to the countdown widget as well.&#xD;&#xA;&#xD;&#xA;Since we are storing a plain old content id in the database (probably a bit naughty really), the next post will look at importing and exporting our site settings.&#xD;&#xA;&#xD;&#xA;  [1]: http://arkleseizure.net/custom-layer-rule-in-orchard-cms&#xD;&#xA;  [2]: http://weblogs.asp.net/bleroy/future-orchard-part-1-introducing-tokens&#xD;&#xA;  [3]: http://weblogs.asp.net/bleroy/future-orchard-part-2-more-tokens&#xD;&#xA;  [4]: http://www.ideliverable.com/blog/ieventhandler&#xD;&#xA;  [5]: /Media/Arkleseizure/Images/sitetokens.png&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-03-24T23:10:00Z" PublishedUtc="2015-03-24T23:31:53.1336Z" ModifiedUtc="2015-03-24T23:31:53.0868Z" />
      <AutoroutePart Alias="custom-tokens-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Custom Tokens in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="orchard,tokens" />
    </BlogPost>
    <BlogPost Id="/alias=exporting-and-importing-in-orchard-cms" Status="Published">
      <BodyPart Text="The feature we use the most at work is Orchards awesome [import and export][1] ability. You can take any content on your site, export it into an XML file and then import it into another site. It allows you to get a site up and running in a heartbeat. In the [previous post][2] we added token support for our site setting. Our site setting stores a plain Id for a content item in the database. This is okay, but when we import our content the Id's will most likely all be different. To support this scenario, Orchard offers the concept of a content item identity. Bertrand Le Roy again provides an excellent [explanation][3] of Identity in Orchard, but in short it is just a combination of unique identifiers such as a randomly generated guid, or a pages alias. So we want to export this identity instead of the Id value stored in the database and convert the identity into an Id during the import. &#xD;&#xA;&#xD;&#xA;Import and Export are handled in the driver, with one method for each. Let's start with the export. In your driver, go ahead and add the following method declaration.&#xD;&#xA;&#xD;&#xA;    protected override void Exporting(CurrentEventSettingsPart part, ExportContentContext context) {}&#xD;&#xA;&#xD;&#xA;This method takes in the part (our site setting) and the ExportContentContext which is basically just an XElement that will be added to the export document. So let's first try and export just the plain old content Id. &#xD;&#xA;&#xD;&#xA;    var partDefinitionName = part.PartDefinition.Name;&#xD;&#xA;    if (part.ContentId != 0) {&#xD;&#xA;    &#x9;context.Element(partDefinitionName).SetAttributeValue(&quot;ContentId&quot;, part.ContentId.ToString());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;So here we are just getting the name of our part (which will be the name of the Element and setting an attribute of &quot;ContentId&quot; with the value from the database. Simples. To change that Id to the content items identity is fairly simple, so we'll change what's in the if statement above to:&#xD;&#xA;&#xD;&#xA;    context.Element(partDefinitionName).SetAttributeValue(&quot;ContentId&quot;, _contentManager.GetItemMetadata(_contentManager.Get(part.ContentId)).Identity.ToString());&#xD;&#xA;&#xD;&#xA;Here we are getting the content item, then getting the metadata relevant to that content item. The metadata contains various information about a content item such as the display route, the edit route, and also the Identity. All these properties are populated from the content handler by the `GetContentItemMetadata` method. Now when we export we should get something like this:&#xD;&#xA;&#xD;&#xA;    &lt;CurrentEventSettingsPart ContentId=&quot;/alias=my-event/Identifier=8aead476c03e4e56b554da515069b261&quot; /&gt;&#xD;&#xA;&#xD;&#xA;The *Identifier* property here comes by adding the IdentityPart. This is worth noting because if you don't have any parts on your content type that provide an identifier (such as the AutoRoutePart) it will be blank, so adding the IdentityPart is the default way to get this.&#xD;&#xA;&#xD;&#xA;Now to import our identity and resolve the Content Id we can use the following code:&#xD;&#xA;&#xD;&#xA;    protected override void Importing(CurrentEventSettingsPart part, ImportContentContext context) {&#xD;&#xA;    &#x9;var contentId = context.Attribute(part.PartDefinition.Name, &quot;ContentId&quot;);&#xD;&#xA;    &#x9;if (contentId != null) {&#xD;&#xA;    &#x9;&#x9;var contentIdItem = context.GetItemFromSession(contentId);&#xD;&#xA;    &#x9;&#x9;if (contentIdItem != null)&#xD;&#xA;    &#x9;&#x9;&#x9;part.ContentId = contentIdItem.Id;&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This is very simple and all it is doing is resolving a content Id from the identity. Orchard is actually doing quite a lot of hard work behind the scenes to make this happen. It stores a dictionary of all the identities mapped to the relevant content id it will be using for that content item. To deal with batched imports (that are run across sessions) it lumps all relevant identifiers together so that the dependencies can all be managed within the same transaction.&#xD;&#xA;&#xD;&#xA;Orchard, full of all the cool shit.&#xD;&#xA;&#xD;&#xA;**UPDATE**: I have actually noticed that this makes the recipe fail, although so long as settings is at the end it will complete fine, also running all the settings imports. It fails with the error&#xD;&#xA;&#xD;&#xA;&gt; Recipe execution with id 2b01a2d64e44473fa143539538a24c85 was cancelled because the &quot;Settings&quot; step failed to execute. The following exception was thrown: Input string was not in a correct format.. Refer to the error logs for more information.&#xD;&#xA;&#xD;&#xA;Which is weird because it all seems to be working fine. I will have to dig around. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://docs.orchardproject.net/Documentation/Making-a-Web-Site-Recipe&#xD;&#xA;  [2]: http://arkleseizure.net/custom-tokens-in-orchard-cms&#xD;&#xA;  [3]: http://weblogs.asp.net/bleroy/identity-in-orchard-import-export&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-04-25T14:36:00Z" PublishedUtc="2015-04-25T14:38:47.9508Z" ModifiedUtc="2015-04-25T14:38:47.9196Z" />
      <AutoroutePart Alias="exporting-and-importing-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Exporting and Importing a Content Item Relation in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=making-your-driver-display-methods-perform-better" Status="Published">
      <BodyPart Text="Orchard is blazingly fast out of the box. I mean, I started at v0.9 and it was well, pretty crappy. But now? It is an absolute beast. However, it is all too easy to completely screw up the performance. How many times do you read messages on Codeplex or Stackoverflow along the lines of: &quot;Orchard admin really slow when I have my module enabled&quot;, &quot;Homepage really slow with custom content type&quot; etc. etc. Quite a lot right? I find that when I write a particularly pathetic method that cocks up performance, it usually stems from my lack of understanding about the guts of Orchard. Take Drivers for example. You may have seen code like this. &#xD;&#xA;&#xD;&#xA;    protected override DriverResult Display(MyPart part, string displayType, dynamic shapeHelper)&#xD;&#xA;    {&#xD;&#xA;    &#x9;// do loads of computations&#xD;&#xA;    &#xD;&#xA;    &#x9;// return the shape&#xD;&#xA;    &#x9;return ContentShape(&quot;Parts_MyPart&quot;, () =&gt; shapeHelper.Parts_MyPart());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Looks fine, right? No, not fine. Naughty. The problem with this stems from how Orchard displays content. When a piece of content is displayed in Orchard it goes something like this. The default Content shape is built and several standard properties for the shape are set (the content item, the layout and the display type). It then runs through all the `IContentHandlers`, calling the `BuildDisplay` method. There are two particularly important handlers, and those are the ones that call all the driver Display methods for Parts and Fields. After it has collected all the driver results, the placement checks are done to decide whether or not a driver should actually return a shape. What this means is that if you have code contained within the Display method that is not in the Func type returned in ContentShape, it will be run even if it the part is not actually going to be displayed. Which doesn't sound too great if you ask me. So to improve the above method, all we need to do is...&#xD;&#xA;&#xD;&#xA;    protected override DriverResult Display(MyPart part, string displayType, dynamic shapeHelper)&#xD;&#xA;    {&#xD;&#xA;    &#x9;// return the shape&#xD;&#xA;    &#x9;return ContentShape(&quot;Parts_MyPart&quot;, () =&gt; {&#xD;&#xA;    &#x9;&#x9;// do loads of computations&#xD;&#xA;    &#x9;&#x9;&#xD;&#xA;    &#x9;&#x9;return shapeHelper.Parts_MyPart();&#xD;&#xA;    &#x9;});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;What we have done is moved the &quot;do loads of computations&quot; section into the ContentShape result, so it will only be run if our shape is indeed being displayed. Super speedy." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-04-28T23:18:00Z" PublishedUtc="2015-04-28T23:30:22.6872Z" ModifiedUtc="2015-04-28T23:30:22.6248Z" />
      <AutoroutePart Alias="making-your-driver-display-methods-perform-better" UseCustomPattern="false" />
      <TitlePart Title="Making your Driver Display Methods Perform Better" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=downloading-all-inline-images-in-an-email" Status="Published">
      <BodyPart Text="I recently got sent several emails full of a bazillion images that I had to upload to a website. Okay so there weren't that many, but close to a thousand images. Now, unfortunately, instead of attaching the images, or using something like WeTransfer, these images were all inserted inline. And Gmail offers no way to download all these images. Super lame. And I was not going to save each image individually. Hell no. Luckily, if you just press Ctrl + S on the email, you can save the webpage, which will download all the pages assets into a folder, including all the pesky inline images! Simples." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-04-30T19:08:00.024Z" PublishedUtc="2015-04-30T19:08:00.024Z" ModifiedUtc="2015-04-30T19:07:59.9928Z" />
      <AutoroutePart Alias="downloading-all-inline-images-in-an-email" UseCustomPattern="false" />
      <TitlePart Title="Downloading all Inline Images in an Email" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Email" />
    </BlogPost>
    <BlogPost Id="/alias=dont-let-the-designer-ruin-your-drivers-performance" Status="Published">
      <BodyPart Text="I remember when I clocked onto how to make my drivers in Orchard [a bit less crap][1], I was very proud of myself. Feeling all chuffed with my website now not performing at snail speed, I went onto design my theme. What did I do? Fucked up performance of course. How? I was lazy and removed ContentZones from [Item Templates][2]. Sure, it looked pretty, but Orchard still thought it was going to be displaying a bunch of parts that weren't actually being displayed because that is what the placement said for it to do. Hence, all those damn drivers fired. Sad times.&#xD;&#xA;&#xD;&#xA;It is one of those caveats you have to watch out for in Orchard's dynamic dispatching of content, awesome but sneaky. So just to clarify, always make sure what your placement says to be displayed matches what your views are allowing to be displayed. Take the following placement file.&#xD;&#xA;&#xD;&#xA;    &lt;Match ContentType=&quot;CoolContent&quot;&gt;&#xD;&#xA;     &lt;Place Parts_CoolPart=&quot;CoolZone:1&quot;&#xD;&#xA;    &#x9;&#x9;Parts_AwesomePart=&quot;AwesomeZone:1&quot; /&gt;&#xD;&#xA;    &lt;/Match&gt;&#xD;&#xA;&#xD;&#xA;Looks okay, we are saying for the content type *Cool Content*, the **CoolPart** will be displayed in the **CoolZone** and the **AwesomePart** will be displayed in the **AwesomeZone**. Now let's look at the view, *Content-CoolContent.cshtml*.&#xD;&#xA;&#xD;&#xA;    &lt;div&gt;&#xD;&#xA;    &#x9;@Display(Model.CoolZone)&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;&#xD;&#xA;All this is displaying is the **CoolZone**, the **AwesomeZone** isn't there, but because the placement is saying to create the **AwesomePart** in the **AwesomeZone**, Orchard will still create that part and send it to that zone, even though it wont ultimately be displayed.&#xD;&#xA;&#xD;&#xA;I think that's enough of the word 'displayed' for a little while...&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://arkleseizure.net/making-your-driver-display-methods-perform-better&#xD;&#xA;  [2]: http://arkleseizure.net/what-the-hell-is-an-item-template" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-05-16T11:53:00Z" PublishedUtc="2015-05-16T12:06:33.7968Z" ModifiedUtc="2015-05-16T12:06:33.7656Z" />
      <AutoroutePart Alias="dont-let-the-designer-ruin-your-drivers-performance" UseCustomPattern="false" />
      <TitlePart Title="Don't let the Designer Ruin your Driver's Performance" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=reclaiming-screen-real-estate-in-orchard-s-admin-area" Status="Published">
      <BodyPart Text="Orchard's admin area is pretty standard, left sidebar with loads of menu items and content taking up the rest of the screen. This works great, easy to navigate and links to other admin sections is easily within reach. However, there are times when you want to make use of the entire screen but still want to be in the admin area. Taking a look at some of the admin themes available from marketplaces, they all seem to feature collapsible side menus, so hopefully this is something we will see in Orchard when the admin theme is revisited. Until then, for our own admin pages, we can do something like this.&#xD;&#xA;&#xD;&#xA;First we will need a button.&#xD;&#xA;&#xD;&#xA;    &lt;button id=&quot;expand&quot;&gt;Expand to fit&lt;/button&gt;&#xD;&#xA;&#xD;&#xA;And to make this button expand the content screen we just need some simple jQuery&#xD;&#xA;&#xD;&#xA;    @using (Script.Foot())&#xD;&#xA;    {&#xD;&#xA;        &lt;script type=&quot;text/javascript&quot;&gt;&#xD;&#xA;            $(function () {&#xD;&#xA;                var expand = function () {&#xD;&#xA;                    $(&quot;#expand&quot;).text(&quot;Shrink to fit&quot;);&#xD;&#xA;                    $('#main').css({ position: &quot;absolute&quot;, &quot;z-index&quot;: &quot;1000&quot;, width: &quot;inherit&quot; })&#xD;&#xA;                        .animate({ left: 0, &quot;margin-left&quot;: 0 });&#xD;&#xA;                };&#xD;&#xA;    &#x9;&#x9;&#x9;&#xD;&#xA;                var shrink = function () {&#xD;&#xA;                    $(&quot;#expand&quot;).text(&quot;Expand to fit&quot;);&#xD;&#xA;                    $('#main').css({ position: &quot;relative&quot;, width: &quot;auto&quot; })&#xD;&#xA;                        .animate({ &quot;margin-left&quot;: &quot;260px&quot; });&#xD;&#xA;                };&#xD;&#xA;    &#xD;&#xA;                $(&quot;#expand&quot;).toggle(expand, shrink);&#xD;&#xA;            });&#xD;&#xA;        &lt;/script&gt;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;I'm slightly embarrassed to admit that we have some sites running fairly old Orchard codebases, which are still using jQuery pre 1.8. So when I just copied the code I had been using to expand the screen into my brand spanking new Orchard 1.9 codebase, it error'd because the `.toggle()` method no longer exists (as it used to) in jQuery, and I cried a bit. To fix this, you can either load jQuery migrate, which comes with Orchard (`Script.Require(&quot;jQueryMigrate&quot;)`), or just add a little replacement method (that I stole from [here][1])&#xD;&#xA;&#xD;&#xA;    $.fn.toggleClick = function () {&#xD;&#xA;    &#x9;var functions = arguments, iteration = 0;&#xD;&#xA;    &#x9;return this.click(function () {&#xD;&#xA;    &#x9;&#x9;functions[iteration].call();&#xD;&#xA;    &#x9;&#x9;iteration = (iteration + 1) % functions.length;&#xD;&#xA;    &#x9;});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then just change `toggle` to `toggleClick`, like so.&#xD;&#xA;&#xD;&#xA;    $(&quot;#expand&quot;).toggleClick(expand, shrink);&#xD;&#xA;&#xD;&#xA;The result?&#xD;&#xA;&#xD;&#xA;![shrunk][2]&#xD;&#xA;&#xD;&#xA;![expanded][3]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://stackoverflow.com/a/25150375/1037489&#xD;&#xA;  [2]: /Media/Arkleseizure/Images/shrunk.PNG&#xD;&#xA;  [3]: /Media/Arkleseizure/Images/expanded.PNG" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-07-03T13:06:55.4778Z" PublishedUtc="2015-07-03T13:06:55.4778Z" ModifiedUtc="2015-07-03T13:06:13.9818Z" />
      <AutoroutePart Alias="reclaiming-screen-real-estate-in-orchard-s-admin-area" UseCustomPattern="false" />
      <TitlePart Title="Reclaiming Screen Real Estate in Orchard's Admin Area" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=tabs-in-orchard-content-editors" Status="Published">
      <BodyPart Text="&gt; I will update this post with a full code download shortly&#xD;&#xA;&#xD;&#xA;So for years there has been talk about tabs in Orchard's content editors but the functionality has never appeared. I always meant to take a look at it but it was never a priority. However, we've been overhauling some of our Orchard sites lately and several editors have become pretty huge and unmanageable. So recently I took the time to tackle the issue.&#xD;&#xA;&#xD;&#xA;The first thing I wanted to do was create a solution that didn't require me to make any additions to Orchard's core. There are smarter people than me working on this problem ([see the GitHub discussion][1]) so hopefully I will be able to replace mine with theirs at some point in the future and we have several legacy sites with hacks in the Orchard code and upgrading them drove me up the wall. I don't want to put whoever comes after me (or future me) through that. The second thing I wanted was for it to be managed from the admin panel. Using Placement.info could be a neat feature, but I only really want to utilize tabs in cases where the editor is large enough to warrant such. &#xD;&#xA;&#xD;&#xA;I remembered [Sebastien][2] mentioning that the placement had support for # after the zone where tabs could be defined. I had a quick look, but although this functionality is indeed built in it would need more work to actually surface it. I believe [Znowman][3] did some work on this. I took a look at his fork and decided he'd made a lot of changes that I couldn't view because Codeplex is so slow so... I gave up looking into his work. Thus, armed with the knowledge that there wasn't any code I could copy from the internet, I set to work.&#xD;&#xA;&#xD;&#xA;&gt; I meant to write this blog post as soon as I built the feature so it&#xD;&#xA;&gt; would all be fresh in my mind and I could astound you all with my in&#xD;&#xA;&gt; depth knowledge of Orchard's internal workings. Unfortunately, a month&#xD;&#xA;&gt; or more has gone by and I have totally forgotten what in Orchard makes&#xD;&#xA;&gt; all this tick. Instead I shall make vague, slightly unhelpful&#xD;&#xA;&gt; statements (read: guesses) about what is happening.&#xD;&#xA;&#xD;&#xA;I started out by getting my own content edit view. I tried to create a `Content.Edit.cshtml` in the Views folder but this didn't seem to override the default view located within Orchard.Core. So I changed the Stereotype to Tabs and created a view called `Tabs.Edit.cshtml`. Hacked! Now currently editors basically only support rendering part/field editors within the Content zone. These &quot;zones&quot; are dynamic properties on the content editor shape that contain all the editors. Under the hood, these are basically stored within a dictionary, in a property called `Properties`. So instead of having to write @Display(Model.Content) we just want to render a shape that gets all the &quot;zones&quot; and renders them along with a tab for that &quot;zone&quot;. To achieve this I've created my own custom shape within code, done by decorating it with the Shape attribute, which tells Orchard it is a shape (they don't call me Captain Obvious for nothing).&#xD;&#xA;&#xD;&#xA;    [Shape]&#xD;&#xA;    public void TabEditor(dynamic Display, dynamic Zones, TextWriter Output) {&#xD;&#xA;    &#x9;// cast the dynamic properties as a zone&#xD;&#xA;    &#x9;ZoneHolding x = Zones;&#xD;&#xA;    &#x9;// get all the dynamic properties from their under the hood dictionary store&#xD;&#xA;    &#x9;var props = x.Properties;&#xD;&#xA;    &#x9;// get the content item&#xD;&#xA;    &#x9;var item = (ContentItem) Zones.ContentItem;&#xD;&#xA;    &#x9;// need to replace this with a way to get current tabs, for ordering&#xD;&#xA;    &#x9;string[] tabs = new[] {&quot;Content&quot;, &quot;Extra&quot;}'&#xD;&#xA;    &#xD;&#xA;    &#x9;// loop through, find each tab and render it&#xD;&#xA;    &#x9;foreach (var tab in tabs) {&#xD;&#xA;    &#x9;&#x9;dynamic shape = props[tab];&#xD;&#xA;    &#x9;&#x9;if (shape == null)&#xD;&#xA;    &#x9;&#x9;&#x9;continue;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;Render(tab, shape, Display, Output);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;// if there are any other zones render these too (ie. from placement)&#xD;&#xA;    &#x9;foreach (var prop in props.Keys.Cast&lt;string&gt;().Except(tabs)) {&#xD;&#xA;    &#x9;&#x9;//TODO: a better solution exists probably&#xD;&#xA;    &#x9;&#x9;// make sure they are not Sidebar or Header&#xD;&#xA;    &#x9;&#x9;if (prop == &quot;Sidebar&quot; || prop == &quot;Header&quot;) continue;&#xD;&#xA;    &#x9;&#x9;// cast as a shape to make sure it is a zone we want to render&#xD;&#xA;    &#x9;&#x9;var shape = props[prop];&#xD;&#xA;    &#x9;&#x9;if (!(shape is Shape))&#xD;&#xA;    &#x9;&#x9;&#x9;continue;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;Render(prop, shape, Display, Output);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    /// &lt;summary&gt;&#xD;&#xA;    /// Renders the specified tab and the tab HTML&#xD;&#xA;    /// &lt;/summary&gt;&#xD;&#xA;    /// &lt;param name=&quot;tab&quot;&gt;The tab.&lt;/param&gt;&#xD;&#xA;    /// &lt;param name=&quot;shape&quot;&gt;The shape.&lt;/param&gt;&#xD;&#xA;    /// &lt;param name=&quot;Display&quot;&gt;The display.&lt;/param&gt;&#xD;&#xA;    /// &lt;param name=&quot;Output&quot;&gt;The output.&lt;/param&gt;&#xD;&#xA;    public void Render(string tab, dynamic shape, dynamic Display, TextWriter Output) {&#xD;&#xA;    &#x9;Output.Write(&quot;&lt;h3&gt;&quot; + tab + &quot;&lt;/h3&gt;&lt;section&gt;&quot;);&#xD;&#xA;    &#x9;foreach (var item in CoreShapes.Order(shape))&#xD;&#xA;    &#x9;&#x9;Output.Write(Display(item));&#xD;&#xA;    &#x9;Output.Write(&quot;&lt;/section&gt;&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;It's pretty simple and messy code, but it works. So now we can manage tabs from our Placement.info, but ideally we'd like to do this from the admin panel. Thankfully, most of this functionality (the complicated bit) is already available in Orchard.ContentTypes. It implements its own Placement binding strategy from placements stored in the database. We just need to extend this so it supports tabs. I don't much like the way the editor for it is written, javascript messing around with inputs. The only thing I dislike more is what I replaced it with, which is just a horrible javascript mess, so I shall not go through that code. I'd be terribly embarrassed... So here are some screenshots instead:&#xD;&#xA;&#xD;&#xA;![Tab Editor][4]&#xD;&#xA;*New tab editor screen, with a Header section for content that should be displayed above the tabs*&#xD;&#xA;&#xD;&#xA;![Create new tabs][5]&#xD;&#xA;*You can create new tabs within the editor*&#xD;&#xA;&#xD;&#xA;![Add parts to the new tab][6]&#xD;&#xA;*You can drag and drop parts between tabs and within tabs for ordering. You can also delete tabs, which will copy all parts and fields within that tab into the closest tab*&#xD;&#xA;&#xD;&#xA;Next, we need a good way to decide which content types should have tabbed editors, and of course what tabs we have so we can order them correctly in the editor. Orchard allows us to add settings to the content type itself, like so:&#xD;&#xA;&#xD;&#xA;    public class TabSettings {&#xD;&#xA;    &#x9;public bool EditorTabs { get; set; }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    public class TabSettingsEditorEvents : ContentDefinitionEditorEventsBase {&#xD;&#xA;    &#x9;public override IEnumerable&lt;TemplateViewModel&gt; TypeEditor(ContentTypeDefinition definition) {&#xD;&#xA;    &#x9;&#x9;var settings = definition.Settings.GetModel&lt;TabSettings&gt;();&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;yield return DefinitionTemplate(settings);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;public override IEnumerable&lt;TemplateViewModel&gt; TypeEditorUpdate(ContentTypeDefinitionBuilder builder, IUpdateModel updateModel) {&#xD;&#xA;    &#x9;&#x9;var model = new TabSettings();&#xD;&#xA;    &#x9;&#x9;updateModel.TryUpdateModel(model, &quot;TabSettings&quot;, null, null);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;builder.WithSetting(&quot;TabSettings.EditorTabs&quot;, model.EditorTabs.ToString());&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;yield return DefinitionTemplate(model);&#xD;&#xA;    &#x9;}&#xD;&#xA;    } &#xD;&#xA;&#xD;&#xA;Now when we load the content type editor page, we should have an extra checkbox (after you've created the relevant view, of course) for whether you want tabs displayed or not. To make use of this, we'll remove the silly stereotype hack and add an alternate depending on the value of that checkbox.&#xD;&#xA;&#xD;&#xA;    public class TabShapes : IShapeTableProvider {&#xD;&#xA;    &#x9;public void Discover(ShapeTableBuilder builder) {&#xD;&#xA;    &#x9;&#x9;builder.Describe(&quot;Content_Edit&quot;)&#xD;&#xA;    &#x9;&#x9;&#x9;.OnDisplaying(displaying =&gt; {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;ContentItem contentItem = displaying.Shape.ContentItem;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;var tabSettings = contentItem.TypeDefinition.Settings.GetModel&lt;TabSettings&gt;();&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;if (!tabSettings.EditorTabs)&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;return;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;displaying.ShapeMetadata.Alternates.Add(&quot;Tabs_Edit&quot;);&#xD;&#xA;    &#x9;&#x9;&#x9;});&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And we should probably actually render the tabs as well, for which I am using jQuery Steps, because I was already using that for a different project, however I want to change it for various reasons, mainly because it sucks for this. The Tabs.Edit.cshtml view (I couldn't be bothered to rename it so our alternate shall stay as so):&#xD;&#xA;&#xD;&#xA;    @{&#xD;&#xA;        Style.Include(&quot;tabcontrol&quot;);&#xD;&#xA;        &#xD;&#xA;        Script.Require(&quot;jQuery&quot;).AtFoot();&#xD;&#xA;        Script.Include(&quot;jquery.steps.min.js&quot;).AtFoot();&#xD;&#xA;        &#xD;&#xA;        var stuff = New.TabEditor(Zones: Model);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    &lt;div class=&quot;edit-item&quot;&gt;&#xD;&#xA;        &lt;div class=&quot;edit-item-primary&quot;&gt;&#xD;&#xA;            @Display(Model.Header)&#xD;&#xA;            &#xD;&#xA;            &lt;div class=&quot;steps&quot;&gt;&#xD;&#xA;                @Display(stuff)&#xD;&#xA;            &lt;/div&gt;&#xD;&#xA;    &#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;        &lt;div class=&quot;edit-item-secondary group&quot;&gt;&#xD;&#xA;            @if (Model.Actions != null) {&#xD;&#xA;                &lt;div class=&quot;edit-item-actions&quot;&gt;&#xD;&#xA;                    @Display(Model.Actions)&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            }&#xD;&#xA;            @if (Model.Sidebar != null) {&#xD;&#xA;                &lt;div class=&quot;edit-item-sidebar group&quot;&gt;&#xD;&#xA;                    @Display(Model.Sidebar)&#xD;&#xA;                &lt;/div&gt;&#xD;&#xA;            }&#xD;&#xA;        &lt;/div&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;    &#xD;&#xA;    @if (!String.IsNullOrWhiteSpace(Request.QueryString[&quot;returnUrl&quot;])) {&#xD;&#xA;        @Html.Hidden(&quot;returnUrl&quot;, Request.QueryString[&quot;returnUrl&quot;])&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    @using (Script.Foot()) {&#xD;&#xA;        &lt;script type=&quot;text/javascript&quot;&gt;&#xD;&#xA;            $(function () {&#xD;&#xA;                function resizeJquerySteps() {&#xD;&#xA;                    $('.steps .content').animate({ height: $('.body.current').outerHeight() + 140  }, &quot;fast&quot;);&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                $(&quot;.steps&quot;).steps({&#xD;&#xA;                    headerTag: &quot;h3&quot;,&#xD;&#xA;                    bodyTag: &quot;section&quot;,&#xD;&#xA;                    transitionEffect: &quot;slideLeft&quot;,&#xD;&#xA;                    enableFinishButton: false,&#xD;&#xA;                    enablePagination: false,&#xD;&#xA;                    enableAllSteps: true,&#xD;&#xA;                    titleTemplate: &quot;#title#&quot;,&#xD;&#xA;                    cssClass: &quot;tabcontrol&quot;,&#xD;&#xA;                    onStepChanged: function (event, currentIndex, priorIndex) {&#xD;&#xA;                        resizeJquerySteps();&#xD;&#xA;                    },&#xD;&#xA;                    onInit: function() {&#xD;&#xA;                        resizeJquerySteps();&#xD;&#xA;                        $(&quot;.steps&quot;).show();&#xD;&#xA;                    }&#xD;&#xA;                });&#xD;&#xA;            });&#xD;&#xA;        &lt;/script&gt;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;I'm planning to release the code as a little module shortly (still needs a fair amount of tidying), so if you desperately want content editor tabs and cant wait until Orchard officially supports it, you can quite happily have content editor tabs.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/OrchardCMS/Orchard/issues/2573&#xD;&#xA;  [2]: http://sebastienros.com/&#xD;&#xA;  [3]: http://www.codeplex.com/site/users/view/Znowman&#xD;&#xA;  [4]: /Media/Arkleseizure/Images/tabs1.PNG&#xD;&#xA;  [5]: /Media/Arkleseizure/Images/tabs2.PNG&#xD;&#xA;  [6]: /Media/Arkleseizure/Images/tabs3.PNG" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-10-20T14:09:00Z" PublishedUtc="2015-10-21T09:07:28.893Z" ModifiedUtc="2015-10-21T09:07:28.8462Z" />
      <AutoroutePart Alias="tabs-in-orchard-content-editors" UseCustomPattern="false" />
      <TitlePart Title="Tabs in Orchard Content Editors" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=bulk-renaming-files-in-amazon-s3" Status="Published">
      <BodyPart Text="The problem: We are currently migrating our on demand video collection from dedicated servers to Amazon's Simple Storage Service (S3). The process has been fairly smooth, if a little laborious. However, we ran into an issue caused by the fact that S3 is case sensitive, where previously this didn't make a difference to us. &#xD;&#xA;&#xD;&#xA;There were quite a few things we could do to solve this particular issue, we opted to just make all the videos stored on S3 lowercase. To do this, I wrote a simple C# console app, because I'm a Microsoft junkie and not down with whatever the cool kids are using these days.&#xD;&#xA;&#xD;&#xA;S3 doesn't allow you to rename a file, I guess because of the fact it is an object-based storage solution, so we basically have to copy the object we want to rename and assign it a modified key then delete the old object. &#xD;&#xA;&#xD;&#xA;First we need to create a C# console app and add the AWS S3 nuget package. Amazon recently modularised their .NET SDK into different packages for each of their different services, which is pretty neat. To find the relevant nuget package, which is stupidly hidden in nuget, search for &quot;amazon simple storage service&quot; and install the package with the Id &quot;AWSSDK.S3&quot;.&#xD;&#xA;&#xD;&#xA;    using Amazon;&#xD;&#xA;    using Amazon.S3;&#xD;&#xA;    using Amazon.S3.Model;&#xD;&#xA;    &#xD;&#xA;    namespace AmazonLowercase {&#xD;&#xA;        class Program {&#xD;&#xA;            private static string awsSecret = &quot;&quot;;&#xD;&#xA;            private static string awsAccess = &quot;&quot;;&#xD;&#xA;            private static string bucket = &quot;&quot;;&#xD;&#xA;            private static string folder = &quot;&quot;;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;            static void Main(string[] args)&#xD;&#xA;            {&#xD;&#xA;                var client = new AmazonS3Client(awsAccess, awsSecret, RegionEndpoint.EUWest1);&#xD;&#xA;    &#xD;&#xA;                ListObjectsRequest request = new ListObjectsRequest();&#xD;&#xA;                request.BucketName = bucket;&#xD;&#xA;                request.Prefix = folder;&#xD;&#xA;                ListObjectsResponse response = client.ListObjects(request);&#xD;&#xA;    &#xD;&#xA;                foreach (S3Object o in response.S3Objects)&#xD;&#xA;                {&#xD;&#xA;                    var newKey = o.Key.ToLowerInvariant();&#xD;&#xA;                    if (newKey == o.Key)&#xD;&#xA;                        continue;&#xD;&#xA;    &#xD;&#xA;                    var copy = new CopyObjectRequest();&#xD;&#xA;                    copy.SourceBucket = bucket;&#xD;&#xA;                    copy.SourceKey = o.Key;&#xD;&#xA;                    copy.DestinationBucket = bucket;&#xD;&#xA;                    copy.DestinationKey = newKey;&#xD;&#xA;                    client.CopyObject(copy);&#xD;&#xA;    &#xD;&#xA;                    //if (o.Key.EndsWith(&quot;/&quot;))&#xD;&#xA;                    //    continue;&#xD;&#xA;    &#xD;&#xA;                    //var delete = new DeleteObjectRequest();&#xD;&#xA;                    //delete.Key = o.Key;&#xD;&#xA;                    //delete.BucketName = bucket;&#xD;&#xA;                    //client.DeleteObject(delete);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;The code is fairly simple. If the keys are the same after you've made your adjustments, just continue, since no need to copy. You need to specify your access secret keys at the top (lazy, I know), as well as the bucket name and any folder name you want (this is treated by amazon as a prefix so you can do nested folders or beginnings of files etc.). I've commented out the delete code because I never used it in the end (the folder case was changed too so I just deleted the entire old folder in the S3 admin panel at the end). However, I tested it and it seemed to work. I had an issue where it tried to delete folder objects and something was being weird so I just made it ignore folders (they end with a slash). But yeah, you may need to test that delete bit a little more extensively.&#xD;&#xA;&#xD;&#xA;Remember to adjust the policy of the user account you are using to allow copies and deletes etc. A total control policy will look something like this:&#xD;&#xA;&#xD;&#xA;    {&#xD;&#xA;        &quot;Version&quot;: &quot;2012-10-17&quot;,&#xD;&#xA;        &quot;Statement&quot;: [&#xD;&#xA;            {&#xD;&#xA;                &quot;Effect&quot;: &quot;Allow&quot;,&#xD;&#xA;                &quot;Action&quot;: &quot;s3:*&quot;,&#xD;&#xA;                &quot;Resource&quot;: &quot;arn:aws:s3:::BucketNameHere/*&quot;&#xD;&#xA;            }&#xD;&#xA;        ]&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Replace &quot;BucketNameHere&quot; with the name of your bucket. And there we go, simples." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-08-27T21:10:51.5946Z" PublishedUtc="2015-08-27T21:10:51.5946Z" ModifiedUtc="2015-08-27T21:10:51.4386Z" />
      <AutoroutePart Alias="bulk-renaming-files-in-amazon-s3" UseCustomPattern="false" />
      <TitlePart Title="Bulk Renaming files in Amazon S3" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Amazon S3" />
    </BlogPost>
    <BlogPost Id="/alias=creating-a-copy-of-a-database" Status="Published">
      <BodyPart Text="If I'm honest, I've always been a little bit of a worry wart, especially when it comes to making big changes to live databases. So I have quite a few test environments where I go and break stuff. Copying a database in SQL is pretty easy, there are just about a thousand ways you can do it and they all seem to be slightly different. This way is for people who want to keep the original database intact and running, not interrupt any backup schedules, basically leave the database we are copying alone. This is just a sort of reference for myself of the easiest way to do it, because I'm forgetful. &#xD;&#xA;&#xD;&#xA;So open SQL Server Management Studio, right click on the database you are want to copy, expand the *Tasks* and select *Back Up...* Keep Backup type as full, and check the *Copy-only Backup* checkbox. Select where you want to store your new .bak file, by default it likes to select an unhelpful location. I generally leave the other Options section as they are, mainly because I don't understand them.&#xD;&#xA;&#xD;&#xA;![Back Up Database Screen][2]&#xD;&#xA;&#xD;&#xA;![File Location][1]&#xD;&#xA;&#xD;&#xA;We should now have our .bak file on the server. If you have a different test environment, ftp it over and then get ready to create your brand new test database, where you can break all the shit.&#xD;&#xA;&#xD;&#xA;In SQL Management Studio, right click on the Databases folder in the Object Explorer and select *Restore Database*. As the source select Device then navigate to wherever your .bak file is. This should populate the Database dropdown with the database you want to copy. In the Destination section type the name of the **new** database you want to create, e.g. MyDatabase_Test. This should populate the Backup sets to restore section. Next go to the Files page (from the navigation pane on the left). You'll want to rename the files where the database is actually stored, so rename the .mdf in the Restore As column to the name of your new database (it'll default to the name of the original database). You should be good to go now, click OK and you will shortly have a new database you can go and fuck up.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: /Media/Arkleseizure/Images/location.PNG&#xD;&#xA;  [2]: /Media/Arkleseizure/Images/backup.PNG" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-08-06T10:18:23.2216Z" PublishedUtc="2015-08-06T10:18:23.2216Z" ModifiedUtc="2015-08-06T10:18:23.1904Z" />
      <AutoroutePart Alias="creating-a-copy-of-a-database" UseCustomPattern="false" />
      <TitlePart Title="Creating a copy of a database" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="SQL,Database" />
    </BlogPost>
    <BlogPost Id="/alias=iis-redirect-path-to-root" Status="Published">
      <BodyPart Text="We have been migrating quite a few sites at work recently so thought I'd just note down a simple iis rule for redirecting a path to the root of your site.&#xD;&#xA;&#xD;&#xA;    &lt;system.webServer&gt;&#xD;&#xA;    &#x9;&lt;rewrite&gt;&#xD;&#xA;    &#x9;&#x9;&lt;rules&gt;&#xD;&#xA;    &#x9;&#x9;&#x9;&lt;rule name=&quot;redirect to root&quot; stopProcessing=&quot;true&quot;&gt;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&lt;match url=&quot;^test[/]?$&quot; /&gt;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&lt;action type=&quot;Redirect&quot; url=&quot;/&quot; /&gt;&#xD;&#xA;    &#x9;&#x9;&#x9;&lt;/rule&gt;&#xD;&#xA;    &#x9;&#x9;&lt;/rules&gt;&#xD;&#xA;    &#x9;&lt;/rewrite&gt;&#xD;&#xA;    &lt;/system.webServer&gt;&#xD;&#xA;&#xD;&#xA;The regex matches /test/ and /test then redirects to the root. Note that when you are playing around with redirects it appears browsers cache them so you need to clear your browsers cache each time you change your redirect rules" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-08-26T16:12:24.129Z" PublishedUtc="2015-08-26T16:12:24.129Z" ModifiedUtc="2015-08-26T16:12:23.8014Z" />
      <AutoroutePart Alias="iis-redirect-path-to-root" UseCustomPattern="false" />
      <TitlePart Title="IIS Redirect Path to Root" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="IIS" />
    </BlogPost>
    <BlogPost Id="/alias=speeding-up-the-content-type-settings-page-in-old-orchard-sites" Status="Published">
      <BodyPart Text="Sadly, I maintain several legacy Orchard sites that are still running on older versions of Orchard. Quite a lot of development went into these sites and we just don't have the time nor resources to move these sites to a newer version of Orchard. One of Orchard's greatest pain points is querying. It is far too easy to fuck it up (though I guess you could pretty much say that about any system to be fair). Looking through some of this old code, a lot of our custom modules, gallery modules and even core modules suffer from queries written like this:&#xD;&#xA;&#xD;&#xA;    _contentManager.Query&lt;MyPart&gt;().List();&#xD;&#xA;&#xD;&#xA;This code works perfectly... until you have some content items. Then it just dies. The fix is simple:&#xD;&#xA;&#xD;&#xA;    _contentManager.Query&lt;MyPart, MyPartRecord&gt;().List();&#xD;&#xA;&#xD;&#xA;And bam, your code will perform like a beast. So what does this have to do with the content type settings you may be thinking. Well, if you are using Taxonomies (the original version, before it was merged into the core) then everything. And if you're not, this probably isn't going to help you much. Sorry.&#xD;&#xA;&#xD;&#xA;So Taxonomies loads all the Taxonomies you have created so you can select them in the fields settings section which, you guessed it, calls that crap query above. So go to *Contrib.Taxonomies.Services.TaxonomyService* and find the *GetTaxonomies* method and change it to:&#xD;&#xA;&#xD;&#xA;    return _contentManager.Query&lt;TaxonomyPart, TaxonomyPartRecord&gt;().List();&#xD;&#xA;&#xD;&#xA;You should now be able to edit your site settings to your hearts delight.&#xD;&#xA;&#xD;&#xA;If you have a lot of performance problems, it's definitely worth checking for these types of queries in Visual Studio by pressing ctrl+shift+F and using this search `Query&lt;.*Part&gt;()`, expanding Find options so you can check the Use Regular Expressions tick box. Also worth only looking at *.cs file types." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-09-17T10:19:00Z" PublishedUtc="2015-09-17T10:57:35.9008Z" ModifiedUtc="2015-09-17T10:57:35.8384Z" />
      <AutoroutePart Alias="speeding-up-the-content-type-settings-page-in-old-orchard-sites" UseCustomPattern="false" />
      <TitlePart Title="Speeding up the content type settings page in old Orchard sites" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Performance" />
    </BlogPost>
    <BlogPost Id="/alias=exporting-enabled-features-in-orchard" Status="Published">
      <BodyPart Text="**Update 16/10/2015:** [Sipke][1] has stolen my thunder and told me that this is already in Orchard's core, in the dev branch, so go check it out there!&#xD;&#xA;&#xD;&#xA;I was surprised to discover no OOTB way to allow you to export enabled features. I'm pretty lazy and anything that makes it easier to recreate a website is a good thing in my book. So I wrote a little bit of code, a year or so ago now, to allow you to export features, hopefully I'll chuck up the code as a module or some such soon.&#xD;&#xA;&#xD;&#xA;Orchard offers some handy extensions to the ImportExport module to make including custom export steps trivial. To register a new custom export step we just need to implement the `ICustomExportStep` event handler:&#xD;&#xA;&#xD;&#xA;    public class FeaturesCustomExportStep : ICustomExportStep&#xD;&#xA;    {&#xD;&#xA;    &#x9;public void Register(IList&lt;string&gt; steps)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;steps.Add(&quot;Features&quot;);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Then we need to make this step actually do something by implementing the `IExportEventHandler`.&#xD;&#xA;&#xD;&#xA;    public class FeaturesExportEventHandler : IExportEventHandler {&#xD;&#xA;    &#x9;private readonly IFeatureManager _featureManager;&#xD;&#xA;    &#x9;private readonly ShellDescriptor _shellDescriptor;&#xD;&#xA;    &#xD;&#xA;    &#x9;public FeaturesExportEventHandler(IFeatureManager featureManager, ShellDescriptor shellDescriptor)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;_featureManager = featureManager;&#xD;&#xA;    &#x9;&#x9;_shellDescriptor = shellDescriptor;&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;public void Exporting(dynamic context) { }&#xD;&#xA;    &#xD;&#xA;    &#x9;public void Exported(dynamic context)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;if (!((IEnumerable&lt;string&gt;)context.ExportOptions.CustomSteps).Contains(&quot;Features&quot;))&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;return;&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;var features = _featureManager.GetAvailableFeatures()&#xD;&#xA;    &#x9;&#x9;&#x9;.Where(f =&gt; !DefaultExtensionTypes.IsTheme(f.Extension.ExtensionType))&#xD;&#xA;    &#x9;&#x9;&#x9;.Where(f =&gt; _shellDescriptor.Features.Any(sf =&gt; sf.Name == f.Id))&#xD;&#xA;    &#x9;&#x9;&#x9;.Select(x =&gt; x.Id);&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;var featureString = string.Join(&quot;,&quot;, features);&#xD;&#xA;    &#x9;&#x9;var featureElement = new XElement(&quot;Feature&quot;);&#xD;&#xA;    &#x9;&#x9;context.Document.Element(&quot;Orchard&quot;).Add(featureElement);&#xD;&#xA;    &#x9;&#x9;featureElement.Add(new XAttribute(&quot;enable&quot;, featureString));&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;This code is pretty simple, it just finds all features that are not themes and are active and selects the id. It then joins these in a comma separated list and adds a new Feature element to export document. The features will be exported towards the end of the xml so you may need to jig your export around if you want to use it, though I've found that is often necessary when importing and exporting in Orchard.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://twitter.com/sfmskywalker" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-10-14T11:22:00Z" PublishedUtc="2015-10-16T09:08:10.5596Z" ModifiedUtc="2015-10-16T09:08:10.4036Z" />
      <AutoroutePart Alias="exporting-enabled-features-in-orchard" UseCustomPattern="false" />
      <TitlePart Title="Exporting enabled features in Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=don-t-forget-to-close-experimental-instances-of-visual-studio-when-developing-extensions" Status="Published">
      <BodyPart Text="Title pretty much says it all. If you are getting strange build errors, just make sure you haven't left a random experimental instance running somewhere. The variety of errors it will throw at you is quite mind boggling." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2015-11-20T02:06:38.7956Z" PublishedUtc="2015-11-20T02:06:38.7956Z" ModifiedUtc="2015-11-20T02:06:38.3588Z" />
      <AutoroutePart Alias="don-t-forget-to-close-experimental-instances-of-visual-studio-when-developing-extensions" UseCustomPattern="false" />
      <TitlePart Title="Don't forget to close Experimental Instances of Visual Studio when developing extensions" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Visual Studio" />
    </BlogPost>
    <BlogPost Id="/alias=adding-a-guid-column-via-migrations-in-orchard" Status="Published">
      <BodyPart Text="Generally when adding a column in Orchard CMS you do this:&#xD;&#xA;&#xD;&#xA;    .Column&lt;string&gt;(&quot;MyString&quot;, column =&gt; column.NotNull())&#xD;&#xA;&#xD;&#xA;However, if you try doing that with a GUID it wont work, you need to explicitly set the database type like this:&#xD;&#xA;&#xD;&#xA;    .Column(&quot;MyGuid&quot;, DbType.Guid, column =&gt; column.NotNull().Unique())&#xD;&#xA;&#xD;&#xA;I'm not sure if there is a reason for this irregularity or if it is just a bug. Maybe I'll look into it one day." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-02-10T14:15:04.2086Z" PublishedUtc="2016-02-10T14:15:04.2086Z" ModifiedUtc="2016-02-10T14:15:03.8654Z" />
      <AutoroutePart Alias="adding-a-guid-column-via-migrations-in-orchard" UseCustomPattern="false" />
      <TitlePart Title="Adding a GUID column via migrations in Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="orchard" />
    </BlogPost>
    <BlogPost Id="/alias=orchardizer-version-0-3-released" Status="Published">
      <BodyPart Text="I'm pleased to announce that after a year of procrastinating I've finally released a new version of [Orchardizer][1] with a couple of new features and more importantly, support for Visual Studio 2015. There may be a few issues because I don't have nearly as much time as I'd like to dedicate to making it all work beautifully (gotta concentrate on the important things in life, you know, like getting my 2.0 K/D in Call of Duty). So, what's new?&#xD;&#xA;&#xD;&#xA;Generate content fields&#xD;&#xA;-----------------------&#xD;&#xA;You can create your own fields now by just entering a few values into some text boxes. Easy! By default it will add your fields to the indexes used by search and projections, which you can easily change in your new fields driver. To use right click on your project -&gt; Add -&gt; New Scaffolded Item... -&gt; Installed -&gt; Common -&gt; Orchard -&gt; Orchard Field, which will bring up the dialog box. &#xD;&#xA;&#xD;&#xA;## Generate layout elements ##&#xD;&#xA;So in 1.9 (?) Orchard introduced the awesome [Layouts][2] feature, built by the wonderful dudes over at [IDeliverable][3]. They've recently introduced parameterized snippets, which are pretty sweet, but if you need more control over your elements you may want to make your own, which requires code. Enter Orchardizer! Generate the boilerplate element stuff so you can get down to the important bit, making your elements look epic. To use right click on your project -&gt; Add -&gt; New Scaffolded Item... -&gt; Installed -&gt; Common -&gt; Orchard -&gt; Orchard Layout Element, which will bring up the dialog box. &#xD;&#xA;&#xD;&#xA;## Constructor Injection ##&#xD;&#xA;You probably recognise this kind of code&#xD;&#xA;&#xD;&#xA;    private readonly IOrchardServices _services;&#xD;&#xA;    &#xD;&#xA;    public MyClass(IOrchardServices services) {&#xD;&#xA;    &#x9;_services = services;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Total pain in the butt to write that stuff out all the time right? No more. If you are in Visual Studio 2015 you can hover over _services and inject it automatically into the constructor; it will even generate the constructor for you if you haven't created one yet! &#xD;&#xA;&#xD;&#xA;To do all this cool stuff I'm using [Roslyn][4], which is the new C# compiler built in... C#! It's really cool. I don't understand any of it but it is fascinating code to gloss over if you're bored. And brings you so much power, hopefully we'll see even more cool features built with Roslyn soon. &#xD;&#xA;&#xD;&#xA;Note: I realise after discussing this with several other developers, a more common usage would be you add the property you want injected into the constructor then it will create a readonly variable etc. So look out for future versions with this way of doing it.&#xD;&#xA;&#xD;&#xA;## Orchard Snippets ##&#xD;&#xA;No one likes boilerplate code. And Orchardizer does some pretty handy stuff to reduce it, but what if you want to edit existing classes and views, not create new ones? Enter snippets. Snippets are nice ways of chucking in code, anywhere really. I've prefixed all my snippets with o for Orchard, for super easy access. And they should all be hiding under an Orchard folder if you open the snippet viewer.&#xD;&#xA;&#xD;&#xA;I've added several snippets so far and will add more soon as I find use cases. An up-to-date list of done and planned snippets can be found on my [Trello board][5]. &#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;So there we have it, new version. All for free! And it's free because it's just not really that great. As always, let me know on [GitHub][6] if anything is totally broken or you want something added. Enjoy!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://visualstudiogallery.msdn.microsoft.com/6408f2a0-ddb0-4fa1-938e-eef0f3ff73a3&#xD;&#xA;  [2]: http://www.ideliverable.com/blog/orchard-layouts&#xD;&#xA;  [3]: http://www.ideliverable.com/&#xD;&#xA;  [4]: https://github.com/dotnet/roslyn&#xD;&#xA;  [5]: https://trello.com/c/NOflICva/57-create-snippets&#xD;&#xA;  [6]: https://github.com/Hazzamanic/orchardizer" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-02-29T15:26:00Z" PublishedUtc="2016-02-29T15:29:06.99Z" ModifiedUtc="2016-02-29T15:29:06.9432Z" />
      <AutoroutePart Alias="orchardizer-version-0-3-released" UseCustomPattern="false" />
      <TitlePart Title="Orchardizer version 0.3 released" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="orchardizer" />
    </BlogPost>
    <BlogPost Id="/alias=utilizing-the-new-assets-pipeline-in-orchard" Status="Published">
      <BodyPart Text="So Orchard has a new pipeline for generating client side assets. It is basically a gulp file that goes to all modules and themes (!), finds a Assets.json config file and does whatever that file says. What can it do? From a quick look at the Gulp.js file, it can process LESS and TypeScript files, and combine and minify js and css files. It can also autoprefix your CSS rules. Yay? It also creates source maps, which, in case you didn't know, are cool because even when your js is minified up you can &quot;map&quot; it back to the source files when debugging! And even IE supports it.&#xD;&#xA;&#xD;&#xA;How do we do all this cool stuff? It is ridiculously easy. Create a file in the root of your module/theme called Assets.json then do something like:&#xD;&#xA;&#xD;&#xA;    [&#xD;&#xA;      {&#xD;&#xA;        &quot;inputs&quot;: [&#xD;&#xA;          &quot;Styles/teachings.less&quot;&#xD;&#xA;        ],&#xD;&#xA;        &quot;output&quot;: &quot;Styles/teachings.css&quot;&#xD;&#xA;      }&#xD;&#xA;    ]&#xD;&#xA;&#xD;&#xA;That's it. It'll infer from the file type what it is supposed to do and do it. This example creates a css file from a less file. Very cool. Take a look at the Assets.json file in Orchard.Resources for a comprehensive example of what you can do.&#xD;&#xA;&#xD;&#xA;The pipeline has a couple of different commands: build, rebuild and watch. Watch is the cool one here, it will watch all the Assets.json files and if any change, it rebuilds that one. Pretty sweet. So don't forget to add new LESS files etc. to your Assets.json or you'll sit there like a top pleb waiting for the gulp watch to generate your css. I totally did not do that.&#xD;&#xA;&#xD;&#xA;You may now be thinking, this is cool and all. But all this sounds like I'll probably need... node.js! You do. You'll then need to run `npm install` in the src folder of Orchard to grab all the node modules it needs. The gulp stuff should all run happily in Visual Studio in the Task Runner Explorer (this comes with 2015 and is available as an extension for earlier versions I do believe). If the task runner doesn't automatically pick up the gulp commands you can either close and reopen the task runner window or just go all out and restart Visual Studio.&#xD;&#xA;&#xD;&#xA;If you are a Sass guy, then unfortunately you wont be able to use the pipeline for it. The nice thing is the pipeline is totally opt in. All files generated by it are also included in the source that you pull down from GitHub, so you don't need to worry about any of this stuff if you don't want to. They have also been nice and added node_modules to the .gitignore file.&#xD;&#xA;&#xD;&#xA;I will be updating [Orchardizer][1] to create Assets.json files when it generates modules and themes soon!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://arkleseizure.net/introducing-orchardizer-a-visual-studio-extension-for-orchard-developers" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-04-01T10:49:00Z" PublishedUtc="2016-04-15T08:28:54.0224Z" ModifiedUtc="2016-04-15T08:28:53.8664Z" />
      <AutoroutePart Alias="utilizing-the-new-assets-pipeline-in-orchard" UseCustomPattern="false" />
      <TitlePart Title="Utilizing the new assets pipeline in Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="orchard" />
    </BlogPost>
    <BlogPost Id="/alias=ctrl-shift-s-causing-red-lines-to-appear-at-right-angles-around-mouse" Status="Published">
      <BodyPart Text="I have had this issue for a while and randomly found the solution today. It is caused by Mouse Without Borders, so close this program and you should be all good. You can save all the documents again!" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-04-05T16:54:15.5542001Z" PublishedUtc="2016-04-05T16:54:15.5542001Z" ModifiedUtc="2016-04-05T16:54:15.5230001Z" />
      <AutoroutePart Alias="ctrl-shift-s-causing-red-lines-to-appear-at-right-angles-around-mouse" UseCustomPattern="false" />
      <TitlePart Title="Ctrl + Shift + S causing red lines to appear at right angles around mouse" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="" />
    </BlogPost>
    <BlogPost Id="/alias=customizing-the-tags-in-the-orchard-list-shape" Status="Published">
      <BodyPart Text="Orchard has shapes. And shapes are awesome. Pretty much anything that renders a list of content in Orchard uses the List shape. This shape basically takes a list of shapes and renders them. It does handy things like paging etc. It also renders items with html list markup, which makes sense, being a list and all. But what if you want to render items using Bootstraps grids? Turns out, this isn't a problem. &#xD;&#xA;&#xD;&#xA;The list shape is rendered from a method in Orchard.Core.Shapes.CoreShapes#695. Methods decorated with the `[Shape]` attribute will be picked up by Orchard's shape harvester. This method lets you override the tag each content item will be rendered in. So let's say `Model.ContentItems` in our list shape that has been created by our controller or driver and we want to override this in our theme.&#xD;&#xA;&#xD;&#xA;    @{&#xD;&#xA;    &#x9;Model.ContentItems.Tag = &quot;div&quot;;&#xD;&#xA;        Model.ContentItems.Classes.Add(&quot;row&quot;);&#xD;&#xA;        Model.ContentItems.ItemTag = &quot;div&quot;;&#xD;&#xA;        Model.ContentItems.ItemClasses.Add(&quot;col-md-4&quot;);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    @Display(Model.ContentItems)&#xD;&#xA;&#xD;&#xA;And now we should have a pretty list of items rendered in Bootstrap columns." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-04-15T12:04:00Z" PublishedUtc="2016-04-15T15:21:23.2352Z" ModifiedUtc="2016-04-15T15:21:23.1884Z" />
      <AutoroutePart Alias="customizing-the-tags-in-the-orchard-list-shape" UseCustomPattern="false" />
      <TitlePart Title="Customizing the tags in the Orchard list shape" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=orchardizer-version-0-3-2-released" Status="Published">
      <BodyPart Text="A small update to announce that you can now create 1.10 modules and themes from Orchardizer.&#xD;&#xA;&#xD;&#xA;Get the latest version [here][1]!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://visualstudiogallery.msdn.microsoft.com/6408f2a0-ddb0-4fa1-938e-eef0f3ff73a3" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-05-25T14:28:00Z" PublishedUtc="2016-05-25T14:29:34.5032Z" ModifiedUtc="2016-05-25T14:29:34.4408Z" />
      <AutoroutePart Alias="orchardizer-version-0-3-2-released" UseCustomPattern="false" />
      <TitlePart Title="Orchardizer version 0.3.2 released" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="orchardizer" />
    </BlogPost>
    <BlogPost Id="/alias=using-the-c-scripting-workflow-activity-in-orchard-1-10-and-below" Status="Published">
      <BodyPart Text="This workflow activity is pretty awesome. You can write C# then set a number of different outcomes based on your own custom logic. Pretty sweet. However, Orchard tokenizes your input prior to execution and since tokens are defined using `{mytoken}`, your C# code will probably get messed up. The solution is to let Orchard's token engine know you need curly braces left alone by adding `// #{}`. This tells Orchard that tokens should be in the format `#{mytoken}`." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-06-30T09:14:35.4330002Z" PublishedUtc="2016-06-30T09:14:35.4330002Z" ModifiedUtc="2016-06-30T09:14:34.9806002Z" />
      <AutoroutePart Alias="using-the-c-scripting-workflow-activity-in-orchard-1-10-and-below" UseCustomPattern="false" />
      <TitlePart Title="Using the C# scripting workflow activity in Orchard 1.10 and below" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=modifying-orchard-s-host-config-file-on-publish" Status="Published">
      <BodyPart Text="We have been gradually moving things to Azure over the last year, including some of Orchard installations. Orchard plays nice with Azure and setting up Azure services like blob storage to complement your Azure deployment are surprisingly simple. You can use blob settings to store media, but also to store your app_data configuration. To store Orchard's app_data in blob storage you need to make some changes to the Host.config file, however since the solution I work from is also used to deploy to sites that use s3 and just the file system to store app_data, I thought I could make a little transform to handle this. &#xD;&#xA;&#xD;&#xA;Now, I deploy by publishing straight from visual studio so I will be modifying the Orchard.Web project file, but if you use the command line to build your deployment package then you will need to edit the Orchard.proj file. Just add the following ItemGroup element in the Project element, I have mine near the web.config transforms (where I copied all this from!)&#xD;&#xA;&#xD;&#xA;    &lt;ItemGroup&gt;&#xD;&#xA;    &#x9;&lt;WebConfigsToTransform Include=&quot;Config\Host.config&quot;&gt;&#xD;&#xA;    &#x9;  &lt;DestinationRelativePath&gt;Config\Host.config&lt;/DestinationRelativePath&gt;&#xD;&#xA;    &#x9;  &lt;Exclude&gt;False&lt;/Exclude&gt;&#xD;&#xA;    &#x9;  &lt;TransformFileFolder&gt;$(TransformWebConfigIntermediateLocation)\original&lt;/TransformFileFolder&gt;&#xD;&#xA;    &#x9;  &lt;TransformFile&gt;Config\Host.$(DeploymentTarget).config&lt;/TransformFile&gt;&#xD;&#xA;    &#x9;  &lt;TransformOriginalFolder&gt;$(TransformWebConfigIntermediateLocation)\original&lt;/TransformOriginalFolder&gt;&#xD;&#xA;    &#x9;  &lt;TransformOriginalFile&gt;$(TransformWebConfigIntermediateLocation)\original\%(DestinationRelativePath)&lt;/TransformOriginalFile&gt;&#xD;&#xA;    &#x9;  &lt;TransformOutputFile&gt;$(TransformWebConfigIntermediateLocation)\transformed\%(DestinationRelativePath)&lt;/TransformOutputFile&gt;&#xD;&#xA;    &#x9;  &lt;TransformScope&gt;$(_PackageTempDir)\%(DestinationRelativePath)&lt;/TransformScope&gt;&#xD;&#xA;    &#x9;  &lt;SubType&gt;Designer&lt;/SubType&gt;&#xD;&#xA;    &#x9;&lt;/WebConfigsToTransform&gt;&#xD;&#xA;    &#x9;&lt;None Include=&quot;Config\Host.Basic.config&quot;&gt;&#xD;&#xA;    &#x9;  &lt;DependentUpon&gt;Host.config&lt;/DependentUpon&gt;&#xD;&#xA;    &#x9;&lt;/None&gt;&#xD;&#xA;    &#x9;&lt;None Include=&quot;Config\Host.s3.config&quot;&gt;&#xD;&#xA;    &#x9;  &lt;DependentUpon&gt;Host.config&lt;/DependentUpon&gt;&#xD;&#xA;    &#x9;&lt;/None&gt;&#xD;&#xA;    &#x9;&lt;None Include=&quot;Config\Host.Azure.config&quot;&gt;&#xD;&#xA;    &#x9;  &lt;DependentUpon&gt;Host.config&lt;/DependentUpon&gt;&#xD;&#xA;    &#x9;&lt;/None&gt;&#xD;&#xA;    &lt;/ItemGroup&gt;&#xD;&#xA;&#xD;&#xA;Easy. It displays in the nice way with the transformer files underneath the basic one within Visual Studio. Sexy. Create your Host.Azure.config file in the Config file with this transform to change the Host.config file on publish.&#xD;&#xA;&#xD;&#xA;    &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&#xD;&#xA;    &lt;configuration xmlns:xdt=&quot;http://schemas.microsoft.com/XML-Document-Transform&quot;&gt;&#xD;&#xA;      &lt;autofac defaultAssembly=&quot;Orchard.Framework&quot;&gt;&#xD;&#xA;        &lt;components&gt;&#xD;&#xA;          &lt;!-- Configure Orchard to store shell settings in Microsoft Azure Blob Storage. --&gt;&#xD;&#xA;          &lt;component xdt:Transform=&quot;Insert&quot; instance-scope=&quot;single-instance&quot; type=&quot;Orchard.FileSystems.Media.ConfigurationMimeTypeProvider, Orchard.Framework&quot; service=&quot;Orchard.FileSystems.Media.IMimeTypeProvider&quot;&gt;&lt;/component&gt;&#xD;&#xA;          &lt;component xdt:Transform=&quot;Insert&quot; instance-scope=&quot;single-instance&quot; type=&quot;Orchard.Azure.Services.Environment.Configuration.AzureBlobShellSettingsManager, Orchard.Azure&quot; service=&quot;Orchard.Environment.Configuration.IShellSettingsManager&quot;&gt;&lt;/component&gt;&#xD;&#xA;        &lt;/components&gt;&#xD;&#xA;      &lt;/autofac&gt;&#xD;&#xA;    &#xD;&#xA;    &lt;/configuration&gt;&#xD;&#xA;&#xD;&#xA;Or you could just exclude the Host.config from your deployments. But is that as fun?!&#xD;&#xA;&#xD;&#xA;As a quick note as to why we store settings in blob storage at all when Azure web apps share the same file system across instances, you cant use deployment slots. Deployment slots allow you upload code to the staging deployment slot, move it to live instantly when changes are verified as good to go. The problem here is that it is a file system swap, so you cant have any application data (media, settings etc.) on the azure file system. I'm currently only running one site (that is only in beta right now) that uses blob storage for setting, but seems to be running okay. Touch wood..." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-09-01T11:08:00Z" PublishedUtc="2016-09-01T11:08:39.9500005Z" ModifiedUtc="2016-09-01T11:08:39.9032005Z" />
      <AutoroutePart Alias="modifying-orchard-s-host-config-file-on-publish" UseCustomPattern="false" />
      <TitlePart Title="Modifying Orchard's Host.config file on Publish" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=installing-a-wildcard-renewal-certificate-from-123-reg-into-iis" Status="Published">
      <BodyPart Text="&gt; This is just for people who are renewing an existing certificate&#xD;&#xA;&#xD;&#xA;When your certificate is ready to be renewed, 123-reg will email you to say your certificate is ready. You can then go to your dashboard and download your certificate. What this presents you with is a page with a text area where you can copy and paste the certificate text into a file. Save this file on your server somewhere you will remember with the extension .crt. &#xD;&#xA;&#xD;&#xA;On your server open IIS, and then in the section IIS open 'Server Certificates'. In the Actions pane on the right click 'Complete Certificate Request...'. This will open a window allowing you to select the file you saved earlier (you may have to select the all files options since it will by default be looking for .cer files). Fill in the Friendly Name field with your wildcard domain e.g. *.arkleseizure.net. This is important. If you have a non-wildcard domain then you can call it whatever. Click okay and it should all now be installed." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-09-15T11:11:06.5484002Z" PublishedUtc="2016-09-15T11:11:06.5484002Z" ModifiedUtc="2016-09-15T11:11:06.1584002Z" />
      <AutoroutePart Alias="installing-a-wildcard-renewal-certificate-from-123-reg-into-iis" UseCustomPattern="false" />
      <TitlePart Title="Installing a wildcard renewal certificate from 123-reg into IIS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="iis,ssl" />
    </BlogPost>
    <BlogPost Id="/alias=upgrading-to-windows-10-anniversary-edition-disables-iis" Status="Published">
      <BodyPart Text="My PC at work randomly over the weekend decided it needed to update to Windows 10 Anniversary Edition. Normally I'd just huff and puff a little about how I have to reload all the shit I like to clutter my screens with. Not this time though. The upgrade to the Anniversary Edition of Windows 10 decided to give me a giant finger and disable IIS. Enabling IIS is always a pain as you always need to manually check a bunch of random checkboxes in the &quot;Turn Windows Features on or off&quot; screen that are not automatically enabled when enabling IIS (I missed *Internet Information Services &gt; World Wide Web Services &gt; Application Development Features &gt; ASP.NET 4.6*, which is particularly annoying because you get no error message, just a blank page). So once you have enabled everything and you launch IIS, you'll find all your websites etc. have gone. Great. I couldn't get them back so I've spent the morning trying to remember all the different dev sites I had set up. Not fun. &#xD;&#xA;&#xD;&#xA;I browsed Reddit and there are people complaining about this (some people also seem to have had MVC and .NET versions uninstalled too, though luckily that didn't happen to me) so if you haven't got the Anniversary Edition (I would say don't bother but Microsoft will force it on you whether you like it or not), back up your shit! All the IIS config stuff is stored in the *%WinDir%\System32\inetsrv\config* folder." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-09-22T12:10:24.0262001Z" PublishedUtc="2016-09-22T12:10:24.0262001Z" ModifiedUtc="2016-09-22T12:10:23.6518001Z" />
      <AutoroutePart Alias="upgrading-to-windows-10-anniversary-edition-disables-iis" UseCustomPattern="false" />
      <TitlePart Title="Upgrading to Windows 10 Anniversary Edition disables IIS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="windows 10" />
    </BlogPost>
    <BlogPost Id="/alias=media-profile-tokens-for-orchard-cms" Status="Published">
      <BodyPart Text="Orchard has an awesome (although seemingly undocumented) feature called Media Profiles that allow you to dynamically modify media items at runtime (e.g. resize images). I have found it to be a really elegant solution. However, it seems the author forgot to tie it in with Orchard's equally awesome Token feature and provide media profile tokens. Let's fix that.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    public class MediaProcessingTokens : Component, ITokenProvider {&#xD;&#xA;    &#x9;private readonly IImageProfileManager _imageProfileManager;&#xD;&#xA;    &#x9;private static string Token = &quot;MediaProfile:&quot;;&#xD;&#xA;    &#x9;private static int Length = 13;&#xD;&#xA;    &#xD;&#xA;    &#x9;public MediaProcessingTokens(IImageProfileManager imageProfileManager) {&#xD;&#xA;    &#x9;&#x9;_imageProfileManager = imageProfileManager;&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;public void Describe(DescribeContext context) {&#xD;&#xA;    &#x9;&#x9;context.For(&quot;Url&quot;, T(&quot;Url&quot;), T(&quot;Tokens for Urls&quot;))&#xD;&#xA;    &#x9;&#x9;&#x9;.Token(&quot;MediaProfile:*&quot;, T(&quot;MediaProfile:&lt;profile name&gt;&quot;), T(&quot;Processes a url using the given profile&quot;), &quot;Url&quot;);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;public void Evaluate(EvaluateContext context) {&#xD;&#xA;    &#x9;&#x9;context.For&lt;string&gt;(&quot;Url&quot;)&#xD;&#xA;    &#x9;&#x9;&#x9;   .Token(&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;token =&gt; {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (!token.StartsWith(Token, StringComparison.OrdinalIgnoreCase))&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return null;&#xD;&#xA;    &#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;token = token.Substring(Length);&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return token;&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;},&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;Process&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;)&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;.Chain(ChainToken, &quot;Url&quot;, Process);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;private static Tuple&lt;string, string&gt; ChainToken(string token) {&#xD;&#xA;    &#x9;&#x9;var dot = token.IndexOf('.');&#xD;&#xA;    &#x9;&#x9;return token.StartsWith(Token, StringComparison.OrdinalIgnoreCase) &amp;&amp; dot &gt; Length&#xD;&#xA;    &#x9;&#x9;&#x9;? new Tuple&lt;string, string&gt;(token.Substring(Length, dot - Length), token.Substring(dot + 1))&#xD;&#xA;    &#x9;&#x9;&#x9;: null;&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#xD;&#xA;    &#x9;private string Process(string profileName, string url) {&#xD;&#xA;    &#x9;&#x9;ContentItem item = null;&#xD;&#xA;    &#x9;&#x9;return _imageProfileManager.GetImageProfileUrl(url, profileName, null, item);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;So we have one token here, MediaProfile:*, where * is the name of your media profile (as created in the admin), providing both the token and a chained Url token. This was especially important for us. Tokens in Orchard relies on the implementer of a provider to allow for tokens containing arguments to be chained. I believe this to be an oversight really, hopefully Orchard 2.0 will provide a more robust way of dealing with token parameters." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-08-03T16:33:00Z" PublishedUtc="2016-09-29T16:33:55.1156Z" ModifiedUtc="2016-09-29T16:33:55.0688Z" />
      <AutoroutePart Alias="media-profile-tokens-for-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Media Profile Tokens for Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=buy-an-ssl-certificate-from-123-reg-and-install-it-on-azure-app-service" Status="Published">
      <BodyPart Text="I've done this a few times sporadically over the last few years and every time I have to do it again I forget exactly what to do. So this is a reminder for future me. Although this is in regards to 123-reg and Azure, it's pretty similar on most platforms.&#xD;&#xA;&#xD;&#xA;So first thing you need is to order your certificate. I used 123-reg, which was pretty painless for the checkout phase. Once you've ordered your SSL certificate you can generate a CSR (a certificate signing request) and assign your certificate to a URL. When you generate a CSR ([online form here][1]), you need to put the url in (if using a wildcard then use *.myurl.com), company info and a password. It will download a zip containing your key file, the csr (in a .pem file) and password file. Keep these safe! Open the .pem file in notepad and copy the contents, then paste this into the csr field when you are issuing your SSL in the 123-reg admin. You can now download your certificate from 123-reg (although &quot;download&quot; to 123-reg is apparently a text field with your certificates content, so download this and save it in as certificate.cer file). &#xD;&#xA;&#xD;&#xA;Azure requires a .pfx file and to get that we will need OpenSSL. You can install it from the binaries [found here][2]. Once you've installed OpenSSL, open a command prompt where all your files are and run the following command:&#xD;&#xA;&#xD;&#xA;    openssl pkcs12 -export -out certificate.pfx -inkey private-key.key -in certificate.cer&#xD;&#xA;&#xD;&#xA;You will need to type in the password you used when generating the CSR and then ask you to create a new password. You should now have a .pfx file with a password that you can upload to Azure.&#xD;&#xA;&#xD;&#xA;Head to your Azure dashboard and open the app service and find SSL certificates in the menu. Click Upload Certificate and select your .pfx file and enter your password. All done!&#xD;&#xA;&#xD;&#xA;  [1]: https://www.123-reg.co.uk/secure/cpanel/ssl/generate-csr&#xD;&#xA;  [2]: https://slproweb.com/products/Win32OpenSSL.html" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2016-10-18T14:17:10.3044Z" PublishedUtc="2016-10-18T14:17:10.3044Z" ModifiedUtc="2016-10-18T14:17:09.9456Z" />
      <AutoroutePart Alias="buy-an-ssl-certificate-from-123-reg-and-install-it-on-azure-app-service" UseCustomPattern="false" />
      <TitlePart Title="Buy an SSL certificate from 123-reg and install it on Azure App Service" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Azure,SSL" />
    </BlogPost>
    <BlogPost Id="/alias=next-previous-blog-post-buttons-in-orchard" Status="Published">
      <BodyPart Text="So I'm currently building a little blog, nothing too fancy, but I wanted next and previous buttons, which don't come out of the box. First thing I did, like the good little developer that I am, was google it. I forgot to put &quot;OrchardCMS&quot; in the first time so just got a bunch of posts on Wordpress forums complaining that they couldn't add said buttons. Not particularly helpful. So I amended my query and what did I find? A module that called [Mod.NextPreviousItem][1], that I wrote back in 2013! Random. Anyway, so this module is old and more complicated than I needed for my simple next/previous blog post. So I stole a few lines of code and tada, next/previous buttons.&#xD;&#xA;&#xD;&#xA;I added a new driver for the blog post part to return my fancy new links.&#xD;&#xA;&#xD;&#xA;    using System.Linq;&#xD;&#xA;    using Orchard.Blogs.Models;&#xD;&#xA;    using Orchard.ContentManagement;&#xD;&#xA;    using Orchard.ContentManagement.Drivers;&#xD;&#xA;    using Orchard.Core.Common.Models;&#xD;&#xA;    &#xD;&#xA;    namespace Travail.Drivers {&#xD;&#xA;        public class BlogPostPartDriver : ContentPartDriver&lt;BlogPostPart&gt; {&#xD;&#xA;            private readonly IContentManager _contentManager;&#xD;&#xA;    &#xD;&#xA;            public BlogPostPartDriver(IContentManager contentManager) {&#xD;&#xA;                _contentManager = contentManager;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            protected override DriverResult Display(BlogPostPart part, string displayType, dynamic shapeHelper) {&#xD;&#xA;                return ContentShape(&quot;Parts_NextPreviousBlogPost&quot;, () =&gt; {&#xD;&#xA;                    var createdDate = part.As&lt;CommonPart&gt;().CreatedUtc;&#xD;&#xA;    &#xD;&#xA;                    var next = _contentManager.Query(VersionOptions.Published, &quot;BlogPost&quot;)&#xD;&#xA;                        .Join&lt;CommonPartRecord&gt;()&#xD;&#xA;                        .Where(cr =&gt; cr.Container.Id == part.BlogPart.Id)&#xD;&#xA;                        .Where(common =&gt; common.CreatedUtc &gt; createdDate)&#xD;&#xA;                        .OrderBy(cr =&gt; cr.CreatedUtc)&#xD;&#xA;                        .Slice(0, 1).FirstOrDefault();&#xD;&#xA;    &#xD;&#xA;                    var previous = _contentManager.Query(VersionOptions.Published, &quot;BlogPost&quot;)&#xD;&#xA;                        .Join&lt;CommonPartRecord&gt;()&#xD;&#xA;                        .Where(cr =&gt; cr.Container.Id == part.BlogPart.Id)&#xD;&#xA;                        .Where(common =&gt; common.CreatedUtc &lt; createdDate)&#xD;&#xA;                        .OrderByDescending(cr =&gt; cr.CreatedUtc)&#xD;&#xA;                        .Slice(0, 1).FirstOrDefault();&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;                    return shapeHelper.Parts_NextPreviousBlogPost(Next: next, Previous: previous);&#xD;&#xA;                });&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;I added this to my theme (naughty, I know) but you could add it to a module for better reusability. Next we just need a simple view called *Parts.NextPreviousBlogPost.cshtml* that you can pop into your Views folder.&#xD;&#xA;&#xD;&#xA;    @using Orchard.ContentManagement;&#xD;&#xA;    &#xD;&#xA;    @{&#xD;&#xA;        ContentItem next = Model.Next;&#xD;&#xA;        ContentItem previous = Model.Previous;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &lt;div class=&quot;clearfix&quot;&gt;&#xD;&#xA;        @if (next != null) {&#xD;&#xA;            @Html.ItemDisplayLink(&quot;Up next: &quot; + Html.ItemDisplayText(next), next, new { @class= &quot;next-post&quot;})&#xD;&#xA;        }&#xD;&#xA;        @if (previous != null) {&#xD;&#xA;            @Html.ItemDisplayLink(&quot;Previously: &quot; + Html.ItemDisplayText(previous), previous, new { @class = &quot;previous-post&quot; })&#xD;&#xA;        }&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;    &lt;hr /&gt;&#xD;&#xA;&#xD;&#xA;And if you need it, a bit of css to make it look pwetty.&#xD;&#xA;&#xD;&#xA;    .next-post {&#xD;&#xA;        float: right;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    .previous-post {&#xD;&#xA;        float: left;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;When I wrote &quot;and a bit of css to make it look pwetty&quot;, I didn't realise I had literally written two lines. Not very pretty at all. A bit pathetic really.&#xD;&#xA;&#xD;&#xA;Anyway, hope this helps!&#xD;&#xA;&#xD;&#xA;  [1]: https://modnextprevious.codeplex.com/" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-01-26T16:22:00Z" PublishedUtc="2017-01-26T16:25:45.5592Z" ModifiedUtc="2017-01-26T16:25:45.4812Z" />
      <AutoroutePart Alias="next-previous-blog-post-buttons-in-orchard" UseCustomPattern="false" />
      <TitlePart Title="Next/Previous Blog Post Buttons in Orchard" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=using-morelikethis-in-lucene-to-displayed-related-content-in-orchard-cms" Status="Published">
      <BodyPart Text="Lucene has an awesome class for finding related content called MoreLikeThis. It is what powers the Related section on Stack Overflow, and many more sites I'm sure. Aaron Johnson has an excellent overview of how it works on his [blog][1]. It is a bit wordy but well worth a read. Lucene.NET is a port of Lucene for .NET and (generally) examples written for Lucene (java) work just fine when converted to .NET. &#xD;&#xA;&#xD;&#xA;So here's the code to find related content. You'll need to grab the [Lucene.Contrib][2] package from nuget too. &#xD;&#xA;&#xD;&#xA;    using System;&#xD;&#xA;    using System.Collections.Generic;&#xD;&#xA;    using System.IO;&#xD;&#xA;    using System.Linq;&#xD;&#xA;    using Lucene.Models;&#xD;&#xA;    using Lucene.Net.Index;&#xD;&#xA;    using Lucene.Net.Search;&#xD;&#xA;    using Lucene.Net.Search.Similar;&#xD;&#xA;    using Lucene.Net.Store;&#xD;&#xA;    using Orchard;&#xD;&#xA;    using Orchard.Environment.Configuration;&#xD;&#xA;    using Orchard.FileSystems.AppData;&#xD;&#xA;    using Orchard.Indexing;&#xD;&#xA;    using Directory = Lucene.Net.Store.Directory;&#xD;&#xA;    using Lucene.Net.Analysis;&#xD;&#xA;    using Lucene.Services;&#xD;&#xA;    using System.Globalization;&#xD;&#xA;    &#xD;&#xA;    namespace NamespacesFtw {&#xD;&#xA;        public interface IRelatedService : IDependency {&#xD;&#xA;            IEnumerable&lt;ISearchHit&gt; GetRelatedItems(int id);&#xD;&#xA;            IEnumerable&lt;ISearchHit&gt; GetRelatedItems(int id, RelatedContentContext context);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public class RelatedService : IRelatedService {&#xD;&#xA;            private readonly IAppDataFolder _appDataFolder;&#xD;&#xA;            private readonly string _basePath;&#xD;&#xA;            private readonly IIndexManager _indexManager;&#xD;&#xA;            private readonly ILuceneAnalyzerProvider _analyzerProvider;&#xD;&#xA;    &#xD;&#xA;            public RelatedService(IAppDataFolder appDataFolder, ShellSettings shellSettings, IIndexManager indexManager, ILuceneAnalyzerProvider analyzerProvider) {&#xD;&#xA;                _appDataFolder = appDataFolder;&#xD;&#xA;                _indexManager = indexManager;&#xD;&#xA;                _analyzerProvider = analyzerProvider;&#xD;&#xA;                _basePath = _appDataFolder.Combine(&quot;Sites&quot;, shellSettings.Name, &quot;Indexes&quot;);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            private ISearchBuilder Search(string index) {&#xD;&#xA;                return _indexManager.HasIndexProvider()&#xD;&#xA;                    ? _indexManager.GetSearchIndexProvider().CreateSearchBuilder(index)&#xD;&#xA;                    : new NullSearchBuilder();&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IEnumerable&lt;ISearchHit&gt; GetRelatedItems(int id, RelatedContentContext context) {&#xD;&#xA;                IndexReader reader = IndexReader.Open(GetDirectory(context.Index), true);&#xD;&#xA;                var indexSearcher = new IndexSearcher(reader);&#xD;&#xA;                var analyzer = _analyzerProvider.GetAnalyzer(context.Index);&#xD;&#xA;    &#xD;&#xA;                var mlt = new MoreLikeThis(reader) {Boost = true, MinTermFreq = 1, Analyzer = analyzer, MinDocFreq = 1};&#xD;&#xA;                if (context.FieldNames.Length &gt; 0) {&#xD;&#xA;                    mlt.SetFieldNames(context.FieldNames);&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                var docid = GetDocumentId(id, indexSearcher);&#xD;&#xA;                Filter filter;&#xD;&#xA;    &#xD;&#xA;                BooleanQuery query = (BooleanQuery) mlt.Like(docid);&#xD;&#xA;    &#xD;&#xA;                if (!String.IsNullOrWhiteSpace(context.ContentType)) {&#xD;&#xA;                    var contentTypeQuery = new TermQuery(new Term(&quot;type&quot;, context.ContentType));&#xD;&#xA;                    query.Add(new BooleanClause(contentTypeQuery, Occur.MUST));&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                // exclude same doc&#xD;&#xA;                var exclude = new TermQuery(new Term(&quot;id&quot;, id.ToString()));&#xD;&#xA;                query.Add(new BooleanClause(exclude, Occur.MUST_NOT));&#xD;&#xA;    &#xD;&#xA;                TopDocs simDocs = indexSearcher.Search(query, context.Count);&#xD;&#xA;                var results = simDocs.ScoreDocs&#xD;&#xA;                    .Select(scoreDoc =&gt; new LuceneSearchHit(indexSearcher.Doc(scoreDoc.Doc), scoreDoc.Score));&#xD;&#xA;    &#xD;&#xA;                return results;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            protected virtual Directory GetDirectory(string indexName) {&#xD;&#xA;                var directoryInfo = new DirectoryInfo(_appDataFolder.MapPath(_appDataFolder.Combine(_basePath, indexName)));&#xD;&#xA;                return FSDirectory.Open(directoryInfo);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public int GetDocumentId(int contentItemId, IndexSearcher searcher) {&#xD;&#xA;                var query = new TermQuery(new Term(&quot;id&quot;, contentItemId.ToString(CultureInfo.InvariantCulture)));&#xD;&#xA;                var hits = searcher.Search(query, 1);&#xD;&#xA;                return hits.ScoreDocs.Length &gt; 0 ? hits.ScoreDocs[0].Doc : 0;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IEnumerable&lt;ISearchHit&gt; GetRelatedItems(int id) {&#xD;&#xA;                return GetRelatedItems(id, new RelatedContentContext());&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;I've included all the usings because I like to copy + paste from other blogs, not mess with usings! Oh and here is some lame class I created for handling the configuration stuffs...&#xD;&#xA;&#xD;&#xA;    public class RelatedContentContext {&#xD;&#xA;        public string[] FieldNames { get; set; } = new string[] { &quot;title&quot;, &quot;body&quot;, &quot;tags&quot; };&#xD;&#xA;        public string ContentType { get; set; }&#xD;&#xA;        public int Count { get; set; } = 5;&#xD;&#xA;        public string Index { get; set; } = &quot;search&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;No usings for you here.&#xD;&#xA;&#xD;&#xA;Naturally, I ran into a few issues. It appears that by default Lucene.NET does not use all fields if no fields are specified, but it actually just uses the &quot;contents&quot; field. Which I didn't have. It also requires the MinTermFreq and MinDocFreq to be set explicitly even though they have defaults. Another issue is that MoreLikeThis needs Term Vectors. Well, it can build them on the fly, but then it requires the fields to be stored in the index. Unfortunately, Orchard neither stores (it does have the option in the api to set a indexed field to be stored but very few actually are set) or builds the term vectors. To get around this I have overridden the default Lucene implementation with my own that simply adds the term vectors in. &#xD;&#xA;&#xD;&#xA;    using System;&#xD;&#xA;    using System.Collections.Generic;&#xD;&#xA;    using System.Linq;&#xD;&#xA;    using System.Web;&#xD;&#xA;    using Lucene.Net.Documents;&#xD;&#xA;    using Lucene.Net.Index;&#xD;&#xA;    using Lucene.Services;&#xD;&#xA;    using Orchard;&#xD;&#xA;    using Orchard.Environment.Configuration;&#xD;&#xA;    using Orchard.Environment.Extensions;&#xD;&#xA;    using Orchard.FileSystems.AppData;&#xD;&#xA;    using Orchard.Indexing;&#xD;&#xA;    using Orchard.Logging;&#xD;&#xA;    &#xD;&#xA;    namespace NamespacesFtw {&#xD;&#xA;        [OrchardSuppressDependency(&quot;Lucene.Services.LuceneIndexProvider&quot;)]&#xD;&#xA;        public class LuceneIndexProvider : Lucene.Services.LuceneIndexProvider, IIndexProvider {&#xD;&#xA;            private readonly ILuceneAnalyzerProvider _analyzerProvider;&#xD;&#xA;            public LuceneIndexProvider(IAppDataFolder appDataFolder, ShellSettings shellSettings, ILuceneAnalyzerProvider analyzerProvider) &#xD;&#xA;                : base(appDataFolder, shellSettings, analyzerProvider) {&#xD;&#xA;                _analyzerProvider = analyzerProvider;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public new void Store(string indexName, IDocumentIndex indexDocument) {&#xD;&#xA;                Store(indexName, new[] { (LuceneDocumentIndexTermVector)indexDocument });&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public new void Store(string indexName, IEnumerable&lt;IDocumentIndex&gt; indexDocuments) {&#xD;&#xA;                Store(indexName, indexDocuments.Cast&lt;LuceneDocumentIndexTermVector&gt;());&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public void Store(string indexName, IEnumerable&lt;LuceneDocumentIndexTermVector&gt; indexDocuments) {&#xD;&#xA;                indexDocuments = indexDocuments.ToArray();&#xD;&#xA;    &#xD;&#xA;                if (!indexDocuments.Any()) {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                // Remove any previous document for these content items&#xD;&#xA;                Delete(indexName, indexDocuments.Select(i =&gt; i.ContentItemId));&#xD;&#xA;    &#xD;&#xA;                using (var writer = new IndexWriter(GetDirectory(indexName), _analyzerProvider.GetAnalyzer(indexName), false, IndexWriter.MaxFieldLength.UNLIMITED)) {&#xD;&#xA;                    foreach (var indexDocument in indexDocuments) {&#xD;&#xA;                        var doc = CreateDocument(indexDocument);&#xD;&#xA;    &#xD;&#xA;                        writer.AddDocument(doc);&#xD;&#xA;                        Logger.Debug(&quot;Document [{0}] indexed&quot;, indexDocument.ContentItemId);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public new IDocumentIndex New(int documentId) {&#xD;&#xA;                return new LuceneDocumentIndexTermVector(documentId, T);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            private static Document CreateDocument(LuceneDocumentIndexTermVector indexDocument) {&#xD;&#xA;                var doc = new Document();&#xD;&#xA;    &#xD;&#xA;                indexDocument.PrepareForIndexing();&#xD;&#xA;                foreach (var field in indexDocument.Fields) {&#xD;&#xA;                    doc.Add(field);&#xD;&#xA;                }&#xD;&#xA;                return doc;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        [OrchardSuppressDependency(&quot;Lucene.Models.LuceneDocumentIndex&quot;)]&#xD;&#xA;        public class LuceneDocumentIndexTermVector : IDocumentIndex {&#xD;&#xA;    &#xD;&#xA;            public List&lt;AbstractField&gt; Fields { get; private set; }&#xD;&#xA;    &#xD;&#xA;            private string _name;&#xD;&#xA;            private string  _stringValue;&#xD;&#xA;            private int _intValue;&#xD;&#xA;            private double _doubleValue;&#xD;&#xA;            private bool _analyze;&#xD;&#xA;            private bool _store;&#xD;&#xA;            private bool _removeTags;&#xD;&#xA;            private TypeCode _typeCode;&#xD;&#xA;    &#xD;&#xA;            public int ContentItemId { get; private set; }&#xD;&#xA;    &#xD;&#xA;            public LuceneDocumentIndexTermVector(int documentId, Localizer t) {&#xD;&#xA;                Fields = new List&lt;AbstractField&gt;();&#xD;&#xA;                SetContentItemId(documentId);&#xD;&#xA;                IsDirty = false;&#xD;&#xA;                &#xD;&#xA;                _typeCode = TypeCode.Empty;&#xD;&#xA;                T = t;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public Localizer T { get; set; }&#xD;&#xA;    &#xD;&#xA;            public bool IsDirty { get; private set; }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Add(string name, string value) {&#xD;&#xA;                PrepareForIndexing();&#xD;&#xA;                _name = name;&#xD;&#xA;                _stringValue = value;&#xD;&#xA;                _typeCode = TypeCode.String;&#xD;&#xA;                IsDirty = true;&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Add(string name, DateTime value) {&#xD;&#xA;                return Add(name, DateTools.DateToString(value, DateTools.Resolution.MILLISECOND));&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Add(string name, int value) {&#xD;&#xA;                PrepareForIndexing();&#xD;&#xA;                _name = name;&#xD;&#xA;                _intValue = value;&#xD;&#xA;                _typeCode = TypeCode.Int32;&#xD;&#xA;                IsDirty = true;&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Add(string name, bool value) {&#xD;&#xA;                return Add(name, value ? 1 : 0);&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Add(string name, double value) {&#xD;&#xA;                PrepareForIndexing();&#xD;&#xA;                _name = name;&#xD;&#xA;                _doubleValue = value;&#xD;&#xA;                _typeCode = TypeCode.Single;&#xD;&#xA;                IsDirty = true;&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Add(string name, object value) {&#xD;&#xA;                return Add(name, value.ToString());&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex RemoveTags() {&#xD;&#xA;                _removeTags = true;&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Store() {&#xD;&#xA;                _store = true;&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex Analyze() {&#xD;&#xA;                _analyze = true;&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public IDocumentIndex SetContentItemId(int contentItemId) {&#xD;&#xA;                ContentItemId = contentItemId;&#xD;&#xA;                Fields.Add(new Field(&quot;id&quot;, contentItemId.ToString(), Field.Store.YES, Field.Index.NOT_ANALYZED));&#xD;&#xA;                return this;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public void PrepareForIndexing() {&#xD;&#xA;                switch(_typeCode) {&#xD;&#xA;                    case TypeCode.String:&#xD;&#xA;                        if(_removeTags) {&#xD;&#xA;                            _stringValue = _stringValue.RemoveTags(true);&#xD;&#xA;                        }&#xD;&#xA;                        var f = new Field(_name, _stringValue ?? String.Empty,&#xD;&#xA;                            _store ? Field.Store.YES : Field.Store.NO,&#xD;&#xA;                            _analyze ? Field.Index.ANALYZED : Field.Index.NOT_ANALYZED, Field.TermVector.YES);&#xD;&#xA;                        Fields.Add(f);&#xD;&#xA;                        break;&#xD;&#xA;                    case TypeCode.Int32:&#xD;&#xA;                        var nf = new NumericField(_name,&#xD;&#xA;                            _store ? Field.Store.YES : Field.Store.NO,&#xD;&#xA;                            true).SetIntValue(_intValue);&#xD;&#xA;                        Fields.Add(nf);&#xD;&#xA;                        break;&#xD;&#xA;                    case TypeCode.Single:&#xD;&#xA;                        Fields.Add(new NumericField(_name,&#xD;&#xA;                            _store ? Field.Store.YES : Field.Store.NO,&#xD;&#xA;                            true).SetDoubleValue(_doubleValue));&#xD;&#xA;                        break;&#xD;&#xA;                    case TypeCode.Empty:&#xD;&#xA;                        break;&#xD;&#xA;                    default:&#xD;&#xA;                        throw new OrchardException(T(&quot;Unexpected index type&quot;));&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                _removeTags = false;&#xD;&#xA;                _analyze = false;&#xD;&#xA;                _store = false;&#xD;&#xA;                _typeCode = TypeCode.Empty;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;So now we have a bunch of ISearchHits which we can use to get our content items.&#xD;&#xA;&#xD;&#xA;    var related = _relatedSerive.GetRelatedItems(contentItem.Id, context);&#xD;&#xA;    var contentItems = _contentManger.GetMany&lt;IContent&gt;(related.Select(e =&gt; e.ContentItemId), VersionOptions.Published, QueryHints.Empty);&#xD;&#xA;&#xD;&#xA;Then just display them however you please!&#xD;&#xA;&#xD;&#xA;I am currently developing the module with extra settings etc. so that it's a little more usable in the real world.&#xD;&#xA;&#xD;&#xA;**Update (07/09/2017):** I didn't really develop the module much more but I the code is now on [GitHub][3] anyway and you can see it working on my [travel blog][4].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://cephas.net/blog/2008/03/30/how-morelikethis-works-in-lucene/&#xD;&#xA;  [2]: https://www.nuget.org/packages/Lucene.Net.Contrib/3.0.3&#xD;&#xA;  [3]: https://github.com/Hazzamanic/Hazza.RelatedContent&#xD;&#xA;  [4]: http://travellingwrong.com/" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-02-02T15:29:00Z" PublishedUtc="2017-09-08T01:09:04.2908Z" ModifiedUtc="2017-09-08T01:09:04.244Z" />
      <AutoroutePart Alias="using-morelikethis-in-lucene-to-displayed-related-content-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Using MoreLikeThis in Lucene to displayed related content in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="lucene,MoreLikeThis,Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=actually-using-orchard" Status="Published">
      <BodyPart Text="I've been developing with Orchard on and off for over five years but in all that time I've never really used it. You know, properly created lots of content; used the CMS side. Recently I decided to take a break from work and go see the world. And I have a little travel blog/diary. So I've been using it a fairly regularly and although it's still early days and everything has teething issues, I've found a few basic features quite frustrating.&#xD;&#xA;&#xD;&#xA; - Respecting EXIF metadata on images and rotating these images for you. It is a total nightmare uploading images from your camera into Orchard when it does nothing to respect the rotation of the images. [Use ImageResizer's autorotate function!][1]&#xD;&#xA; - No way to utilize the media profiles within html elements/body. I mean, really? I feel like I'm the only one on Orchard with pictures to upload.&#xD;&#xA; - The media uploader just doesn't work very well. Especially on a slow internet connection. I have lots of crappy photos of me standing on a hill that I want to put on the internet but when I have to upload each photo individually because dragging more than three in breaks the whole goddamn thing, makes me not want to bother.&#xD;&#xA; - Dragging selected files into a folder in the folder tree in the media manager has silently failed on more than one occasion leaving me with half my files in one place and half where they were before.&#xD;&#xA; - No tokens for media profiles. Really? [I'd somehow forgotten that I already added these!][2]&#xD;&#xA; - I love the layout editor but way too often it has fucked me over. Session timeouts when editing content. Whaaaaat? I'm slow. Don't fucking rush me. [Use the cache, Luke!][3]&#xD;&#xA; - Has anyone ever written more than five lines in TinyMce? No sticky toolbar means the amount of scrolling is just absurd. [Use this magic jQuery script (or just press the fullscreen option in TinyMce)][4]&#xD;&#xA; - The media picker pop up box loads the entire admin page and then hides the surrounding elements (e.g. the menu etc.). Being stuck on uber slow WiFi connections in the backend of nowhere teaches you to appreciate when developers have taken time to optimize the delivery of the site and be pissed when they haven't. Plenty of focus on frontend speed but no one cares about the admin :( &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;I had the pleasurable company of a fellow traveller who has a WordPress blog and boasts a plentiful number of views per month, who recently had to take his blog down because it was redirecting to nasty websites. A vulnerability in some plugin or other. Standard affairs for WordPress I suppose. I wanted to feel smug that my obscure blog on an obscure platform was running just fine but having spent the previous few hours battling with the media uploader then being given a nice fat null reference exception by the layouts module and lost all my work, I kinda wished I had picked WordPress too...&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;I'm sure I sound bitchy but your blogging platform should inspire you to write some blog posts, not make you dread it like some sort of ordeal. I know Orchard isn't a blogging platform per se, but it is a content management system and creating content should be its bread and butter. But honestly, I really don't feel like it is.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://arkleseizure.net/respecting-exif-metadata-in-orchard-images&#xD;&#xA;  [2]: http://arkleseizure.net/media-profile-tokens-for-orchard-cms&#xD;&#xA;  [3]: http://arkleseizure.net/replacing-orchard-layout-s-use-of-the-http-session-with-the-cache&#xD;&#xA;  [4]: http://arkleseizure.net/creating-a-static-toolbar-for-tinymce" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-01-16T00:21:00Z" PublishedUtc="2017-02-22T05:05:28.4158Z" ModifiedUtc="2017-02-22T05:05:28.369Z" />
      <AutoroutePart Alias="actually-using-orchard" UseCustomPattern="false" />
      <TitlePart Title="Actually using Orchard for blogging" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=replacing-orchard-layout-s-use-of-the-http-session-with-the-cache" Status="Published">
      <BodyPart Text="The Orchard Layout's module uses the http session to store data as you edit elements. This isn't great when it times out and you lose everything you've been working on. An easy solution would be to simply extend the session timeout in the web.config but I looked at the code and it doesn't just implement the http session directly, this is orchard, it's abstracted out of course. Clearly someone thought session might not be ideal. Maybe they were thinking more along the lines of web farms and sessionless set ups but whatever. &#xD;&#xA;&#xD;&#xA;I implemented the *IObjectStore* using *ICacheService* and I haven't used it much but it seems to be working a lot better. &#xD;&#xA;&#xD;&#xA;    public class CacheObjectStore : IObjectStore {&#xD;&#xA;        private readonly ICacheService _cacheService;&#xD;&#xA;&#xD;&#xA;        public CacheObjectStore(ICacheService cacheService) {&#xD;&#xA;            _cacheService = cacheService;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string GenerateKey() {&#xD;&#xA;            return Guid.NewGuid().ToString();&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public object Get(string key, Func&lt;object&gt; defaultValue = null) {&#xD;&#xA;            Argument.ThrowIfNull(key, &quot;key&quot;);&#xD;&#xA;            return _cacheService.Get(key) ?? (defaultValue != null ? defaultValue() : null);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void Remove(string key) {&#xD;&#xA;            _cacheService.Remove(key);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public void Set(string key, object value) {&#xD;&#xA;            Argument.ThrowIfNull(key, &quot;key&quot;);&#xD;&#xA;            _cacheService.Put(key, value);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;It is really simple. I just copied the session based implementation and replaced the http session with calls to *ICacheService*" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-01-31T17:31:00Z" PublishedUtc="2017-02-15T17:31:39.2578Z" ModifiedUtc="2017-02-15T17:31:39.211Z" />
      <AutoroutePart Alias="replacing-orchard-layout-s-use-of-the-http-session-with-the-cache" UseCustomPattern="false" />
      <TitlePart Title="Replacing orchard layout's use of the http session with the cache" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=creating-a-static-toolbar-for-tinymce" Status="Published">
      <BodyPart Text="Ever tried to edit a post that has more lines than your text area in TinyMCE? Scroll down and poof the toolbar is lost. You cant do anything! It is terrible. Here is a simple extension for Orchard to make the toolbar static (the JavaScript should work fine on any old TinyMCE installation).&#xD;&#xA;&#xD;&#xA;The script:&#xD;&#xA;&#xD;&#xA;    $(function ($, tinymce) {&#xD;&#xA;        function myTimeoutFunction()&#xD;&#xA;        {&#xD;&#xA;            if ($('.mce-toolbar-grp')) {&#xD;&#xA;                clearInterval(timerId);&#xD;&#xA;                var selector = $('.mce-toolbar-grp');&#xD;&#xA;                var bottom = $(&quot;.mce-statusbar&quot;);&#xD;&#xA;                var toolbarTop = selector.offset().top;       &#xD;&#xA;    &#xD;&#xA;                $(window).scroll(debounce(function () {                  &#xD;&#xA;    &#xD;&#xA;                    var currentScroll = $(window).scrollTop(); &#xD;&#xA;    &#xD;&#xA;                    if (currentScroll &gt;= toolbarTop &amp;&amp; currentScroll &lt; bottom.offset().top) {           &#xD;&#xA;                        selector.css({                      &#xD;&#xA;                            position: 'fixed',&#xD;&#xA;                            top: '0'&#xD;&#xA;                        });&#xD;&#xA;                    } else {                                   &#xD;&#xA;                        selector.css({ &#xD;&#xA;                            position: 'static'&#xD;&#xA;                        });&#xD;&#xA;                    }&#xD;&#xA;    &#xD;&#xA;                }));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // from underscore.js&#xD;&#xA;        function debounce(func, wait, immediate) {&#xD;&#xA;            var timeout;&#xD;&#xA;            return function () {&#xD;&#xA;                var context = this, args = arguments;&#xD;&#xA;                var later = function () {&#xD;&#xA;                    timeout = null;&#xD;&#xA;                    if (!immediate) func.apply(context, args);&#xD;&#xA;                };&#xD;&#xA;                var callNow = immediate &amp;&amp; !timeout;&#xD;&#xA;                clearTimeout(timeout);&#xD;&#xA;                timeout = setTimeout(later, wait);&#xD;&#xA;                if (callNow) func.apply(context, args);&#xD;&#xA;            };&#xD;&#xA;        };&#xD;&#xA;    &#xD;&#xA;        var timerId = setInterval(myTimeoutFunction, 1500);    &#xD;&#xA;    })(jQuery,tinymce);&#xD;&#xA;&#xD;&#xA;Then we just need to register this script and include it with the body. &#xD;&#xA;&#xD;&#xA;    [OrchardFeature(&quot;Mod.OddJobules.FixedTinyMceToolbar&quot;)]&#xD;&#xA;        public class TinyMceFixedResourceManifest : IResourceManifestProvider {&#xD;&#xA;            public void BuildManifests(ResourceManifestBuilder builder) {&#xD;&#xA;                Orchard.UI.Resources.ResourceManifest manifest = builder.Add();&#xD;&#xA;    &#xD;&#xA;                manifest.DefineScript(&quot;FixedTinyMce&quot;).SetUrl(&quot;tinymce.fixed.js&quot;).SetDependencies(&quot;OrchardTinyMce&quot;);&#xD;&#xA;    &#xD;&#xA;                &#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;    [OrchardFeature(&quot;Mod.OddJobules.FixedTinyMceToolbar&quot;)]&#xD;&#xA;        public class TinyMceShapeDisplayEvent : ShapeDisplayEvents {&#xD;&#xA;            private readonly IResourceManager _resourceManager;&#xD;&#xA;    &#xD;&#xA;            public TinyMceShapeDisplayEvent(IResourceManager resourceManager) {&#xD;&#xA;                _resourceManager = resourceManager;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public override void Displaying(ShapeDisplayingContext context) {&#xD;&#xA;                if (String.CompareOrdinal(context.ShapeMetadata.Type, &quot;Body_Editor&quot;) != 0) {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                if (!String.Equals(context.Shape.EditorFlavor, &quot;html&quot;, StringComparison.InvariantCultureIgnoreCase)) {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;                &#xD;&#xA;                _resourceManager.Require(&quot;script&quot;, &quot;FixedTinyMce&quot;).AtFoot();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;I have an awfully named module as you can see that contains all my weird little helper features... So just add the feature to your module.txt and enjoy the fixed tinymce toolbar. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;EDIT: I accidentally clicked the fullscreen button in TinyMce and learnt that when in fullscreen mode, the TinyMce toolbar is fixed at the top. Doh! So I guess this kind of makes this whole thing redundant." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-02-22T04:19:40.6162Z" PublishedUtc="2017-02-22T04:19:40.6162Z" ModifiedUtc="2017-02-22T04:19:40.5694Z" />
      <AutoroutePart Alias="creating-a-static-toolbar-for-tinymce" UseCustomPattern="false" />
      <TitlePart Title="Creating a static toolbar for TinyMCE" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,TinyMce" />
    </BlogPost>
    <BlogPost Id="/alias=respecting-exif-metadata-in-orchard-images" Status="Published">
      <BodyPart Text="I bought my first camera recently and have been snapping [many][1] [awful][2] [snaps][3] as I bumble around the world. Now, when you take a photo in portrait mode, the camera doesn't do any expensive rotating or anything, it just adds a little tag in to say that this photo should be displayed like this. Naturally that is a pretty dumbed down version of the EXIF metadata but that's the gist of it. So when you open the photo in your photo viewer on the laptop, bam, it looks great. Upload to Orchard? Damn all my photos are sideways. I had no clue what was going on at first but after reading a blog post about what an EXIF tag is, deeming myself an expert, I set about fixing it.&#xD;&#xA;&#xD;&#xA;Orchard has the Media Processing module, and it is awesome. I made two implementations, one adds a new a filter that will rotate an image based on the EXIF tag and one that modifies the existing resize filter to rotate the image as it is resized (I figured one pass would be more efficient and good enough for most cases). So how is the actual rotation done? Turned out to be super easy, it is all inbuilt into [ImageResizer.NET][4], a superb library that Orchard already uses for image resizing. I had a moment of confusion when I got the version of ImageResizer that was being used totally wrong and hence couldn't work out why my code wasn't working, but after cursing my stupidity and adding a line of code (autorotate comes with ImageResizer v3 but you need to manually load it in, v4 has it included by default) it worked perfectly. &#xD;&#xA;&#xD;&#xA;So the first implementation overrides how the default ResizeFilter applies it's filter by simply adding the autorotate option. Here is the full class.&#xD;&#xA;&#xD;&#xA;    using System;&#xD;&#xA;    using System.Drawing;&#xD;&#xA;    using System.IO;&#xD;&#xA;    using ImageResizer;&#xD;&#xA;    using ImageResizer.Configuration;&#xD;&#xA;    using ImageResizer.Plugins.Basic;&#xD;&#xA;    using Orchard.Environment.Extensions;&#xD;&#xA;    using Orchard.Localization;&#xD;&#xA;    using Orchard.MediaProcessing.Descriptors.Filter;&#xD;&#xA;    using Orchard.MediaProcessing.Services;&#xD;&#xA;    &#xD;&#xA;    namespace Mod.OddJobules.Providers.Filters {&#xD;&#xA;        [OrchardSuppressDependency(&quot;Orchard.MediaProcessing.Providers.Filters.ResizeFilter&quot;), OrchardFeature(&quot;Mod.OddJobules.AutorotateResizeFilter&quot;)]&#xD;&#xA;        public class ResizeFilter : IImageFilterProvider {&#xD;&#xA;            public ResizeFilter() {&#xD;&#xA;                T = NullLocalizer.Instance;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public Localizer T { get; set; }&#xD;&#xA;    &#xD;&#xA;            public void Describe(DescribeFilterContext describe) {&#xD;&#xA;                describe.For(&quot;Transform&quot;, T(&quot;Transform&quot;), T(&quot;Transform&quot;))&#xD;&#xA;                    .Element(&quot;Resize&quot;, T(&quot;Resize&quot;), T(&quot;Resizes using predefined height or width.&quot;),&#xD;&#xA;                             ApplyFilter,&#xD;&#xA;                             DisplayFilter,&#xD;&#xA;                             &quot;ResizeFilter&quot;&#xD;&#xA;                    );&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public void ApplyFilter(FilterContext context) {&#xD;&#xA;                new AutoRotate().Install(Config.Current);&#xD;&#xA;    &#xD;&#xA;                int witdh = context.State.Width;&#xD;&#xA;                int height = context.State.Height;&#xD;&#xA;                string mode = context.State.Mode;&#xD;&#xA;                string alignment = context.State.Alignment;&#xD;&#xA;                string padcolor = context.State.PadColor;&#xD;&#xA;    &#xD;&#xA;                var settings = new ResizeSettings {&#xD;&#xA;                    Mode = FitMode.Max,&#xD;&#xA;                    Height = height,&#xD;&#xA;                    Width = witdh&#xD;&#xA;                };&#xD;&#xA;    &#xD;&#xA;                switch (mode) {&#xD;&#xA;                    case &quot;max&quot;: settings.Mode = FitMode.Max; break;&#xD;&#xA;                    case &quot;pad&quot;: &#xD;&#xA;                        settings.Mode = FitMode.Pad; &#xD;&#xA;                        settings.Scale = ScaleMode.Both; &#xD;&#xA;                        break;&#xD;&#xA;                    case &quot;crop&quot;: settings.Mode = FitMode.Crop; break;&#xD;&#xA;                    case &quot;stretch&quot;: settings.Mode = FitMode.Stretch; break;&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                switch (alignment) {&#xD;&#xA;                    case &quot;topleft&quot;: settings.Anchor = ContentAlignment.TopLeft; break;&#xD;&#xA;                    case &quot;topcenter&quot;: settings.Anchor = ContentAlignment.TopCenter; break;&#xD;&#xA;                    case &quot;topright&quot;: settings.Anchor = ContentAlignment.TopRight; break;&#xD;&#xA;                    case &quot;middleleft&quot;: settings.Anchor = ContentAlignment.MiddleLeft; break;&#xD;&#xA;                    case &quot;middlecenter&quot;: settings.Anchor = ContentAlignment.MiddleCenter; break;&#xD;&#xA;                    case &quot;middleright&quot;: settings.Anchor = ContentAlignment.MiddleRight; break;&#xD;&#xA;                    case &quot;bottomleft&quot;: settings.Anchor = ContentAlignment.BottomLeft; break;&#xD;&#xA;                    case &quot;bottomcenter&quot;: settings.Anchor = ContentAlignment.BottomCenter; break;&#xD;&#xA;                    case &quot;bottomright&quot;: settings.Anchor = ContentAlignment.BottomRight; break;&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                if (!String.IsNullOrWhiteSpace(padcolor)) {&#xD;&#xA;                    if (padcolor.StartsWith(&quot;#&quot;)) {&#xD;&#xA;                        settings.BackgroundColor = ColorTranslator.FromHtml(padcolor);&#xD;&#xA;                    }&#xD;&#xA;                    else {&#xD;&#xA;                        settings.BackgroundColor = Color.FromName(padcolor);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                settings.Add(&quot;autorotate&quot;, &quot;true&quot;);&#xD;&#xA;    &#xD;&#xA;                var result = new MemoryStream();&#xD;&#xA;                if (context.Media.CanSeek) {&#xD;&#xA;                    context.Media.Seek(0, SeekOrigin.Begin);&#xD;&#xA;                }&#xD;&#xA;                ImageBuilder.Current.Build(context.Media, result, settings, true);&#xD;&#xA;                context.Media = result;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public LocalizedString DisplayFilter(FilterContext context) {&#xD;&#xA;                string mode = context.State.Mode;&#xD;&#xA;    &#xD;&#xA;                switch (mode) {&#xD;&#xA;                    case &quot;pad&quot;: return T(&quot;Pad to {0}x{1}&quot;, context.State.Height, context.State.Width);&#xD;&#xA;                    case &quot;crop&quot;: return T(&quot;Crop to {0}x{1}&quot;, context.State.Height, context.State.Width);&#xD;&#xA;                    case &quot;stretch&quot;: return T(&quot;Stretch to {0}x{1}&quot;, context.State.Height, context.State.Width);&#xD;&#xA;                    default: return T(&quot;Resize to {0}x{1}&quot;, context.State.Height, context.State.Width); &#xD;&#xA;    &#xD;&#xA;                } &#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;And this class will add a new filter called autorotate that can be added independently of the resize filter. Beware that when resizing, it will strip all metadata from the image so trying to autorotate after resizing wont work. I'm not really sure how useful this is by itself but hey, you never know. &#xD;&#xA;&#xD;&#xA;    using Orchard.MediaProcessing.Descriptors.Filter;&#xD;&#xA;    using Orchard.MediaProcessing.Services;&#xD;&#xA;    using ImageResizer;&#xD;&#xA;    using ImageResizer.Plugins.Basic;&#xD;&#xA;    using System.IO;&#xD;&#xA;    using Orchard.Localization;&#xD;&#xA;    using Orchard.Environment.Extensions;&#xD;&#xA;    using ImageResizer.Configuration;&#xD;&#xA;    &#xD;&#xA;    namespace Mod.OddJobules.Providers.Filters {&#xD;&#xA;        [OrchardFeature(&quot;Mod.OddJobules.MediaProcessingExtensions&quot;)]&#xD;&#xA;        public class AutoRotateFilter : IImageFilterProvider {&#xD;&#xA;            public AutoRotateFilter() {&#xD;&#xA;                T = NullLocalizer.Instance;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public Localizer T { get; set; }&#xD;&#xA;            public void Describe(DescribeFilterContext describe) {&#xD;&#xA;                describe.For(&quot;Transform&quot;, T(&quot;Transform&quot;), T(&quot;Transform&quot;))&#xD;&#xA;                    .Element(&quot;Rotate&quot;, T(&quot;Rotate&quot;), T(&quot;Rotates an image based on EXIF metadata tags&quot;),&#xD;&#xA;                             ApplyFilter,&#xD;&#xA;                             DisplayFilter&#xD;&#xA;                    );&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public void ApplyFilter(FilterContext context) {&#xD;&#xA;                new AutoRotate().Install(Config.Current);&#xD;&#xA;    &#xD;&#xA;                var result = new MemoryStream();&#xD;&#xA;                if (context.Media.CanSeek) {&#xD;&#xA;                    context.Media.Seek(0, SeekOrigin.Begin);&#xD;&#xA;                }&#xD;&#xA;                var settings = new ResizeSettings {&#xD;&#xA;                    MaxHeight = 3200,&#xD;&#xA;                    MaxWidth = 3200&#xD;&#xA;                };&#xD;&#xA;    &#xD;&#xA;                settings.Add(&quot;autorotate&quot;, &quot;true&quot;);&#xD;&#xA;                &#xD;&#xA;                ImageBuilder.Current.Build(context.Media, result, settings, true);&#xD;&#xA;                context.Media = result;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            public LocalizedString DisplayFilter(FilterContext context) {&#xD;&#xA;                return T(&quot;Rotate the image based on EXIF metadata&quot;);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://travellingwrong.com/elephant-nature-park-chiang-mai&#xD;&#xA;  [2]: http://travellingwrong.com/intrepid-explorers-of-the-full-moon-party&#xD;&#xA;  [3]: http://travellingwrong.com/pantip-market-koh-pha-ngan&#xD;&#xA;  [4]: https://imageresizing.net/" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-02-22T04:58:00Z" PublishedUtc="2017-02-22T05:07:26.1334Z" ModifiedUtc="2017-02-22T05:07:26.0866Z" />
      <AutoroutePart Alias="respecting-exif-metadata-in-orchard-images" UseCustomPattern="false" />
      <TitlePart Title="Respecting EXIF metadata in Orchard images" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,ImageResizer" />
    </BlogPost>
    <BlogPost Id="/alias=adding-save-as-to-edge-browser" Status="Published">
      <BodyPart Text="I can't actually believe this but Edge doesn't let you save a page you have open in the browser to your computer. Not all that helpful for your standard HTML page but if you are trying to save a JavaScript or CSS file, Edge will open it in the browser then not let you save it. Which is just pants. So unless the website you are trying to download the js from has explicitly set the download option on the link to their js file, Edge will just make everything a massive pain in the ass. &#xD;&#xA;&#xD;&#xA;Until the devs at Microsoft add the basicest of basic features, here's an aptly named extension, [SaveAs For Edge][1], that adds Save As to the context menu. It is super simple, barely ten lines of code. You need to enable developer mode in order to side load, which you can do b going to *about:flags* in Edge.&#xD;&#xA;&#xD;&#xA;I did originally plan to upload it to the Store, even made a developer account (for £14.40!), until I read that you have to manually submit your extensions for them to be included. It sounded arduous. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;----------&#xD;&#xA;&#xD;&#xA;Quick update... I did actually spot that Edge contains a Save Target As... context menu item, so when you are opening a link you can save it instead. This is pretty neat to be fair, and means things aren't as dire out of the box as I'd first thought, but I've still found myself using Save As... instead. Old habits die hard I suppose.&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/Hazzamanic/SaveAs-For-Edge" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-02-28T12:20:39.037Z" PublishedUtc="2017-02-28T12:20:39.037Z" ModifiedUtc="2017-02-28T12:20:38.7562Z" />
      <AutoroutePart Alias="adding-save-as-to-edge-browser" UseCustomPattern="false" />
      <TitlePart Title="Adding Save As... To Edge Browser" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Edge" />
    </BlogPost>
    <BlogPost Id="/alias=set-a-project-to-automatically-start-when-debugging-a-visual-studio-extension" Status="Published">
      <BodyPart Text="When you're developing a visual studio extension you will likely have a test project that you test with. Well, I do anyway. And I quickly got sick of having to open it over and over. Your debug properties for your VSIX project probably look something along the lines of this.&#xD;&#xA;&#xD;&#xA;![no start up project][1]&#xD;&#xA;&#xD;&#xA;If you simply add the path to your solution, it will be loaded automatically and save you one or two clicks.&#xD;&#xA;&#xD;&#xA;![enter image description here][2]&#xD;&#xA;&#xD;&#xA;Obvious in retrospect...&#xD;&#xA;&#xD;&#xA;  [1]: /Media/Arkleseizure/Images/noproj.PNG&#xD;&#xA;  [2]: /Media/Arkleseizure/Images/projadded.PNG" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-04-18T09:12:00Z" PublishedUtc="2017-04-18T09:18:36.1772Z" ModifiedUtc="2017-04-18T09:18:36.1148Z" />
      <AutoroutePart Alias="set-a-project-to-automatically-start-when-debugging-a-visual-studio-extension" UseCustomPattern="false" />
      <TitlePart Title="Set a project to automatically start when debugging a Visual Studio Extension" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Visual Studio,VSIX" />
    </BlogPost>
    <BlogPost Id="/alias=adding-a-cookie-consent-pop-up-in-orchard-cms" Status="Published">
      <BodyPart Text="This is the simplest of modules for adding a cookie consent pop up to your Orchard CMS website. It uses the [SilkTide JavaScript library][1], which is neat and quite unobtrusive (no taking over the screen or shifting content all over the shop). The module offers a few configuration options available in Settings -&gt; Cookie Consent. It is open source, generously donated to the world by [Media On Demand Streaming Ltd][2] and lazily maintained by me. You can grab it [here][3].&#xD;&#xA;&#xD;&#xA;I've finally put together a better workflow for managing my open source modules so hoping to share a few more bits I use day to day. Is that something to look forward to? I'm really not sure.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://cookieconsent.insites.com/&#xD;&#xA;  [2]: http://www.modstreaming.com/&#xD;&#xA;  [3]: https://github.com/Hazzamanic/Mod.CookieConsent" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-04-23T15:55:47.0384Z" PublishedUtc="2017-04-23T15:55:47.0384Z" ModifiedUtc="2017-04-23T15:55:46.976Z" />
      <AutoroutePart Alias="adding-a-cookie-consent-pop-up-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Adding a cookie consent pop up in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,Cookies" />
    </BlogPost>
    <BlogPost Id="/alias=sending-texts-via-twilio-in-orchard-cms" Status="Published">
      <BodyPart Text="A simple Orchard CMS module for sending texts via [Twilio][1]. The module provides a workflow activity called SmsActivity that you can use to send the texts. Just two fields are required: recipients and message. Recipients is a comma separated list of phone numbers. Both fields are tokenized. You can also send texts programmatically by injecting *ITwilioService* and calling `SendSms`. Enter your Twilio settings in Settings -&gt; Twilio.&#xD;&#xA;&#xD;&#xA;You can get the module [here][2].&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://twilio.com&#xD;&#xA;  [2]: https://github.com/Hazzamanic/Mod.Twilio" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-04-24T09:31:14.2088Z" PublishedUtc="2017-04-24T09:31:14.2088Z" ModifiedUtc="2017-04-24T09:31:13.928Z" />
      <AutoroutePart Alias="sending-texts-via-twilio-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Sending texts via Twilio in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,Twilio" />
    </BlogPost>
    <BlogPost Id="/alias=a-more-user-friendly-payment-model-for-consuming-online-content" Status="Published">
      <BodyPart Text="I subscribe to two news site and support several podcasts via patreon, which I'm happy to do. But as more and more content creators jump to pick up subscribers by hiding content behind subscription models, I find I just cant support them all. Obviously. And frankly, I don't want to subscribe to sites where I may read one or two articles a month. I also reckon there are a whole lot of people in the same boat as me. We have a couple of sites we religiously trawl. And a host of sites we open links to then get blocked and leave. What if they offered the option not to subscribe, but to pay for individual articles. Their arguments are probably that this isn't quite as lucrative an arrangement as subscriptions people forget to cancel but it's a whole lot better than no subscriptions at all. They also may complain that such small transaction fees are pointless when whichever payment provider they choose to use (PayPal etc.) take a hefty cut. But I have answer for that too. I gave this idea a mighty five minutes of thought. Five minutes more than most of my thoughts. Pay five dollars and get credit to read 10 articles. Yay for credits.&#xD;&#xA;&#xD;&#xA;Terrible advertising from publishers created a crap reading experience so readers used adblock. Now publishers are beginning to create another crap reading experience by hiding content behind more subscription walls than I can shake a stick at. Publishers, readers do want to support you and read your content. Just give us some reasonable options to do that." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-07-10T05:36:31.2414Z" PublishedUtc="2017-07-10T05:36:31.2414Z" ModifiedUtc="2017-07-10T05:36:31.2102Z" />
      <AutoroutePart Alias="a-more-user-friendly-payment-model-for-consuming-online-content" UseCustomPattern="false" />
      <TitlePart Title="A more user friendly payment model for consuming online content" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="" />
    </BlogPost>
    <BlogPost Id="/alias=storing-json-in-orchard-workflows" Status="Published">
      <BodyPart Text="When Orchard executes a workflow activity, it evaluates any tokens stored in the data for that activity before sending it to the activity. Because JSON is recognised as a token by Orchard (both use curly braces!), Orchard will attempt to evaluate it, fail and replace it with an empty string. So in your activity, you will have nothing! &#xD;&#xA;&#xD;&#xA;To solve this I opted for the simple option to modify the data before it was saved using the form validation to replace the curly braces with double brackets (and vice versa) in JS because I didn't have time to fiddle with it. Hacks for the win...?&#xD;&#xA;&#xD;&#xA;I have created an issue regarding this because I think the behaviour is limiting and a little unexpected: https://github.com/OrchardCMS/Orchard/issues/7759" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-07-09T19:28:57.6606Z" PublishedUtc="2017-07-09T19:28:57.6606Z" ModifiedUtc="2017-07-09T19:28:57.4266Z" />
      <AutoroutePart Alias="storing-json-in-orchard-workflows" UseCustomPattern="false" />
      <TitlePart Title="Storing JSON in an Orchard workflow activity" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=creating-an-instagram-layout-element-for-orchard-cms" Status="Published">
      <BodyPart Text="A sweet feature in orchard is the layouts module, that lets you create complex page layouts from a drag and drop editor. It had also been well thought out with little extras. One is the ability to create layout elements, complete with configuration options, by simply creating the display shape in your theme and including Snippet at the end of your view name. Let's give it a whirl.&#xD;&#xA;&#xD;&#xA;For our travelling blog, we wanted to include some pictures from Instagram. I'm so fairly sure Instagram has some embed option. But Instagram also have an API. And I like wasting time on random stuff. So off I went. I grabbed a [slider][1] from the Internets and a sweet little js library called [Instafeed.js][2]. And that was pretty much that. My view is called `InstagramFeedSnippet.cshtml`.&#xD;&#xA;&#xD;&#xA;    @using Orchard.Layouts.Helpers&#xD;&#xA;    &#xD;&#xA;    @{ &#xD;&#xA;        Style.Include(&quot;flickity.min.css&quot;);&#xD;&#xA;    &#xD;&#xA;        Script.Include(&quot;instafeed.min.js&quot;).AtFoot();&#xD;&#xA;        Script.Require(&quot;flickity.pkgd.min.js&quot;).AtFoot();&#xD;&#xA;        //@Html.SnippetField&#xD;&#xA;    }&#xD;&#xA;    &lt;div id=&quot;instafeed&quot;&gt;&#xD;&#xA;    &lt;/div&gt;&#xD;&#xA;    &#xD;&#xA;    @using (Script.Foot()) {&#xD;&#xA;        &lt;script type=&quot;text/javascript&quot;&gt;&#xD;&#xA;            var isMobile = window.matchMedia(&quot;only screen and (max-width: 760px)&quot;);&#xD;&#xA;            var wdth = '320';&#xD;&#xA;            var reso = 'low_resolution';&#xD;&#xA;            if (isMobile.matches) {&#xD;&#xA;                wdth = '150';&#xD;&#xA;                reso = 'thumbnail';&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            var feed = new Instafeed({&#xD;&#xA;                get: 'user',&#xD;&#xA;                userId: '@Html.SnippetField(&quot;tag&quot;).DisplayedAs(T(&quot;User Id&quot;))',&#xD;&#xA;                accessToken: '@Html.SnippetField(&quot;accessToken&quot;).DisplayedAs(T(&quot;Access Token&quot;)).WithDescription(T(&quot;Register your application within instagram to obtain your access token&quot;))',&#xD;&#xA;                template: '&lt;a style=&quot;width: ' + wdth + 'px; height: ' + wdth + 'px;&quot; href=&quot;{{link}}&quot;&gt;&lt;img style=&quot;width:100%&quot; src=&quot;{{image}}&quot; /&gt;&lt;/a&gt;',&#xD;&#xA;                resolution: reso,&#xD;&#xA;                after: function () {&#xD;&#xA;                    var flkty = new Flickity('#instafeed', {&#xD;&#xA;                        wrapAround: true,&#xD;&#xA;                        cellAlign: 'left',&#xD;&#xA;                        prevNextButtons: false,&#xD;&#xA;                        pageDots: false&#xD;&#xA;                    });&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;            feed.run();&#xD;&#xA;        &lt;/script&gt;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Check it out at the bottom of my [travel blog][3]. Snippets are so sexy, so thanks to Sipke and everyone else involved in making them happen!&#xD;&#xA;&#xD;&#xA;Oh, and you'll need a client id for Instagram, [google it][4]!&#xD;&#xA;&#xD;&#xA;To learn more about Orchard Layouts check out the [eBook][5] by the dudes who made it! &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://flickity.metafizzy.co/&#xD;&#xA;  [2]: http://instafeedjs.com/&#xD;&#xA;  [3]: http://travellingwrong.com&#xD;&#xA;  [4]: https://google.com/search?q=How%20to%20get%20an%20instagram%20client%20id&#xD;&#xA;  [5]: http://www.ideliverable.com/products/books/mastering-orchard-layouts" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-07-22T19:54:00Z" PublishedUtc="2017-09-12T14:52:50.9852Z" ModifiedUtc="2017-09-12T14:52:50.7356Z" />
      <AutoroutePart Alias="creating-an-instagram-layout-element-for-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Creating an Instagram layout element for Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Instagram" />
    </BlogPost>
    <BlogPost Id="/alias=sending-json-from-a-webrequest-workflow-activity-in-orchard-cms" Status="Published">
      <BodyPart Text="An option for the web request workflow activity is to post your data as JSON. Cool. Unfortunately, due to [how orchard evaluates tokens prior to the workflow activity execution][2], the JSON you enter will be lost. A [question][1] on stack overflow brought this issue up, and since I have nothing else to pollute the blogosphere with I'm just rehashing my answer on here.&#xD;&#xA;&#xD;&#xA;The fix requires no coding. Yay. Simply replace all curly braces in your JSON with double brackets. So the following JSON: &#xD;&#xA;&#xD;&#xA;    { test: &quot;hello&quot; }&#xD;&#xA;&#xD;&#xA;Should be inputted as: &#xD;&#xA;&#xD;&#xA;    (( test: &quot;hello&quot; ))&#xD;&#xA;&#xD;&#xA;Clearly someone discovered the issue and made a hacky fix but didn't bother updating the help text in the activity ui to reflect this hack, leaving the text telling the user to input valid JSON. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://stackoverflow.com/questions/44937158/correct-json-string-format-for-the-body-request-in-a-webrequest-activity-inside&#xD;&#xA;  [2]: http://arkleseizure.net/storing-json-in-orchard-workflows" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-07-12T20:36:49.095Z" PublishedUtc="2017-07-12T20:36:49.095Z" ModifiedUtc="2017-07-12T20:36:48.8142Z" />
      <AutoroutePart Alias="sending-json-from-a-webrequest-workflow-activity-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Sending JSON from a WebRequest workflow activity in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=sending-money-with-santander-s-android-app-fails-randomly-while-abroad" Status="Published">
      <BodyPart Text="In the Santander UK android application, I've recently run into some issues sending money, receiving a message telling me to call my branch. But then I'd try again later and it would work. Random. Actually it wasn't random, just poor handling of timezones and even poorer error handling. I can't actually claim credit for discovering the issue, it was my girlfriend who clocked onto it. &#xD;&#xA;&#xD;&#xA;When sending money you can choose a date to send your money. This defaults to today's date. Wherever today is for you. And I'd this happens to be a date that has passed in the UK, you are trying to send money yesterday and the app breaks down and tells you to call your branch. Not very helpful. So just adjust the date to the next day to send your money and all will be well. &#xD;&#xA;&#xD;&#xA;And always remember that UTC is your friend. " />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-07-10T05:32:43.9026Z" PublishedUtc="2017-07-10T05:32:43.9026Z" ModifiedUtc="2017-07-10T05:32:43.8714Z" />
      <AutoroutePart Alias="sending-money-with-santander-s-android-app-fails-randomly-while-abroad" UseCustomPattern="false" />
      <TitlePart Title="Sending money with Santander's Android App fails randomly while abroad" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="" />
    </BlogPost>
    <BlogPost Id="/alias=retrieving-the-balance_transaction-object-when-creating-a-charge-in-stripe" Status="Published">
      <BodyPart Text="When making a post request to Stripe's REST api to create a charge, we needed to return information in the balance_transaction object. Stripe offers the ability to expand properties so you don't have to make an additional request to their api for more information, which is cool. To expand a property you add it to the request parameter `expand[]`. But when making a post request (e.g. creating a charge), I had to wrap it in square brackets like so: `[expand][]`. Here is a quick example written in C#.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    var collection = new NameValueCollection() {&#xD;&#xA;        {&quot;amount&quot;, (100).ToString(&quot;F0&quot;)},&#xD;&#xA;        {&quot;currency&quot;, &quot;GBP&quot;},&#xD;&#xA;        {&quot;source&quot;, token}, // using stripe connect to split a charge &#xD;&#xA;        {&quot;destination&quot;, destination}, // using stripe connect to split a charge&#xD;&#xA;        {&quot;application_fee&quot;, (100).ToString(&quot;F0&quot;)},&#xD;&#xA;        {&quot;[expand][]&quot;, &quot;balance_transaction&quot; }&#xD;&#xA;    };&#xD;&#xA;    &#xD;&#xA;    var client = new WebClient {&#xD;&#xA;        Credentials = new NetworkCredential(&quot;secretKeyHere&quot;, &quot;&quot;)&#xD;&#xA;    };&#xD;&#xA;    byte[] responseBytes;&#xD;&#xA;    try {&#xD;&#xA;        responseBytes = client.UploadValues(&quot;https://api.stripe.com/v1/charges&quot;, &quot;POST&quot;, collection);&#xD;&#xA;    } catch() {&#xD;&#xA;    &#xD;&#xA;    }&#xD;&#xA;    var responseText = Encoding.UTF8.GetString(responseBytes);" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-08-10T15:03:00Z" PublishedUtc="2017-12-06T02:05:28.7264Z" ModifiedUtc="2017-12-06T02:05:28.4612Z" />
      <AutoroutePart Alias="retrieving-the-balance_transaction-object-when-creating-a-charge-in-stripe" UseCustomPattern="false" />
      <TitlePart Title="Retrieving the balance transaction object when creating a charge in Stripe" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="stripe,.net" />
    </BlogPost>
    <BlogPost Id="/alias=improving-performance-of-rendering-content-items-with-taxonomies-attached" Status="Published">
      <BodyPart Text="If you are using taxonomies but not displaying them in your summary shapes for example, Orchard will still need to load all the related data because it (un)helpfully adds an alternate to the Content shape to allow you to customize it based on the taxonomy terms associated with the content item. So on pages with a significant number of items being displayed, it can add quite a lot of additional redundant database calls as linked taxonomies are lazily loaded. If you aren't using this feature at all, you can just comment it out. The relevant code is in `Orchard.Taxonomies.Shapes.cs`:&#xD;&#xA;&#xD;&#xA;    builder.Describe(&quot;Content&quot;)&#xD;&#xA;        .OnDisplaying(displaying =&gt; {&#xD;&#xA;    &#xD;&#xA;            // add specific alternates for customizing a Content item when&#xD;&#xA;            // it is associated to a term or taxonomy&#xD;&#xA;    &#xD;&#xA;            var shape = displaying.Shape;&#xD;&#xA;            var metadata = displaying.ShapeMetadata;&#xD;&#xA;    &#xD;&#xA;            // use TermsPart to detect if the content item has a TermPart attached&#xD;&#xA;            // in conjunction with its field name&#xD;&#xA;            ContentItem contentItem = shape.ContentItem;&#xD;&#xA;            var termsPart = contentItem.As&lt;TermsPart&gt;();&#xD;&#xA;    &#xD;&#xA;            if (termsPart == null) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            var taxonomy = displaying.Shape.Taxonomy as TaxonomyPart;&#xD;&#xA;    &#xD;&#xA;            // Content__[ContentType]__[Field]__[Slug]&#xD;&#xA;            // Content-Image-MainColor-Blue.cshtml&#xD;&#xA;            // Content-Image-MainColor-Blue-Light-Blue.cshtml&#xD;&#xA;    &#xD;&#xA;            // Content_[DisplayType]__[ContentType]__[Field]__[Slug]&#xD;&#xA;            // Content-Image-MainColor-Blue.Summary.cshtml&#xD;&#xA;            // Content-Image-MainColor-Blue-Light-Blue.Summary.cshtml&#xD;&#xA;    &#xD;&#xA;            foreach (var termContentItem in termsPart.TermParts) {&#xD;&#xA;                var field = termContentItem.Field;&#xD;&#xA;                var termPart = termContentItem.TermPart;&#xD;&#xA;    &#xD;&#xA;                foreach (var parent in GetHierarchyAlternates(termPart).Reverse()) {&#xD;&#xA;                    var formatted = FormatAlternate(parent);&#xD;&#xA;    &#xD;&#xA;                    metadata.Alternates.Add(String.Concat(&quot;Content__&quot;, contentItem.ContentType, &quot;__&quot;, field, &quot;__&quot;, formatted));&#xD;&#xA;                    metadata.Alternates.Add(String.Concat(&quot;Content_&quot;, metadata.DisplayType, &quot;__&quot;, contentItem.ContentType, &quot;__&quot;, field, &quot;__&quot;, formatted));&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        });" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-08-22T18:18:42.5128Z" PublishedUtc="2017-08-22T18:18:42.5128Z" ModifiedUtc="2017-08-22T18:18:42.1852Z" />
      <AutoroutePart Alias="improving-performance-of-rendering-content-items-with-taxonomies-attached" UseCustomPattern="false" />
      <TitlePart Title="Improving performance of rendering content items with taxonomies attached" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="orchard,performance" />
    </BlogPost>
    <BlogPost Id="/alias=view-your-orchard-cms-tenant-info-inside-the-admin-for-sites-with-too-many-tenants" Status="Published">
      <BodyPart Text="When you have hundreds of tenants and you need to find the database or media folder etc. is always a pain. This super simple module just displays the tenant name and datatable prefix in the admin. Grab it from [GitHub][1]&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/Hazzamanic/Hazza.SiteInfo" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-08-30T23:27:00Z" PublishedUtc="2017-08-30T23:33:31.2452Z" ModifiedUtc="2017-08-30T23:33:31.1984Z" />
      <AutoroutePart Alias="view-your-orchard-cms-tenant-info-inside-the-admin-for-sites-with-too-many-tenants" UseCustomPattern="false" />
      <TitlePart Title="View your Orchard CMS tenant info inside the admin for sites with too many tenants" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=display-comment-information-for-a-blog-on-orchard-cms-sites-with-multiple-blogs" Status="Published">
      <BodyPart Text="**Update (13/09/2017)** Someone made a pull request where there is a much simpler way to do this than my mad HQL queries as Comments contain a field with the id of the container (e.g. the blog). Grab the pull request [here][1]&#xD;&#xA;&#xD;&#xA;I manage a website with multiple blogs and this [issue][2] brought to my attention that on the admin summary for a blog (not a blog post) it displays comment information that doesn't actually work. To be honest, I had never even noticed that it displays any comment information at all. After initially flicking this off as a useless feature and we should remove the broken code from the comments module (I still am leaning toward this not being needed for core), I actually figured that this could actually be a pretty cool feature so I threw together a little module for it. You can grab the source on [GitHub][3].&#xD;&#xA;&#xD;&#xA;The use enable the feature 'Blog Comment Count' and attach the ContainerCommentsCountPart to your Blog type. &#xD;&#xA;&#xD;&#xA;The module stores the comment counts as aggregates in a new part so there should hopefully be no performance loss when rendering the admin summary shapes for a blog. The counts are calculated in the background when a comment is created or moderated for a blog. I had to dust off my HQL skills because I needed the SUM keyword, which Orchard's query API does not expose (that I could see anyway). It also hides the broken comment count display that comes from Orchard.Comments. &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/OrchardCMS/Orchard/pull/7847&#xD;&#xA;  [2]: https://github.com/OrchardCMS/Orchard/issues/7838&#xD;&#xA;  [3]: https://github.com/Hazzamanic/Hazza.Blogging" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-09-06T15:38:00Z" PublishedUtc="2017-09-28T00:25:37.2302Z" ModifiedUtc="2017-09-28T00:25:36.9806Z" />
      <AutoroutePart Alias="display-comment-information-for-a-blog-on-orchard-cms-sites-with-multiple-blogs" UseCustomPattern="false" />
      <TitlePart Title="Display comment information for a blog on Orchard CMS sites with multiple blogs" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="orchard" />
    </BlogPost>
    <BlogPost Id="/alias=thoughts-on-making-orchard-themes-a-dream-to-customize-and-develop" Status="Published">
      <BodyPart Text="A project I am currently working on needs configurable theming options. I resurrected a demo I made a while ago for Orchard CMS and stole a few bits and bobs. It reminded me that I started writing a blog post about it that was just sitting unfinished and unpublished from years ago. So here it is, a little late.&#xD;&#xA;&#xD;&#xA;I remember when I made my first theme and my boss told me we needed to be able to change the header colour. Easy. So I added a site settings part with a property header colour. Then I added a shape to the Layout that picked up my settings and rendered some style tags to change the header colour. Then we needed a font picker because, of course the theme should support different fonts. New property on my part. Excellent. Then we needed different font pickers for headers, menu, body. But they needed to inherit if none was displayed. Okay, some funny logic and more properties to my settings part. A bunch more properties later and a boatload of CSS in style tags the theme settings were now doing things they really shouldn't have been doing. You could add featured images, logos, tag lines, contact information etc. It was starting to look like an unwieldy WordPress theme, doing anything and everything. But if I had had my 'Orchard' way, everything would be buried in their own modular settings screen, widget page etc. We needed a marriage between the two, an easy place for users to go to find settings but not all managed by one lumbering giant, horrible-to-maintain theme. &#xD;&#xA;&#xD;&#xA;To this end, several years ago now, I created a small demo. Here are a few thoughts behind it.&#xD;&#xA;&#xD;&#xA;![less editor][1]&#xD;&#xA;&#xD;&#xA; - **LESS**. Adding lots of CSS to the page in style tags is not ideal, both in terms of page performance and in manual work required to code different properties. Individual CSS properties are also rather limiting. When you change certain properties you may want that colour to propagate across to multiple properties. The module provides a pipeline for generating CSS using LESS. This would likely be made extensible to support other pre-processors like SASS and CSS variables.&#xD;&#xA; - **Extensible editor**. Of course, this is Orchard. Different types of editor can be created and used by settings e.g. colour picker, text etc.&#xD;&#xA; - **No code required**. I like the idea of quickly creating themes in Orchard, not having to create a project. Unfortunately, I've found myself having to make my theme a project so I can add code for certain features. Theme settings are defined via JSON. An example is defined below:&#xD;&#xA;&#xD;&#xA;         {&#xD;&#xA;            &quot;Version&quot;: &quot;1.0&quot;,&#xD;&#xA;            &quot;SchemaVersion&quot;: &quot;1.0&quot;,&#xD;&#xA;            &quot;Settings&quot;: [&#xD;&#xA;                {&#xD;&#xA;                    &quot;Type&quot;: &quot;LessVariables&quot;,&#xD;&#xA;                    &quot;Properties&quot;: {&#xD;&#xA;                        &quot;VariablesPath&quot;: &quot;~/Themes/Mod.Bootstrap/Styles/Bootstrap/less/variables.less&quot;,&#xD;&#xA;                        &quot;Compiler&quot;: &quot;~/Themes/PaperChaser/ThemeSettings/main.cshtml&quot;,&#xD;&#xA;                        &quot;Root&quot;: &quot;Themes/PaperChaser/Styles&quot;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            ],&#xD;&#xA;            &quot;Groups&quot;: [&#xD;&#xA;                {&#xD;&#xA;                    &quot;Name&quot;: &quot;Layout&quot;,&#xD;&#xA;                  &quot;Settings&quot;: [&#xD;&#xA;                    {&#xD;&#xA;                      &quot;EditorType&quot;: &quot;Color&quot;,&#xD;&#xA;                      &quot;Type&quot;: &quot;LessVariable&quot;,&#xD;&#xA;                      &quot;Properties&quot;: {&#xD;&#xA;                        &quot;Name&quot;: &quot;@bg-color&quot;,&#xD;&#xA;                        &quot;DisplayName&quot;: &quot;Background Color&quot;,&#xD;&#xA;                        &quot;Default&quot;: &quot;#fff&quot;,&#xD;&#xA;                        &quot;Description&quot;: &quot;This is the background color&quot;&#xD;&#xA;                      }&#xD;&#xA;                    },&#xD;&#xA;                    {&#xD;&#xA;                      &quot;EditorType&quot;: &quot;Color&quot;,&#xD;&#xA;                      &quot;Type&quot;: &quot;LessVariable&quot;,&#xD;&#xA;                      &quot;Properties&quot;: {&#xD;&#xA;                        &quot;Name&quot;: &quot;@bg-xxx&quot;,&#xD;&#xA;                        &quot;DisplayName&quot;: &quot;xxx Color&quot;,&#xD;&#xA;                        &quot;Default&quot;: &quot;#000&quot;,&#xD;&#xA;                        &quot;Description&quot;: &quot;This is the xxx color&quot;&#xD;&#xA;                      }&#xD;&#xA;                    }&#xD;&#xA;                  ]&#xD;&#xA;                }&#xD;&#xA;            ]&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA; - **Not required**. Orchard has suffered terribly from a lack of themes and adding another roadblock by making themes require a theme settings framework would be unlikely to help the situation. Themes work just fine without this module, they are just enhanced by it as it allows them to be customized.&#xD;&#xA; - **Adhoc usage**. Allow theme developers to access settings directly in views. Unfortunately this would likely break the point above, but it is flexible.&#xD;&#xA;&#xD;&#xA;&lt;pre&gt;&lt;code&gt;@Html.GetThemeSetting&lt;string&gt;(&quot;setting_key&quot;)&lt;/code&gt;&lt;/pre&gt;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;Unfortunately the company I worked with at the time began to step back from Orchard so I never took it further but the roadmap included:&#xD;&#xA;&#xD;&#xA; - **Extensible settings**. Right now it only really supports LESS generation and accessing settings directly within views. But it would be trivial to make certain settings manipulate placement (e.g. to hide/show certain zones/parts), register alternates, change the layout view etc.&#xD;&#xA; - **Based On**. This is currently a bit of a problem, working out how themes that are based on other themes that use theme settings behave. Should all settings be displayed? Should the child theme decide which settings it will inherit from the base theme?&#xD;&#xA; - **Hub**. Allow other things that may affect the theme be either configurable from the same editor (e.g. social icons provided by a module) or linked to (e.g. homepage widgets)&#xD;&#xA; - **More editors**. I believe I only implemented basic text (also the fallback if the specified editor is not found) and colour picker. Examples could be: file upload, google font picker, drop downs.&#xD;&#xA; - **More than site settings**. The module shouldn't be limited to just site wide changes, but also provide individual content items with the ability to select the alternate to be used for summary and detail shapes, for example.&#xD;&#xA; - **Live preview**. I had to add customization options to a WordPress theme a while back and to add live preview functionality you had to write jQuery to manually update CSS. The end result was, admittedly, pretty cool. But it was definitely painful. I think (naturally) that adding live previewing to this would be trivial since LESS can be generated clientside using less.js (in fact I already do this to provide updates to variable values). SASS is also js based, and though I haven't looked into CSS variables, I'm sure there must be ways to regenerate the CSS on-the-fly. Some other settings may require page refreshes to see changes but this shouldn't really be a huge issue.&#xD;&#xA; - **Multi theme support**. For scenarios where you have a mobile theme and want to manage settings for that too.&#xD;&#xA;&#xD;&#xA;This is definitely not perfect, but I think exposing a framework from which theme authors can easily add customization options and integrate modules organically, would greatly improve the theme scene (I really wanted to say that) within Orchard.&#xD;&#xA;&#xD;&#xA;Clearly it took me a little too long (over three years in fact) to get off my ass and actually write this blog post and it is probably too late for poor old Orchard now. Here's hoping Orchard Core will fair a little better and we'll see some sexy themes built.&#xD;&#xA;&#xD;&#xA;If anyone wants the source code I can send it. Fair warning, it ain't pretty. Or guaranteed to work haha.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: /Media/Arkleseizure/Images/less_editor.gif" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-11-14T12:48:00Z" PublishedUtc="2017-11-14T15:13:42.2662Z" ModifiedUtc="2017-11-14T15:13:42.235Z" />
      <AutoroutePart Alias="thoughts-on-making-orchard-themes-a-dream-to-customize-and-develop" UseCustomPattern="false" />
      <TitlePart Title="Thoughts on making Orchard themes a dream to customize and develop" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="Orchard,Themes" />
    </BlogPost>
    <BlogPost Id="/alias=retrieving-the-full-html-from-anglesharp-including-the-doctype" Status="Published">
      <BodyPart Text="[AngleSharp][1] is a pretty sweet document parser for .NET. I was parsing some HTML and making some modifications. All good. Then retrieving the full, modified HTML at the end had me stuck. All the examples I could see said to do it like this: `document.DocumentElement.OuterHtml`. This worked, except it was missing the Doctype. The correct way to do it is to add a reference to `AngleSharp.Extensions` and then you get a nice extension `.ToHtml()`, which is perfect.&#xD;&#xA;&#xD;&#xA;I did find this in the docs after I dug into the source code, it is under Getting Single Elements in the examples section. Which makes no sense to me but hey, I guess I was just having one of those days.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/AngleSharp/AngleSharp" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-11-20T21:54:26.476Z" PublishedUtc="2017-11-20T21:54:26.476Z" ModifiedUtc="2017-11-20T21:54:26.164Z" />
      <AutoroutePart Alias="retrieving-the-full-html-from-anglesharp-including-the-doctype" UseCustomPattern="false" />
      <TitlePart Title="Retrieving the full HTML from AngleSharp, including the Doctype" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="AngleSharp" />
    </BlogPost>
    <BlogPost Id="/alias=using-anglesharp-to-parse-a-stream" Status="Published">
      <BodyPart Text="You can parse a Stream with AngleSharp by just passing it into the HTML parser. However, AngleSharp doesn't set the stream position to zero so you get an empty output if you've been writing to a stream and it took me way longer to clock onto that than it should really have done." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-11-23T01:58:02.5672Z" PublishedUtc="2017-11-23T01:58:02.5672Z" ModifiedUtc="2017-11-23T01:58:02.2396Z" />
      <AutoroutePart Alias="using-anglesharp-to-parse-a-stream" UseCustomPattern="false" />
      <TitlePart Title="Using AngleSharp to parse a stream" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="AngleSharp" />
    </BlogPost>
    <BlogPost Id="/alias=retrieving-the-gist-id-and-user-from-gist-embed-code" Status="Published">
      <BodyPart Text="Gist embed code is very simple, just a script tag with a link to your gist.&#xD;&#xA;&#xD;&#xA;    &lt;script src=&quot;https://gist.github.com/carlwoodhouse/05b2a62c53625b483fce94e85de934b8.js&quot;&gt;&lt;/script&gt;&#xD;&#xA;&#xD;&#xA;This super simple regex expression will match the user (group 1) and the gist id (group 2)&#xD;&#xA;&#xD;&#xA;    gist\.github\.com\/(\w*)\/(\w*)" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-11-27T13:28:47.9348Z" PublishedUtc="2017-11-27T13:28:47.9348Z" ModifiedUtc="2017-11-27T13:28:47.6228Z" />
      <AutoroutePart Alias="retrieving-the-gist-id-and-user-from-gist-embed-code" UseCustomPattern="false" />
      <TitlePart Title="Retrieving the gist id and user from gist embed code" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="gist" />
    </BlogPost>
    <BlogPost Id="/alias=christmas-ifying-orchard-2017-edition" Status="Published">
      <BodyPart Text="Over four years ago I wrote a [blog post][1] about how you could make your blog snow. The code is still available on Codeplex. Yikes. I thought it was time to update it a little. The snow is now responsive and I improved the performance a little. The snow is automatically injected onto the page when you enable the module. As always when I make anything in Orchard, I ran into a few oddities. Firstly, I needed to display my shape at the beginning of the body tag. Shapes in Orchard can have a position, but if it is null, it defaults to before, so you cant put anything, well, before it. So to get a shape in front we need to insert the shape into the list manually.&#xD;&#xA;&#xD;&#xA;    context.Layout.Body.Items.Insert(0, snowShape);&#xD;&#xA;&#xD;&#xA;The next issue I had was that scripts and styles I was including in the head of the document were not being rendered. I'm not exactly sure why this was, something to do with the order Orchard renders shapes and how I was inserting shapes into the middle of it from a `ResultFilter` I'm guessing. Unfortunately I didn't have the time to dig into the reason behind it, just a fix, which was to include the script and style using the resource manager directly from my filter.&#xD;&#xA;&#xD;&#xA;The code is available on [GitHub][2]. Merry Christmas!&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: http://arkleseizure.net/blog/christmas-ifying-orchard&#xD;&#xA;  [2]: http://context.Layout.Body.Items.Insert%280,%20snow%29;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-12-06T23:03:46.0652Z" PublishedUtc="2017-12-06T23:03:46.0652Z" ModifiedUtc="2017-12-06T23:03:45.4568Z" />
      <AutoroutePart Alias="christmas-ifying-orchard-2017-edition" UseCustomPattern="false" />
      <TitlePart Title="Christmas-ifying Orchard - 2017 edition" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard,Christmas" />
    </BlogPost>
    <BlogPost Id="/alias=finding-the-size-of-a-gif-without-downloading-the-entire-file" Status="Published">
      <BodyPart Text="In a recent project I had a large number of GIF files that I need to dynamically check the dimensions for. I didn't really want to be downloading gigs of GIFs and thanks to this incredibly detailed and insightful [breakdown][1] of the GIF format by [@EmEmEff][2], I didn't have to. &#xD;&#xA;&#xD;&#xA;So the key points from the article are that bytes 1-6 tell us bout the file (the first three are the signature: &quot;GIF&quot;, the last three are the version, with &quot;89a&quot; being the most common). The next four bytes are what we want though, they let us know the canvas size of the image. Bytes 7 and 8 represent the width, with 9 and 10 being the height. Note that the GIF format uses little-endian, so the two bytes are reversed when we work out the width and height.&#xD;&#xA;&#xD;&#xA;It all turned out to be horribly simple. Here is some sample code in C#.&#xD;&#xA;&#xD;&#xA;    public Tuple&lt;int, int&gt; GetSize(string url) {&#xD;&#xA;        var req = WebRequest.Create(url);&#xD;&#xA;        req.Proxy = WebRequest.DefaultWebProxy;&#xD;&#xA;        using (var response = request.GetResponse()) {&#xD;&#xA;            using (var stream = response.GetResponseStream()) {&#xD;&#xA;                return GetSize(stream);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    private Tuple&lt;int, int&gt; GetSize(Stream stream) {&#xD;&#xA;        var b = GetBytes(10);&#xD;&#xA;        string hex = BitConverter.ToString(new byte[] { b[7], b[6] }).Replace(&quot;-&quot;, &quot;&quot;);&#xD;&#xA;        var width = Int32.Parse(hex, System.Globalization.NumberStyles.HexNumber);&#xD;&#xA;        hex = BitConverter.ToString(new byte[] { b[9], b[8] }).Replace(&quot;-&quot;, &quot;&quot;);&#xD;&#xA;        var height = Int32.Parse(hex, System.Globalization.NumberStyles.HexNumber);&#xD;&#xA;    &#xD;&#xA;        return new Tuple&lt;int, int&gt;(width, height);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;I'm fairly sure there is a better way to get the value than converting the byte array to hexadecimal and parsing it as an int but the combination of my poor knowledge, lack of fast answers from Google and time constraints meant that this would have to do.&#xD;&#xA;&#xD;&#xA;  [1]: http://www.matthewflickinger.com/lab/whatsinagif/bits_and_bytes.asp&#xD;&#xA;  [2]: https://twitter.com/EmEmEff" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-12-14T15:04:00Z" PublishedUtc="2017-12-14T15:06:28.6954Z" ModifiedUtc="2017-12-14T15:06:28.6018Z" />
      <AutoroutePart Alias="finding-the-size-of-a-gif-without-downloading-the-entire-file" UseCustomPattern="false" />
      <TitlePart Title="Finding the size of a GIF without downloading the entire file" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="GIF,C#" />
    </BlogPost>
    <BlogPost Id="/alias=manage-301-302-redirects-for-orchard-content-items" Status="Published">
      <BodyPart Text="I had some problems earlier this year with Google complaining that there were a few links around the internet that pointed to non-existent URLs on my blog, blocking me from getting an AdSense account. So I threw together a tiny module that allows 301 and 302 redirects to be configured from a content items edit page. &#xD;&#xA;&#xD;&#xA;The module is available on [GitHub][1]. Once it is enabled, there is a new part RedirectRoutes available to be attached to your content items that will add a new tab to the editor page called Redirects, where you can add a new alias that will redirect to the current route. If the AutoroutePart is attached, it will redirect to this URL. For each alias you can choose if it should be a 301 permanent redirect, or a 302 temporary redirect.&#xD;&#xA;&#xD;&#xA;As always, report any bugs on GitHub and share if you found it useful. If you found it really useful, a small donation to help me keep things afloat is always appreciated. &#xD;&#xA;&lt;script type='text/javascript' src='https://ko-fi.com/widgets/widget_2.js'&gt;&lt;/script&gt;&lt;script type='text/javascript'&gt;kofiwidget2.init('Buy Me a Beer', '#46b798', 'K3K16MLC');kofiwidget2.draw();&lt;/script&gt; &#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/Hazzamanic/Hazza.Routes" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-12-15T20:13:32.9353604Z" PublishedUtc="2017-12-15T20:13:32.9353604Z" ModifiedUtc="2017-12-15T20:13:32.9041602Z" />
      <AutoroutePart Alias="manage-301-302-redirects-for-orchard-content-items" UseCustomPattern="false" />
      <TitlePart Title="Manage 301/302 redirects for Orchard content items" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="orchard,redirect" />
    </BlogPost>
    <BlogPost Id="/alias=using-static-generation-for-my-orchard-cms-blog" Status="Published">
      <BodyPart Text="My blog, like most blogs, is pretty simple. There is only one interactive aspect, aside from the entire admin area, and that is comments. And let's be honest here, Orchard's comments are pretty lacklustre. Embeddable comment platforms like Disqus are hugely popular now and so that should solve the comments problem. I originally shied away from comments because I had lofty ideals about my blog being free from third party tracking and not contribute the gradual erosion of privacy across the internet. But I'm now skint so those have all gone out the window, I've added Google analytics, ads, AMP integration and Disqus comments are coming; full on pandering to my nosey overlords. I also cant justify the cost of a web server to host my blog when I could do it for nothing on a different platform. &#xD;&#xA;&#xD;&#xA;I previously looked at some static generation platforms because they are the in thing, or they were, it all seems to change. But there are some seriously mature and great platforms out there, as I'm sure you know, and if you don't a quick Google will enlighten you no end. However, I have this problem where I really like to build useless stuff. So I woke up one lazy Sunday morning and decided to write a module for Orchard that would generate my static site. &#xD;&#xA;&#xD;&#xA;I first planned to have a static part attached to content items, grab these items from the db and render them, capture the output using a result filter, have providers for customizing output for different content parts, overrides for handling pagination etc. After 10 minutes dreaming up this bonkers framework of static generating, I threw those ideas away as overkill. I wanted it to just work and be deployed by the end of the day. So I built a crawler. &#xD;&#xA;&#xD;&#xA;This is all a bit weird because my own blog creates a crawler to crawl my own blog. Very meta. The entire website is downloaded into the App_Data folder where you can optionally sync it with a third party service. Currently it supports uploading to Netlify and GitHub Pages (technically if you are deploying to another service using CI and GitHub as your repo then this would work for that as there is nothing specific to GH pages). Naturally, this being Orchard, this set of sync targets is extensible and there are a couple of hooks during the generation process if you need to customize the output. And by the end of my slightly less-than-usual lazy Sunday, I'd thrown my blog up onto GitHub Pages. &#xD;&#xA;&#xD;&#xA;I'll hopefully publish the code up on GitHub very soon (must remove hard coded GitHub password...) so anyone interested can take a look but here is a summary of what happens. When a page is fetched and the HTML is parsed by [AngleSharp][1]. All internal links on the page are found. All scripts and CSS are found. Any paginated links are converted into a paginated form that doesn't use querystring paramaters (e.g. /blog?page=5 becomes /blog/5). The homepage is the first page fetched and then it recursively calls all discovered urls. A setting allows you to add extra urls to fetch. The discovered HTML is saved in the `App_Data/StaticSite/{tenant_name}/Output`. Most of this is done in event handlers so you can plug additional handlers in. For example, I made one to check if a page had a corresponding AMP page (specified in the `&lt;link rel=&quot;amphtml&quot; /&gt;` tag) and if so, fetch that page too. Another example would be one to add the rss feeds. The entire media folder for the current tenant is copied into the Output folder as well, based on a flag (no need to do this if using S3 or Azure blob storage). I didn't really want to do this but I needed it for working with git. Another issue is that the site's base url will be different once the static site is uploaded so when the site is being generated the base url is modified for that request. I cant remember what problems this was causing me but there were several. Once it is generated you can optionally sync the site with an external provider. I built two, one for GitHub Pages and one for Netlify. You don't need to use these, you can manually push to git, or upload as a zip to Netlify, or upload to S3 etc. &#xD;&#xA;&#xD;&#xA;The ultimate question is how useful is this? To be honest, not very. As I have written about before, I really don't think Orchard's editor experience is good enough and it is missing some key plugins imho. There are also so many great static generators out there. However, it does demonstrate how versatile Orchard is and with OrchardCore on the horizon, I think it would be a great tool to have available. Static sites are often all that is needed for many cases, with the wonderful addition of being cheap to host and scale.&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;  [1]: https://github.com/AngleSharp/AngleSharp" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-01-08T23:34:00Z" PublishedUtc="2018-01-08T23:38:58.3564Z" ModifiedUtc="2018-01-08T23:38:58.2472Z" />
      <AutoroutePart Alias="using-static-generation-for-my-orchard-cms-blog" UseCustomPattern="false" />
      <TitlePart Title="Generating a static version of my Orchard CMS blog - A Lazy Sunday Experiment" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="orchard,static site" />
    </BlogPost>
    <BlogPost Id="/alias=adjusting-the-base-url-on-a-per-request-basis-in-orchard-cms" Status="Published">
      <BodyPart Text="This is a rather obscure requirement that, surprisingly, I have needed on two separate occasions. Hence the blog post, just in case any other poor sod out there needs it.&#xD;&#xA;&#xD;&#xA;Most recently I needed it to generate a static based website, where the url of the generated static pages would be different to my Orchard installations base url. I could have just changed the base url but it did break a few parts of Orchard that I could have easily lived with but I'm a stickler for doing things &quot;right&quot;. &#xD;&#xA;&#xD;&#xA;[OrchardSuppressDependency(&quot;Orchard.Core.Settings.Services.SiteService&quot;)]&#xD;&#xA;    public class StaticGeneratorSiteService : ISiteService {&#xD;&#xA;        private readonly IContentManager _contentManager;&#xD;&#xA;        private readonly ICacheManager _cacheManager;&#xD;&#xA;        private readonly IWorkContextAccessor _wca;&#xD;&#xA;&#xD;&#xA;        public StaticGeneratorSiteService(&#xD;&#xA;            IContentManager contentManager,&#xD;&#xA;            ICacheManager cacheManager, IWorkContextAccessor wca) {&#xD;&#xA;            _contentManager = contentManager;&#xD;&#xA;            _cacheManager = cacheManager;&#xD;&#xA;            _wca = wca;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public ISite GetSiteSettings() {&#xD;&#xA;            var siteId = _cacheManager.Get(&quot;SiteId&quot;, true, ctx =&gt; {&#xD;&#xA;                var site = _contentManager.Query(&quot;Site&quot;)&#xD;&#xA;                    .List()&#xD;&#xA;                    .FirstOrDefault();&#xD;&#xA;&#xD;&#xA;                if (site == null) {&#xD;&#xA;                    site = _contentManager.Create&lt;SiteSettingsPart&gt;(&quot;Site&quot;).ContentItem;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                return site.Id;&#xD;&#xA;            });&#xD;&#xA;&#xD;&#xA;            var realSite = _contentManager.Get&lt;ISite&gt;(siteId, VersionOptions.Published);&#xD;&#xA;            if (!_wca.GetContext().GetState&lt;bool&gt;(&quot;requestingStatic&quot;)) {&#xD;&#xA;                return realSite;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            string baseUrl = &quot;mynewurl&quot;;&#xD;&#xA;            return new FakeSiteSettings(realSite, baseUrl);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;So after you grab the site settings from the content manager, you will have to do whatever check you need to decide whether you need to change the base url for the given request. I was checking for specific parameter in the url and setting a state on the WorkContext in a filter.&#xD;&#xA;&#xD;&#xA;The `FakeSiteSettings` class looks like this.&#xD;&#xA;&#xD;&#xA;public class FakeSiteSettings : ISite {&#xD;&#xA;        private readonly ISite _site;&#xD;&#xA;        private readonly string _baseUrl;&#xD;&#xA;&#xD;&#xA;        public FakeSiteSettings(ISite site) {&#xD;&#xA;            _site = site;&#xD;&#xA;            _baseUrl = &quot;&quot;;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public FakeSiteSettings(ISite site, string baseUrl) {&#xD;&#xA;            _site = site;&#xD;&#xA;            _baseUrl = baseUrl;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string BaseUrl&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return string.IsNullOrWhiteSpace(_baseUrl) ? _site.BaseUrl : _baseUrl;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public ContentItem ContentItem&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.ContentItem;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string HomePage&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.HomePage;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.HomePage = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public int Id&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.Id;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public int MaxPagedCount&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.MaxPagedCount;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.MaxPagedCount = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public int MaxPageSize&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.MaxPageSize;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.MaxPageSize = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public int PageSize&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.PageSize;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.PageSize = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string PageTitleSeparator&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.PageTitleSeparator;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public ResourceDebugMode ResourceDebugMode&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.ResourceDebugMode;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.ResourceDebugMode = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string SiteCalendar&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.SiteCalendar;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.SiteCalendar = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string SiteCulture&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.SiteCulture;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.SiteCulture = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string SiteName&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.SiteName;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string SiteSalt&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.SiteSalt;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string SiteTimeZone&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.SiteTimeZone;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public string SuperUser&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.SuperUser;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public bool UseCdn&#xD;&#xA;        {&#xD;&#xA;            get&#xD;&#xA;            {&#xD;&#xA;                return _site.UseCdn;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            set&#xD;&#xA;            {&#xD;&#xA;                _site.UseCdn = value;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Pretty long, but it is basically just a wrapper around Orchard's default site settings class. The only difference is if the `_baseUrl` has been set it will return that rather than the one from the stored site settings." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-12-23T20:48:45.296Z" PublishedUtc="2017-12-23T20:48:45.296Z" ModifiedUtc="2017-12-23T20:48:45.2024Z" />
      <AutoroutePart Alias="adjusting-the-base-url-on-a-per-request-basis-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Adjusting the Base Url on a per request basis in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="orchard" />
    </BlogPost>
    <BlogPost Id="/alias=adding-custom-dependencies-into-the-app_data-dependencies-folder-in-orchard-cms" Status="Published">
      <BodyPart Text="Because of Orchard's decoupled nature, the standard bin folders don't quite work for Orchard because no project has a reference to all the other projects included in the solution. What this means is that Orchard needs to copy all the dlls from the modules bin folders into another folder, the Dependencies folder in App_Data. This all just works out of the box generally, however if you have a weird dependency requirement this can all fall apart. Several times I have had a folder of dlls that I require in the bin folder that isn't being copied into the Dependencies folder, because it doesn't support this scenario. This means that things fall apart at runtime when I try to access code that requires this folder of dlls exist. I tried for several (stupidly wasted) hours to use an Orchard hook to add this folder. I know that I wanted to use the `IExtensionLoader` interface but I couldn't work out a way to inject my dependency. I think I know what I needed, which is to add the dependency manually into the Host.config file (this XML file contains autofac config stuff) and add a reference to my module in Orchard.Web. But this seemed a bit long. So I wrote a dirty hack.&#xD;&#xA;&#xD;&#xA;&#x9;try {&#xD;&#xA;&#x9;&#x9;var repo = new Repository();&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;} catch (Exception ex) {&#xD;&#xA;&#x9;&#x9;var lib = HostingEnvironment.MapPath(&quot;~/Modules/Hazza.StaticGenerator/bin/lib&quot;);&#xD;&#xA;&#x9;&#x9;var dependencies = HostingEnvironment.MapPath(&quot;~/App_Data/Dependencies/lib&quot;);&#xD;&#xA;&#x9;&#x9;if (Directory.Exists(dependencies)) {&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;var source = new DirectoryInfo(lib);&#xD;&#xA;&#x9;&#x9;var target = new DirectoryInfo(dependencies);&#xD;&#xA;&#x9;&#x9;CopyAll(source, target);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;try {&#xD;&#xA;&#x9;&#x9;&#x9;var repo = new Repository();&#xD;&#xA;&#x9;&#x9;&#x9;return true;&#xD;&#xA;&#x9;&#x9;} catch(Exception ex2) {&#xD;&#xA;&#x9;&#x9;&#x9;// log&#xD;&#xA;&#x9;&#x9;&#x9;return false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}    &#xD;&#xA;&#xD;&#xA;It is pretty self explanatory, it tries to access the troublesome code, if it fails, it probably means the Dependencies folder is missing the required dlls, so it copies them over and tries again, if it fails again, it gives up and I cry a little inside. Note: the `//log` comment obviously doesn't log anything but it does serve to remind me and everyone how uselessly lazy I am." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-12-21T16:53:16.2212Z" PublishedUtc="2017-12-21T16:53:16.2212Z" ModifiedUtc="2017-12-21T16:53:16.1744Z" />
      <AutoroutePart Alias="adding-custom-dependencies-into-the-app_data-dependencies-folder-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Adding custom dependencies into the App_Data/Dependencies folder in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="orchard" />
    </BlogPost>
    <BlogPost Id="/alias=if-you-ve-been-using-orchardizer-to-create-modules-your-builds-are-probably-massive" Status="Published">
      <BodyPart Text="Orchardizer, my extension for Orchard CMS, has an option to create a module for you. Unfortunately, it sets the CopyLocal value for Orchard.Framework to true, which means a huge number of redundant dlls will be added to the bin folder of your module when it is built. The fix is simple, just change the CopyLocal value of Orchard.Framework to false in all your modules. I'm looking into how to change Orchardizer to make that value false by default so hopefully I'll release a fix soon. Ish." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2017-12-22T12:10:00Z" PublishedUtc="2018-01-02T17:00:13.1006Z" ModifiedUtc="2018-01-02T17:00:12.8354Z" />
      <AutoroutePart Alias="if-you-ve-been-using-orchardizer-to-create-modules-your-builds-are-probably-massive" UseCustomPattern="false" />
      <TitlePart Title="Orchardizer causes modules to generate redundant DLLs" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="true" />
      <TagsPart Tags="orchard,orchardizer" />
    </BlogPost>
    <BlogPost Id="/alias=regex-to-get-the-twitter-tweet-id-from-a-status-embed-link" Status="Published">
      <BodyPart Text="This regex will grab the tweet id from a Twitter embed url with some example C# code.&#xD;&#xA;&#xD;&#xA;    var regex = new Regex(@&quot;twitter\.com\/.*\/status(?:es)?\/([^\/\?]+)&quot;, RegexOptions.IgnoreCase);&#xD;&#xA;    var match = regex.Match(href);&#xD;&#xA;    if (match.Success) {&#xD;&#xA;    &#x9;return match.Groups[1].Value;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-01-04T00:37:37.049Z" PublishedUtc="2018-01-04T00:37:37.049Z" ModifiedUtc="2018-01-04T00:37:36.7058Z" />
      <AutoroutePart Alias="regex-to-get-the-twitter-tweet-id-from-a-status-embed-link" UseCustomPattern="false" />
      <TitlePart Title="Regex to get the Twitter Tweet Id from a status embed link" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="regex" />
    </BlogPost>
    <BlogPost Id="/alias=deleting-files-in-c-specifically-files-within-the-git-folder" Status="Published">
      <BodyPart Text="I wanted to delete an entire directory so I called `Directory.Delete(path, true)` and all was well and everything was deleted. I then wrote some code to initialize git within said folder, which when I tried to delete using the aforementioned `Directory.Delete` things went pear-shaped and all was not well and nothing was deleted. After some unsuccessful google searches involving weird combinations of git, .git, delete and c#, I finally noticed that the files causing me grief were marked with the attributes RA, with R being Read-only and A being Archive. I never really checked which one was the offender but based on my experience of other OS's where read-only is (rightly) treated as something you should check before deleting (Windows Explorer just goes right ahead and deletes it, no problem), I assume read-only was the problem. Hence the following:&#xD;&#xA;&#xD;&#xA;        private void DeleteDirectory(string d) {&#xD;&#xA;            foreach (var sub in Directory.EnumerateDirectories(d)) {&#xD;&#xA;                DeleteDirectory(sub);&#xD;&#xA;            }&#xD;&#xA;            foreach (var f in Directory.EnumerateFiles(d)) {&#xD;&#xA;                var fi = new FileInfo(f);&#xD;&#xA;                fi.Attributes = FileAttributes.Normal;&#xD;&#xA;                fi.Delete();&#xD;&#xA;            }&#xD;&#xA;            Directory.Delete(d);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;Yay for recursion." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-01-08T00:49:00.9424Z" PublishedUtc="2018-01-08T00:49:00.9424Z" ModifiedUtc="2018-01-08T00:49:00.5992Z" />
      <AutoroutePart Alias="deleting-files-in-c-specifically-files-within-the-git-folder" UseCustomPattern="false" />
      <TitlePart Title="Deleting files in C# (specifically, files within the .git folder)" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="c#,git" />
    </BlogPost>
    <BlogPost Id="/alias=deploying-to-netlify-using-digest-from-c" Status="Published">
      <BodyPart Text="Netlify offers two ways of uploading your files, via zip or using files digest. Files digest is the recommended way because it checks for existing files and only uploads new or changed files, saving bandwidth and time. I struggled a bit with Netlify's API. Their documentation isn't particularly great and once a few things aren't quite correct you start to doubt everything, so I was going mad trying to fix the final bug second guessing everything in the docs, digging into their node library. Turns out, as always, a typo. I'm bad. So here it is, upload files via digest from C#.&#xD;&#xA;&#xD;&#xA;    public class Netlify {&#xD;&#xA;        private static string Api = &quot;https://api.netlify.com/api/v1/&quot;;&#xD;&#xA;        private readonly string _access_token;&#xD;&#xA;&#xD;&#xA;        public Netlify(string access_token) {&#xD;&#xA;            _access_token = access_token;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        public bool Deploy(string siteId, string folderPath) {&#xD;&#xA;            var files = Directory.EnumerateFiles(folderPath, &quot;*.*&quot;, SearchOption.AllDirectories);&#xD;&#xA;            var hashes = new Dictionary&lt;string, string&gt;();&#xD;&#xA;            foreach(var f in files) {&#xD;&#xA;                if(!File.Exists(f)) {&#xD;&#xA;                    continue;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                using(var s = File.OpenRead(f)) {&#xD;&#xA;                    using (var cryptoProvider = new SHA1CryptoServiceProvider()) {&#xD;&#xA;                        var hash = BitConverter.ToString(cryptoProvider.ComputeHash(s));&#xD;&#xA;                        var file = f.Replace(folderPath, String.Empty);&#xD;&#xA;                        hashes.Add(file.Replace('\\', '/'), hash.Replace(&quot;-&quot;, String.Empty).ToLowerInvariant());&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var json = JsonConvert.SerializeObject(new { files = hashes, draft = false });&#xD;&#xA;            var client = new WebClient();&#xD;&#xA;            //client.Credentials = new NetworkCredential(_access_token, &quot;&quot;);&#xD;&#xA;            client.Headers.Add(&quot;Authorization&quot;, &quot;Bearer &quot; + _access_token);&#xD;&#xA;            client.Headers.Add(&quot;Content-Type&quot;, &quot;application/json&quot;);&#xD;&#xA;            string response;&#xD;&#xA;            try {&#xD;&#xA;                response = client.UploadString(Api + &quot;sites/&quot; + siteId + &quot;/deploys&quot;, &quot;POST&quot;, json);&#xD;&#xA;            }&#xD;&#xA;            catch (WebException ex) {&#xD;&#xA;                client.Dispose();&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            var deployment = JsonConvert.DeserializeObject&lt;Deployment&gt;(response);&#xD;&#xA;            foreach(var hash in deployment.required) {&#xD;&#xA;                var fs = hashes.Where(e =&gt; e.Value == hash);&#xD;&#xA;                foreach(var f in fs) {&#xD;&#xA;                    var filePath = f.Key;&#xD;&#xA;                    var fullPath = Path.Combine(folderPath, filePath.TrimStart('/').Replace('/', '\\'));&#xD;&#xA;                    if(!File.Exists(fullPath)) {&#xD;&#xA;                        continue;&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    var fileContent = File.ReadAllText(fullPath);&#xD;&#xA;                    client.Headers.Add(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;);&#xD;&#xA;                    try {                        &#xD;&#xA;                        client.UploadFile(Api + &quot;deploys/&quot; + deployment.id + &quot;/files&quot; + filePath, &quot;PUT&quot;, fullPath);&#xD;&#xA;                    }&#xD;&#xA;                    catch (WebException ex) {&#xD;&#xA;                        client.Dispose();&#xD;&#xA;                        return false;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            client.Dispose();&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    public class Deployment {&#xD;&#xA;        public string id { get; set; }&#xD;&#xA;        public string[] required { get; set; }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;Usage:&#xD;&#xA;&#xD;&#xA;    var netlify = new Netlify(&quot;access_token&quot;);&#xD;&#xA;    var deployment = netlify.Deploy(&quot;site_url&quot;, &quot;directory&quot;);" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-01-09T02:57:00Z" PublishedUtc="2018-01-09T03:03:24.3868Z" ModifiedUtc="2018-01-09T03:03:24.3244Z" />
      <AutoroutePart Alias="deploying-to-netlify-using-digest-from-c" UseCustomPattern="false" />
      <TitlePart Title="Deploying to Netlify using files digest from C#" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="c#,netlify" />
    </BlogPost>
    <BlogPost Id="/alias=overriding-editors-in-orchard-cms" Status="Published">
      <BodyPart Text="To override all part or field editors it is very easy. For example, to override the editor for the enumeration field you just drop a file into your views folder: `EditorTemplates/Fields/Enumeration.Edit.cshtml`. But what if you want to override one specific enumeration field editor but leave the rest as the default? Orchard is full of alternates for different shapes and you'd expect there to be alternates for these editor shapes. Unfortunately, the editors don't work like this. For the editors in Orchard to work in the MVC style we are accustomed to, it employs a simple trick to bind the models and add the html prefixes. To do this it renders a generic shape, `EditorTemplate` that renders the specified template. Usually this would be fine, except when you need to use alternates to override a specific editor (for example, a named field). Say you want to override the editor for the Enumeration field with the name FieldName, you'd expect to be able to put a view in your EditorTemplates folder called `Fields.EnumerationField-FieldName` because the alternates are added to the `EditorTemplate` shape. So we can use this and add a view called EditorTemplate-FieldName.cshtml with the contents:&#xD;&#xA;&#xD;&#xA;    @{ &#xD;&#xA;        var m = (Orchard.Fields.Fields.EnumerationField)Model.Model;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    @Html.Partial(&quot;MyNewEditor&quot;, m, new ViewDataDictionary {&#xD;&#xA;        TemplateInfo = new TemplateInfo { HtmlFieldPrefix = Model.Prefix }&#xD;&#xA;    })&#xD;&#xA;&#xD;&#xA;Then add another view called MyNewEditor.cshtml with the overrides you want for your editor. All these views should go in the root of your Views folder. You can add a more specific alternate if you have a field with the same name on two content types and only want to override the field editor on one, like so: `EditorTemplate-ContentType-FieldName`.&#xD;&#xA;" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-01-25T23:55:00Z" PublishedUtc="2018-01-28T15:40:33.8336Z" ModifiedUtc="2018-01-28T15:40:33.5684Z" />
      <AutoroutePart Alias="overriding-editors-in-orchard-cms" UseCustomPattern="false" />
      <TitlePart Title="Overriding editors in Orchard CMS" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="Orchard" />
    </BlogPost>
    <BlogPost Id="/alias=getting-started-with-statamic-on-window-s-iis-express" Status="Published">
      <BodyPart Text="A friend of mine recently pointed me in the direction of [Statamic][1], a flat file CMS written on the awesome Laravel PHP framework. I thought it looked pretty cool and they have a local free trial so I decided to give it a try. &#xD;&#xA;&#xD;&#xA;I'm a windows boy and the folks over at Statamic... aren't. I'm also definitely one for the path of least resistance so I thought I'd share how I got there.&#xD;&#xA;&#xD;&#xA;Step one, we need PHP. Quickest way to get it is to run the Web Platform Installer, search for PHP and install `PHP 7.1.7 (x86) for IIS Express`. Once this is installed, head over to the installation at `C:\Program Files (x86)\IIS Express\PHP\v7.1` and find the `php.ini` file. Open that (you'll need to be in administrator mode to edit this file), scroll to the bottom and in the `[ExtensionList]` section add: `extension=php_fileinfo.dll` to the end of the list.&#xD;&#xA;&#xD;&#xA;Now we need Statamic itself, which you can get [here][2] (you need to enter your email). Unzip the zip and go to root of the Statamic installation, it should look like this:&#xD;&#xA;&#xD;&#xA;    statamic&#xD;&#xA;    |-- assets&#xD;&#xA;    |-- local&#xD;&#xA;    |-- site&#xD;&#xA;    |-- statamic&#xD;&#xA;    |-- index.php&#xD;&#xA;    |-- please&#xD;&#xA;    |-- robots.txt&#xD;&#xA;    |-- sample.gitignore&#xD;&#xA;    |-- sample.nginx.conf&#xD;&#xA;    |-- sample.htaccess&#xD;&#xA;    |-- sample.web.config&#xD;&#xA;&#xD;&#xA;IIS Express runs at the user permissions level so you shouldn't need to worry about permissions. We do need to set up some url rewriting because otherwise every URL would need index.php on the front. Silly PHP. They do provide a sample web.config but it didn't work for so I made my own:&#xD;&#xA;&#xD;&#xA;    &lt;configuration&gt; &#xD;&#xA;      &lt;system.webServer&gt;&#xD;&#xA;          &lt;rewrite&gt;&#xD;&#xA;              &lt;rules&gt;&#xD;&#xA;                  &lt;rule name=&quot;Redirect&quot; stopProcessing=&quot;true&quot;&gt;&#xD;&#xA;                      &lt;match url=&quot;.*&quot; /&gt;&#xD;&#xA;                      &lt;conditions&gt;&#xD;&#xA;                          &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsFile&quot; negate=&quot;true&quot; /&gt;&#xD;&#xA;                          &lt;add input=&quot;{REQUEST_FILENAME}&quot; matchType=&quot;IsDirectory&quot; negate=&quot;true&quot; /&gt;&#xD;&#xA;                      &lt;/conditions&gt;&#xD;&#xA;                      &lt;action type=&quot;Rewrite&quot; url=&quot;/index.php&quot; /&gt;&#xD;&#xA;                  &lt;/rule&gt;&#xD;&#xA;              &lt;/rules&gt;&#xD;&#xA;          &lt;/rewrite&gt;&#xD;&#xA;      &lt;/system.webServer&gt;&#xD;&#xA;    &lt;/configuration&gt;&#xD;&#xA;&#xD;&#xA;Add this to a web.config file. Now we just need to run our application. Open an administrator command prompt (unfortunately yes, it does need administrator privileges...) and navigate to your Statamic installation e.g.&#xD;&#xA;&#xD;&#xA;    cd C:\Users\{YourUser}\Downloads\statamic-2.8.8\statamic&#xD;&#xA;&#xD;&#xA;Then run the command&#xD;&#xA;&#xD;&#xA;    runphp.cmd&#xD;&#xA;&#xD;&#xA;This should fire up the site at a port specified somewhere in all that scrolling command-line text (else check your tray for the IIS Express light blue stacked bricks icon and right click to see the URL). Navigate to this url (if it is port 8080 the url will be `http://localhost:8080`) and you should see the homepage running. To complete the installation go to `/installer.php` and follow the wizard to get set up.&#xD;&#xA;&#xD;&#xA;Then enjoy!&#xD;&#xA;&#xD;&#xA;  [1]: https://statamic.com/&#xD;&#xA;  [2]: https://statamic.com/try" />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-03-21T23:07:00Z" PublishedUtc="2018-03-21T23:11:45.2396Z" ModifiedUtc="2018-03-21T23:11:45.146Z" />
      <AutoroutePart Alias="getting-started-with-statamic-on-window-s-iis-express" UseCustomPattern="false" />
      <TitlePart Title="Getting started with Statamic on Window's IIS Express" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="statamatic,php,iis express" />
    </BlogPost>
    <BlogPost Id="/alias=accessing-a-local-net-website-api-from-a-xamarin-app" Status="Published">
      <BodyPart Text="The Android emulator has a nifty feature to allow apps to access the host computers local address, 127.0.0.1, by using `http://10.0.2.2:*port*`. If you are trying to connect to a .NET api you're developing running at `http://localhost:60765` let's say, you'd put `http://10.0.2.2:60765`. Unfortunately this wont work because IIS Express binds to localhost not 127.0.0.1. Fortunately the fix is simple. Open the folder containing your .NET solution and navigate to `.vs\config\applicationhost.config` (note `.vs` is a hidden folder) then search for the port you are running on, you should find something like this within the `&lt;sites&gt;` tag.&#xD;&#xA;&#xD;&#xA;    &lt;site name=&quot;MySite&quot; id=&quot;2&quot;&gt;&#xD;&#xA;    &#x9;&lt;application path=&quot;/&quot; applicationPool=&quot;Clr4IntegratedAppPool&quot;&gt;&#xD;&#xA;    &#x9;&#x9;&lt;virtualDirectory path=&quot;/&quot; physicalPath=&quot;C:\Users\...&quot; /&gt;&#xD;&#xA;    &#x9;&lt;/application&gt;&#xD;&#xA;    &#x9;&lt;bindings&gt;&#xD;&#xA;    &#x9;&#x9;&lt;binding protocol=&quot;http&quot; bindingInformation=&quot;*:60765:localhost&quot; /&gt;&#xD;&#xA;    &#x9;&lt;/bindings&gt;&#xD;&#xA;    &lt;/site&gt;&#xD;&#xA;&#xD;&#xA;Change `localhost` to `127.0.0.1` and voila, it should now be accessible from your app." />
      <CommonPart Owner="/User.UserName=admin" Container="/alias=" CreatedUtc="2018-07-19T12:46:00.2962Z" PublishedUtc="2018-07-19T12:46:00.2962Z" ModifiedUtc="2018-07-19T12:45:59.8126Z" />
      <AutoroutePart Alias="accessing-a-local-net-website-api-from-a-xamarin-app" UseCustomPattern="false" />
      <TitlePart Title="Accessing a local .NET website (API) from a Xamarin app" />
      <CommentsPart CommentsShown="true" CommentsActive="true" ThreadedComments="false" />
      <TagsPart Tags="xamarin,iis express,.net" />
    </BlogPost>
    <Comment Id="/Identifier=c6093d4021ad44ff933feab10a5d3ab7" Status="Published">
      <IdentityPart Identifier="c6093d4021ad44ff933feab10a5d3ab7" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-01-22T01:02:25Z" PublishedUtc="2015-01-30T16:11:00.8576Z" ModifiedUtc="2014-01-22T01:02:26Z" />
      <CommentPart Author="enfante" Email="enfante@hotmail.com" Position="28.00000" Status="Approved" CommentDateUtc="2014-01-22T01:02:26Z" CommentText="Fuck thank you, was really pissing me off" CommentedOn="/alias=windows-8-tablet-settings" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=a53b609c18e2481cbd83e8516e8f7622" Status="Published">
      <IdentityPart Identifier="a53b609c18e2481cbd83e8516e8f7622" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-01-22T01:07:08Z" PublishedUtc="2015-01-30T16:11:00.92Z" ModifiedUtc="2014-01-22T01:07:08Z" />
      <CommentPart Author="Jeff Olmstead" SiteName="http://www.endlessmountainsolutions.com/" Email="jeff.olmstead@endlessmountainsolutions.com" Position="29.00000" Status="Approved" CommentDateUtc="2014-01-22T01:07:08Z" CommentText="Love the snow! Have a client I will have to try that on. One thing in your example code, from another developer, you shouldn't need the ChristmasPartRecord at all, you can just make a ChristmasPart as a ContentPart without an underlying record and avoid the database clutter. I am guessing the codegen module made it for you, but thought I would mention. Anyway, thanks for the fun idea." CommentedOn="/alias=blog\/christmas-ifying-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=135cc37818154ef48834dff54c45b28d" Status="Published">
      <IdentityPart Identifier="135cc37818154ef48834dff54c45b28d" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-01-22T01:08:33Z" PublishedUtc="2015-01-30T16:11:01.0136Z" ModifiedUtc="2014-01-22T01:08:33Z" />
      <CommentPart Author="Jeff Olmstead" SiteName="http://www.endlessmountainsolutions.com/" Email="jeff.olmstead@endlessmountainsolutions.com" Position="30.00000" Status="Approved" CommentDateUtc="2014-01-22T01:08:34Z" CommentText="From one Orchard developer to another, thanks for taking time to write this up, very useful. I cannot recall, but could have you used Orchard Suppress Dependency rather than route weighting? Probably doesn't work for a controller... Thanks for tip on code generation extensions, will check that out also." CommentedOn="/alias=extending-search-with-settings" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=57eef8b9d65c43689f62eba400a9672c" Status="Published">
      <IdentityPart Identifier="57eef8b9d65c43689f62eba400a9672c" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-01-22T01:10:00Z" PublishedUtc="2015-01-30T16:11:01.0916Z" ModifiedUtc="2014-01-22T01:10:00Z" />
      <CommentPart Author="Bertrand" SiteName="http://weblogs.asp.net/bleroy" Email="bleroy@hotmail.com" Position="31.00000" Status="Approved" CommentDateUtc="2014-01-22T01:10:00Z" CommentText="It would be interesting to write another post doing it with The Shift / Infoset and show how much of the code and database tables are gone..." CommentedOn="/alias=extending-search-with-settings" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=bda185971e2744219379ab4599ce8218" Status="Published">
      <IdentityPart Identifier="bda185971e2744219379ab4599ce8218" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-01-22T01:13:01Z" PublishedUtc="2015-01-30T16:11:01.154Z" ModifiedUtc="2014-01-22T01:13:01Z" />
      <CommentPart Author="Neil" Email="neil.martin@abilitation.com" Position="32.00000" Status="Approved" CommentDateUtc="2014-01-22T01:13:01Z" CommentText="Thank you,&#xD;&#xA;&#xD;&#xA; This is a good start, but... In the Content-Movie.Detail.cshtml template, you have @Display(Model.Content) and @Display(Model.Movie) - what actually renders these parts?&#xD;&#xA;&#xD;&#xA; I understand that Parts.Title.cshtml performs the rendering function for the title part but what happens if other content types also include a title part?&#xD;&#xA;&#xD;&#xA; Sorry - probably obvious questions." CommentedOn="/alias=what-the-hell-is-an-item-template" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=12dfc57869014c5b80d22c31d7bd482c" Status="Published">
      <IdentityPart Identifier="12dfc57869014c5b80d22c31d7bd482c" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-02-03T18:25:59Z" PublishedUtc="2015-01-30T16:11:01.232Z" ModifiedUtc="2014-02-03T18:26:00Z" />
      <CommentPart Author="John" Email="johnsmith@hotmail.com" Position="35.00000" Status="Approved" CommentDateUtc="2014-02-03T18:26:00Z" CommentText="Have you considered not using a Windows Phone?" CommentedOn="/alias=windows-phone-8-capitalisation-of-i-s" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=fe9e1f7b313c43679fb778cc8b884f60" Status="Published">
      <IdentityPart Identifier="fe9e1f7b313c43679fb778cc8b884f60" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-06-04T16:00:32Z" PublishedUtc="2015-01-30T16:11:01.2944Z" ModifiedUtc="2014-06-04T16:00:33Z" />
      <CommentPart Author="DevChat" Email="jake@modstreaming.com" Position="101.00000" Status="Approved" CommentDateUtc="2014-06-04T16:00:36Z" CommentText="Nice! I actually never knew that existed. Good find." CommentedOn="/alias=open-command-prompt-here" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=09583f34f57e4aeb83a445f53b323068" Status="Published">
      <IdentityPart Identifier="09583f34f57e4aeb83a445f53b323068" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-06-23T12:53:43Z" PublishedUtc="2015-01-30T16:11:01.3568Z" ModifiedUtc="2014-06-23T12:53:47Z" />
      <CommentPart Author="bonza" SiteName="http://s020.radikal.ru/i711/1406/71/0014d4c8ef2f.png" Email="bonza@inbox.ru" Position="104.00000" Status="Approved" CommentDateUtc="2014-06-23T12:53:49Z" CommentText="Another way to open command prompt is type &quot;cmd&quot; within explorer path window" CommentedOn="/alias=open-command-prompt-here" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=2c26fa97f5664cba85f04339802fa848" Status="Published">
      <IdentityPart Identifier="2c26fa97f5664cba85f04339802fa848" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-07-08T14:23:49Z" PublishedUtc="2015-01-30T16:11:01.4192Z" ModifiedUtc="2014-07-08T14:23:53Z" />
      <CommentPart Author="Matthias" Email="mjost@inteno.com" Position="109.00000" Status="Approved" CommentDateUtc="2014-07-08T14:23:54Z" CommentText="Interesting article!" CommentedOn="/alias=orchard-default-value-in-infoset" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=ad3e6725ab64455c92c68f67af7cb0ab" Status="Published">
      <IdentityPart Identifier="ad3e6725ab64455c92c68f67af7cb0ab" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-07-28T19:09:19Z" PublishedUtc="2015-01-30T16:11:01.4972Z" ModifiedUtc="2014-07-28T19:09:20Z" />
      <CommentPart Author="Bertrand Le Roy" SiteName="http://weblogs.asp.net/bleroy" Email="bertrandleroy@gmail.com" Position="125.00000" Status="Approved" CommentDateUtc="2014-07-28T19:09:21Z" CommentText="Stereotypes can be thought about as roughly a content type's superclass if Orchard worked with inheritance. Because Orchard uses composition massively, there are a few OOP concepts that need to be reproduced and adapted. Stereotypes are one of those." CommentedOn="/alias=what-are-stereotypes-in-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=7353f75c4a5e4bb3b6fdfbb6befaa5a4" Status="Published">
      <IdentityPart Identifier="7353f75c4a5e4bb3b6fdfbb6befaa5a4" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2014-07-29T23:56:29Z" PublishedUtc="2015-01-30T16:11:01.5596Z" ModifiedUtc="2014-07-29T23:56:31Z" />
      <CommentPart Author="admin" UserName="admin" Position="126.00000" Status="Approved" CommentDateUtc="2014-07-29T23:56:31Z" CommentText="Indeed, and much more elegantly put" CommentedOn="/alias=what-are-stereotypes-in-orchard" CommentedOnContainer="/alias=" RepliedOn="/Identifier=ad3e6725ab64455c92c68f67af7cb0ab" />
    </Comment>
    <Comment Id="/Identifier=8bbad35520b24ae6bd2f2747d0f41dbc" Status="Published">
      <IdentityPart Identifier="8bbad35520b24ae6bd2f2747d0f41dbc" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2015-02-01T22:18:47.0096Z" PublishedUtc="2015-02-01T22:18:47.0564Z" ModifiedUtc="2015-02-02T09:44:25.4732Z" />
      <CommentPart Author="John" Email="johncrawley86@gmail.com" Position="47.00000" Status="Approved" CommentDateUtc="2015-02-01T22:18:47Z" CommentText="Makes sense now!" CommentedOn="/alias=grouping-your-site-settings-in-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=c44a3093a67640b084aea218295c02cc" Status="Published">
      <IdentityPart Identifier="c44a3093a67640b084aea218295c02cc" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2015-02-02T09:05:50.324Z" PublishedUtc="2015-02-02T09:05:50.636Z" ModifiedUtc="2015-02-02T09:42:55.7576Z" />
      <CommentPart Author="dj" Email="jdsamqp@gmail.com" Position="48.00000" Status="Approved" CommentDateUtc="2015-02-02T09:05:50Z" CommentText="This post hlped me out a lot, thanks!" CommentedOn="/alias=grouping-your-site-settings-in-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=c67ef70efdf74eeba0b64fce4acf1724" Status="Published">
      <IdentityPart Identifier="c67ef70efdf74eeba0b64fce4acf1724" />
      <CommonPart CreatedUtc="2015-03-24T16:00:20.988Z" PublishedUtc="2015-03-24T16:00:21.0972Z" ModifiedUtc="2015-03-24T16:00:21.0036Z" />
      <CommentPart Author="grief" Email="kraken1989@hotmail.com" Position="306.00000" Status="Approved" CommentDateUtc="2015-03-24T16:00:21Z" CommentText="How did I not know about this extension before reading this article?!" CommentedOn="/alias=custom-layer-rule-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=dbc26e31c614485bb2b9bd80d75b7d93" Status="Published">
      <IdentityPart Identifier="dbc26e31c614485bb2b9bd80d75b7d93" />
      <CommonPart CreatedUtc="2015-04-08T19:53:14.1408Z" PublishedUtc="2015-04-08T19:53:14.172Z" ModifiedUtc="2015-04-08T19:53:14.1408Z" />
      <CommentPart Author="Sawyer " Email="sawyergw@live.nl" Position="349.00000" Status="Approved" CommentDateUtc="2015-04-08T19:53:14Z" CommentText="Its nice that i can be the first one to place a comment on this well written documentary!&#xD;&#xA;It has opened up my eyes for new ways of using Orchard and i'm sure that i will be using this in the near future. Keep up the good work and i'll be following you closely! &#xD;&#xA;Cheers,&#xD;&#xA;Sawyer" CommentedOn="/alias=custom-tokens-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=df34f3329c7743fbbe07254cdea2a399" Status="Published">
      <IdentityPart Identifier="df34f3329c7743fbbe07254cdea2a399" />
      <CommonPart CreatedUtc="2015-05-01T20:16:57.5256Z" PublishedUtc="2015-05-01T20:16:57.8376Z" ModifiedUtc="2015-05-01T20:16:57.666Z" />
      <CommentPart Author="Zoltán Lehóczky" SiteName="http://lombiq.com/" Email="zoltan.lehoczky@lombiq.com" Position="435.00000" Status="Approved" CommentDateUtc="2015-05-01T20:16:57Z" CommentText="Yes, very important. Similarly important not to do any work apart from assignments in an injectable dependency's ctor. See: http://orcharddojo.net/orchard-resources/Library/DevelopmentGuidelines/BestPractices/Orchard" CommentedOn="/alias=making-your-driver-display-methods-perform-better" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=e8611d5a9916498d91bce1a78d29aca0" Status="Published">
      <IdentityPart Identifier="e8611d5a9916498d91bce1a78d29aca0" />
      <CommonPart CreatedUtc="2015-05-05T18:16:15.8256Z" PublishedUtc="2015-05-05T18:16:15.8568Z" ModifiedUtc="2015-05-05T18:16:15.8256Z" />
      <CommentPart Author="behnam esmaili" Email="mfcdeveloper@yahoo.com" Position="440.00000" Status="Approved" CommentDateUtc="2015-05-05T18:16:15Z" CommentText="Oh.&#xD;&#xA;Great! It works.think about dozens of driver would be executed all for nothing in case A.thanks for this simple and KEY suggestion.it will speed up my sites a lot.i should have been smart enough to know it myself but it was not the case ;D.waiting for the next." CommentedOn="/alias=making-your-driver-display-methods-perform-better" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=9dc5cd616cec47aaac944d37af80b743" Status="Published">
      <IdentityPart Identifier="9dc5cd616cec47aaac944d37af80b743" />
      <CommonPart CreatedUtc="2015-05-05T21:36:55.0944Z" PublishedUtc="2015-05-05T21:36:55.1256Z" ModifiedUtc="2015-05-05T21:36:55.11Z" />
      <CommentPart Author="Janus" Email="janus007@gmail.com" Position="441.00000" Status="Approved" CommentDateUtc="2015-05-05T21:36:55Z" CommentText="Hello&#xD;&#xA;&#xD;&#xA;What do you mean by fully-fledged CMS?" CommentedOn="/alias=custom-layer-rule-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=f1f2b5eaae6b4e5a877bc148dacff407" Status="Published">
      <IdentityPart Identifier="f1f2b5eaae6b4e5a877bc148dacff407" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2015-05-06T09:06:24.4848Z" PublishedUtc="2015-05-06T09:06:24.594Z" ModifiedUtc="2015-05-06T09:06:24.516Z" />
      <CommentPart Author="admin" UserName="admin" Position="442.00000" Status="Approved" CommentDateUtc="2015-05-06T09:06:24Z" CommentText="Hey, I guess I didn't really make it particularly clear. We regularly use Orchard for hosting a live webcast for people to watch that lasts just a few hours. So it's quite a simple site. And when I said &quot;fully-fledged CMS&quot; I mean that Orchard has all the stuff in place for building a website that you will add and manage content over time, not just use for one-time use website. I guess if you were to define fully-fledged it would be completely developed, or something along those lines." CommentedOn="/alias=custom-layer-rule-in-orchard-cms" CommentedOnContainer="/alias=" RepliedOn="/Identifier=9dc5cd616cec47aaac944d37af80b743" />
    </Comment>
    <Comment Id="/Identifier=43b1e6adcd1e4f5e9319067ac81dd503" Status="Published">
      <IdentityPart Identifier="43b1e6adcd1e4f5e9319067ac81dd503" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2015-05-06T16:11:38.862Z" PublishedUtc="2015-05-06T16:11:38.8932Z" ModifiedUtc="2015-05-06T16:11:38.8776Z" />
      <CommentPart Author="Gert Smith" Email="garpomail@gmail.com" Position="443.00000" Status="Approved" CommentDateUtc="2015-05-06T16:11:38Z" CommentText="Can you repro this with an example as it is not the behaviour I am seeing in my custom module. When running in debug mode with a breakpoint in my driver, I note only the 1 (one) hit as expected when the single widget is on a page." CommentedOn="/alias=making-your-driver-display-methods-perform-better" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=b3522c7a9448479b88d0393483527cf9" Status="Published">
      <IdentityPart Identifier="b3522c7a9448479b88d0393483527cf9" />
      <CommonPart CreatedUtc="2015-05-06T23:41:29.0616Z" PublishedUtc="2015-05-06T23:41:29.0772Z" ModifiedUtc="2015-05-06T23:41:29.0616Z" />
      <CommentPart Author="Robert" SiteName="http://youngkindly.com" Position="445.00000" Status="Approved" CommentDateUtc="2015-05-06T23:41:29Z" CommentText="Great stuff!" CommentedOn="/alias=introducing-orchardizer-a-visual-studio-extension-for-orchard-developers" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=b7d4a30736a04155a6482ccd2a90506f" Status="Published">
      <IdentityPart Identifier="b7d4a30736a04155a6482ccd2a90506f" />
      <CommonPart CreatedUtc="2015-07-10T14:47:11.4616Z" PublishedUtc="2015-07-10T14:47:11.8048Z" ModifiedUtc="2015-07-10T14:47:11.602Z" />
      <CommentPart Author="OrchardDev" Email="dev@frankensteinworks.com" Position="708.00000" Status="Approved" CommentDateUtc="2015-07-10T14:47:11Z" CommentText="Thanks now I know how to link my content items in export" CommentedOn="/alias=exporting-and-importing-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=c60b5c2d089e47138dea8af9105404d9" Status="Published">
      <IdentityPart Identifier="c60b5c2d089e47138dea8af9105404d9" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2015-07-23T19:22:14.3002Z" PublishedUtc="2015-07-23T19:22:14.4094Z" ModifiedUtc="2015-07-23T19:22:14.3158Z" />
      <CommentPart Author="Alex Shapovalov" SiteName="https://yaplex.com" Email="alex@yaplex.com" Position="739.00000" Status="Approved" CommentDateUtc="2015-07-23T19:22:14Z" CommentText="What is actually calling Import or Export methods? I am trying to find some UI or code which I can call to execute Export method, but can't find how to do it.&#xD;&#xA;&#xD;&#xA;Thanks,&#xD;&#xA;Alex.&#xD;&#xA;Software developer @ https://yaplex.com" CommentedOn="/alias=exporting-and-importing-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=8d5f65b3a724440c9b1135a2c9edb3e7" Status="Published">
      <IdentityPart Identifier="8d5f65b3a724440c9b1135a2c9edb3e7" />
      <CommonPart CreatedUtc="2015-10-16T08:49:36.7664Z" PublishedUtc="2015-10-16T08:49:36.7976Z" ModifiedUtc="2015-10-16T08:49:36.7664Z" />
      <CommentPart Author="Sipke Schoorstra" SiteName="http://www.ideliverable.com" Email="sipke@ideliverable.com" Position="1162.00000" Status="Approved" CommentDateUtc="2015-10-16T08:49:36Z" CommentText="Have you checked out the dev branch lately? It has a new Export screen that includes the option to export enabled and even disabled features." CommentedOn="/alias=exporting-enabled-features-in-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=63a161911c7641c596406ac8d7e0eb65" Status="Published">
      <IdentityPart Identifier="63a161911c7641c596406ac8d7e0eb65" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2015-10-16T09:03:13.3952Z" PublishedUtc="2015-10-16T09:03:13.4264Z" ModifiedUtc="2015-10-16T09:03:13.3952Z" />
      <CommentPart Author="admin" UserName="admin" Position="1163.00000" Status="Approved" CommentDateUtc="2015-10-16T09:03:13Z" CommentText="Ah, no I hadn't. Thanks for the heads up!" CommentedOn="/alias=exporting-enabled-features-in-orchard" CommentedOnContainer="/alias=" RepliedOn="/Identifier=8d5f65b3a724440c9b1135a2c9edb3e7" />
    </Comment>
    <Comment Id="/Identifier=374446599b194143a15fbf6c3eae7ddf" Status="Published">
      <IdentityPart Identifier="374446599b194143a15fbf6c3eae7ddf" />
      <CommonPart CreatedUtc="2015-10-16T09:19:58.9556Z" PublishedUtc="2015-10-16T09:19:58.9868Z" ModifiedUtc="2015-10-16T09:19:58.9556Z" />
      <CommentPart Author="Sipke Schoorstra" SiteName="http://www.ideliverable.com" Email="sipke@ideliverable.com" Position="1164.00000" Status="Approved" CommentDateUtc="2015-10-16T09:19:58Z" CommentText="I should also add that with the recent changes made to the Import/Export module, you should no longer use the `IExportEventHandler`. Instead, there's a new API that enables you to even provide a custom UI to collect user input. I know you're lazy, but since I am even lazier it would be awesome to see a little write up from you on that. :)" CommentedOn="/alias=exporting-enabled-features-in-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=8e37ab217e234df280732306b20afc57" Status="Published">
      <IdentityPart Identifier="8e37ab217e234df280732306b20afc57" />
      <CommonPart CreatedUtc="2015-10-22T10:00:43.6554Z" PublishedUtc="2015-10-22T10:00:43.6866Z" ModifiedUtc="2015-10-22T10:00:43.671Z" />
      <CommentPart Author="johnca" Position="1194.00000" Status="Approved" CommentDateUtc="2015-10-22T10:00:43Z" CommentText="When will you be uploading the code? I really want to add this feature!" CommentedOn="/alias=tabs-in-orchard-content-editors" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=92feb8937cb747279b9d466e4b0891b2" Status="Published">
      <IdentityPart Identifier="92feb8937cb747279b9d466e4b0891b2" />
      <CommonPart CreatedUtc="2015-10-23T15:39:05.721Z" PublishedUtc="2015-10-23T15:39:05.7522Z" ModifiedUtc="2015-10-23T15:39:05.721Z" />
      <CommentPart Author="Sipke Schoorstra" SiteName="http://www.ideliverable.com" Email="sipke@ideliverable.com" Position="1202.00000" Status="Approved" CommentDateUtc="2015-10-23T15:39:05Z" CommentText="Nice work. As of the current dev branch (to become 1.10), you can also define tabs using Placement.info (as you mentioned, there was already some work done, but never got finished until I needed it recently). Having the ability for users to assign shapes to tabs would be great to have though. Maybe you would consider opening an issue on this, see what the rest thinks, and create a PR?" CommentedOn="/alias=tabs-in-orchard-content-editors" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=bfbc57658a86481bb8f6f586001b9fbd" Status="Published">
      <IdentityPart Identifier="bfbc57658a86481bb8f6f586001b9fbd" />
      <CommonPart CreatedUtc="2016-02-15T21:08:45.1494Z" PublishedUtc="2016-02-15T21:08:45.1806Z" ModifiedUtc="2016-02-15T21:08:45.165Z" />
      <CommentPart Author="apolun" Email="shahin.barzegar@gmail.com" Position="1577.00000" Status="Approved" CommentDateUtc="2016-02-15T21:08:45Z" CommentText="Thanks it's great!&#xD;&#xA;We could even use that for more complicated scenarios &#xD;&#xA;for example thinking about adding events timely and we want to show them on home page without adding any code or changing any widget just put some start and end date time to the event and the widget automatically shows near events .&#xD;&#xA;Or thinking about adding promotion or discounts for a web store and you just set up a widget to show when a group of products goes for OFFs and bump them to go on top.&#xD;&#xA;" CommentedOn="/alias=custom-layer-rule-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=1ca6105468d946ed97d933e37362d448" Status="Published">
      <IdentityPart Identifier="1ca6105468d946ed97d933e37362d448" />
      <CommonPart CreatedUtc="2016-03-25T19:14:21.075Z" PublishedUtc="2016-03-25T19:14:21.1062Z" ModifiedUtc="2016-03-25T19:14:21.0906Z" />
      <CommentPart Author="Robert" Email="remesq@gmail.com" Position="1794.00000" Status="Approved" CommentDateUtc="2016-03-25T19:14:21Z" CommentText="Just the fact alone that you can create Modules / Themes inside VS is awesome. Thanks." CommentedOn="/alias=orchardizer-version-0-3-released" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=e0aeaaed4b7c421087b280cacc20c93f" Status="Published">
      <IdentityPart Identifier="e0aeaaed4b7c421087b280cacc20c93f" />
      <CommonPart CreatedUtc="2016-06-02T17:17:00.7892Z" PublishedUtc="2016-06-02T17:17:00.8204Z" ModifiedUtc="2016-06-02T17:17:00.7892Z" />
      <CommentPart Author="Alex" SiteName="https://yaplex.com" Email="alex@yaplex.com" Position="2025.00000" Status="Approved" CommentDateUtc="2016-06-02T17:17:00Z" CommentText="Please post at least couple of screenshots on visual studio gallery page, it's not clear what the extension doing" CommentedOn="/alias=introducing-orchardizer-a-visual-studio-extension-for-orchard-developers" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=7d0f375d98804c8fa4370d29715f52ee" Status="Published">
      <IdentityPart Identifier="7d0f375d98804c8fa4370d29715f52ee" />
      <CommonPart CreatedUtc="2016-09-19T07:31:51.1786001Z" PublishedUtc="2016-09-19T07:31:51.5998001Z" ModifiedUtc="2016-09-19T07:31:51.3658001Z" />
      <CommentPart Author="rtpHarry" Email="rtpharry@hotmail.com" Position="2267.00000" Status="Approved" CommentDateUtc="2016-09-19T07:31:51Z" CommentText="Just in case anyone is following this tutorial in the future, since Orchard 1.10 the interface was moved over from to IRuleProvider to IConditionProvider.&#xD;&#xA;&#xD;&#xA;It was part of some work to move it out of the Orchard.Widgets module and into a dedicated module, Orchard.Conditions. &#xD;&#xA;&#xD;&#xA;I assume this is because Orchard.Layouts also supports these rules as well now.&#xD;&#xA;&#xD;&#xA;Here is the commit: https://github.com/OrchardCMS/Orchard/commit/5c18f49fa37a73eeabd41ec78f7920ce94a861e2" CommentedOn="/alias=custom-layer-rule-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=7e98b91e80ba489f8d6f3ec690430d23" Status="Published">
      <IdentityPart Identifier="7e98b91e80ba489f8d6f3ec690430d23" />
      <CommonPart CreatedUtc="2016-10-11T06:55:00.7156Z" PublishedUtc="2016-10-11T06:55:00.7468Z" ModifiedUtc="2016-10-11T06:55:00.7156Z" />
      <CommentPart Position="2336.00000" Status="Pending" CommentDateUtc="2016-10-11T06:55:00Z" CommentText="Ffe" CommentedOn="/alias=custom-layer-rule-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=98c5a9d1d1044f6c8e117e36ff5e6aa6" Status="Published">
      <IdentityPart Identifier="98c5a9d1d1044f6c8e117e36ff5e6aa6" />
      <CommonPart CreatedUtc="2017-01-05T13:34:12.2614Z" PublishedUtc="2017-01-05T13:34:12.3082Z" ModifiedUtc="2017-01-05T13:34:12.277Z" />
      <CommentPart Author="Zoltán Lehóczky" SiteName="https://lombiq.com" Email="zoltan.lehoczky@lombiq.com" Position="2474.00000" Status="Approved" CommentDateUtc="2017-01-05T13:34:12Z" CommentText="https://orcharddojo.net/blog/troubleshooting-iis-apppool-crashes-status-503-after-windows-10-anniversary-update :-)" CommentedOn="/alias=upgrading-to-windows-10-anniversary-edition-disables-iis" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=a87bed2cceac41de91f47c22b8ce0e8c" Status="Published">
      <IdentityPart Identifier="a87bed2cceac41de91f47c22b8ce0e8c" />
      <CommonPart CreatedUtc="2017-02-22T14:53:41.4814Z" PublishedUtc="2017-02-22T14:53:41.809Z" ModifiedUtc="2017-02-22T14:53:41.6218Z" />
      <CommentPart Author="Zoltán Lehóczky" SiteName="https://lombiq.com" Email="zoltan.lehoczky@lombiq.com" Position="2553.00000" Status="Approved" CommentDateUtc="2017-02-22T14:53:41Z" CommentText="FYI this was fixed in Orchard and will be released in a next version (not sure if 1.10.2 or 1.11 though)." CommentedOn="/alias=creating-a-static-toolbar-for-tinymce" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=003b83263a074ed48602fa8f8bc4f057" Status="Published">
      <IdentityPart Identifier="003b83263a074ed48602fa8f8bc4f057" />
      <CommonPart CreatedUtc="2017-03-06T20:59:45.7224Z" PublishedUtc="2017-03-06T20:59:46.05Z" ModifiedUtc="2017-03-06T20:59:45.8628Z" />
      <CommentPart Author="Imran Soudagar" SiteName="http://write-online.com/" Email="imranahmdsoudagar@gmail.com" Position="2564.00000" Status="Approved" CommentDateUtc="2017-03-06T20:59:45Z" CommentText="Hi,&#xD;&#xA;&#xD;&#xA;I have never heard of Orchid CMS ever until I say iss.net blog is being managed on Orchid. And I have been researching about Orchid, and I guess it is one of the best CMS around. &#xD;&#xA;&#xD;&#xA;I am going to try it on my test servers before I try it on my main blog. &#xD;&#xA;&#xD;&#xA;Thank you." CommentedOn="/alias=actually-using-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=7d56db537d9f407d818f55fb5cb0ef40" Status="Published">
      <IdentityPart Identifier="7d56db537d9f407d818f55fb5cb0ef40" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2017-03-07T01:43:14.4648Z" PublishedUtc="2017-03-07T01:43:14.5116Z" ModifiedUtc="2017-03-07T01:43:14.4648Z" />
      <CommentPart Author="admin" UserName="admin" Position="2565.00000" Status="Approved" CommentDateUtc="2017-03-07T01:43:14Z" CommentText="Haha, despite my grumblings about Orchard it is definitely one of the best CMS's! So I'm glad something productive came from this post ^_^" CommentedOn="/alias=actually-using-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=ca307ded163a488da85534181758a2fd" Status="Published">
      <IdentityPart Identifier="ca307ded163a488da85534181758a2fd" />
      <CommonPart CreatedUtc="2017-05-08T11:11:18.4448Z" PublishedUtc="2017-05-08T11:11:18.7724Z" ModifiedUtc="2017-05-08T11:11:18.5852Z" />
      <CommentPart Author="JP" Position="2694.00000" Status="Approved" CommentDateUtc="2017-05-08T11:11:18Z" CommentText="Saved us a lot of hassle. Thanks for detailing this!" CommentedOn="/alias=buy-an-ssl-certificate-from-123-reg-and-install-it-on-azure-app-service" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=a2c2aacf6a3745ac9bd3a6b2bb844907" Status="Published">
      <IdentityPart Identifier="a2c2aacf6a3745ac9bd3a6b2bb844907" />
      <CommonPart CreatedUtc="2017-07-07T13:04:53.0142Z" PublishedUtc="2017-07-07T13:04:53.0454Z" ModifiedUtc="2017-07-07T13:04:53.0142Z" />
      <CommentPart Author="Charles" Position="2930.00000" Status="Approved" CommentDateUtc="2017-07-07T13:04:53Z" CommentText="I agree, I'v been working with orchard for 7 years now as a developer and I love how its crafted but...... as a user, using it out of the box it is a challenge.&#xD;&#xA;&#xD;&#xA;" CommentedOn="/alias=actually-using-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=7a101a436b104f85b932b1a1360e404d" Status="Published">
      <IdentityPart Identifier="7a101a436b104f85b932b1a1360e404d" />
      <CommonPart CreatedUtc="2017-07-07T13:13:59.5914Z" PublishedUtc="2017-07-07T13:13:59.6226Z" ModifiedUtc="2017-07-07T13:13:59.5914Z" />
      <CommentPart Author="Charles" Position="2931.00000" Status="Approved" CommentDateUtc="2017-07-07T13:13:59Z" CommentText="Thanks for this!" CommentedOn="/alias=using-morelikethis-in-lucene-to-displayed-related-content-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=3f3f20b5c767486496a6c7d437a07e1d" Status="Published">
      <IdentityPart Identifier="3f3f20b5c767486496a6c7d437a07e1d" />
      <CommonPart CreatedUtc="2017-08-13T18:40:54.324Z" PublishedUtc="2017-08-13T18:40:54.3708Z" ModifiedUtc="2017-08-13T18:40:54.324Z" />
      <CommentPart Author="shahin" SiteName="http://codeban.net" Email="apolun@live.com" Position="3067.00000" Status="Approved" CommentDateUtc="2017-08-13T18:40:54Z" CommentText="Blogging and creating content is more than just uploading photos and ...&#xD;&#xA;Working on seo is another issue that is not solved in orchard yet.&#xD;&#xA;also there are plenty of plugins to monitor everything on other platforms that you could barely find on orchard " CommentedOn="/alias=actually-using-orchard" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=d061d2d8701e4c4aac096677c5c50694" Status="Published">
      <IdentityPart Identifier="d061d2d8701e4c4aac096677c5c50694" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2017-08-19T04:25:01.6684Z" PublishedUtc="2017-08-19T04:25:01.6996Z" ModifiedUtc="2017-08-23T12:23:15.292Z" />
      <CommentPart Author="melany" Email="melany.fo@yahoo.com" Position="3106.00000" Status="Approved" CommentDateUtc="2017-08-19T04:25:01Z" CommentText="I never knew you could add elements this way, thanks for sharing" CommentedOn="/alias=creating-an-instagram-layout-element-for-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=3d0b0953f79648bda254869b0fb0ca75" Status="Published">
      <IdentityPart Identifier="3d0b0953f79648bda254869b0fb0ca75" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2017-08-29T09:28:50.2544Z" PublishedUtc="2017-08-29T09:28:50.2856Z" ModifiedUtc="2018-06-18T21:08:10.3946Z" />
      <CommentPart Author="john" Email="ronrogers93@yahoo.com" Position="3162.00000" Status="Approved" CommentDateUtc="2017-08-29T09:28:50Z" CommentText="This was driving me insane. You are my hero" CommentedOn="/alias=storing-json-in-orchard-workflows" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=141a188140754640a72f0e8d751d4a2b" Status="Published">
      <IdentityPart Identifier="141a188140754640a72f0e8d751d4a2b" />
      <CommonPart CreatedUtc="2017-09-15T23:05:20.5794Z" PublishedUtc="2017-09-15T23:05:20.6106Z" ModifiedUtc="2017-09-15T23:05:20.5794Z" />
      <CommentPart Author="Rob" SiteName="http://robertwray.co.uk/" Email="rob@robertwray.co.uk" Position="3257.00000" Status="Approved" CommentDateUtc="2017-09-15T23:05:20Z" CommentText="Hi, I'm the guilty party who logged the issue :)&#xD;&#xA;&#xD;&#xA;The use case I thought of for this is for a site admin to keep an eye on blogs (with separate owners) and the number of comments against them, though the &quot;best&quot; solution here would be if the comment count was broken out to also show &quot;pending count&quot;. Other than that, the fact that Orchard showed &quot;0&quot; just rankled... ;)" CommentedOn="/alias=display-comment-information-for-a-blog-on-orchard-cms-sites-with-multiple-blogs" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=6ebbeeb4a37647169427721c1356a595" Status="Published">
      <IdentityPart Identifier="6ebbeeb4a37647169427721c1356a595" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2017-09-28T00:28:15.4454Z" PublishedUtc="2017-09-28T00:28:15.5546Z" ModifiedUtc="2017-09-28T00:28:15.4766Z" />
      <CommentPart Author="admin" UserName="admin" Position="3258.00000" Status="Approved" CommentDateUtc="2017-09-28T00:28:15Z" CommentText="It does indeed show a pending and total count. I think the pull request someone made also does this and in a much simpler way since comments contain a container field. As per usual, I overcomplicated something very simple ha" CommentedOn="/alias=display-comment-information-for-a-blog-on-orchard-cms-sites-with-multiple-blogs" CommentedOnContainer="/alias=" RepliedOn="/Identifier=141a188140754640a72f0e8d751d4a2b" />
    </Comment>
    <Comment Id="/Identifier=8fb0302498ce464ebd78d2b10027e053" Status="Published">
      <IdentityPart Identifier="8fb0302498ce464ebd78d2b10027e053" />
      <CommonPart CreatedUtc="2017-12-01T14:27:53.3138221Z" PublishedUtc="2017-12-01T14:27:53.6258241Z" ModifiedUtc="2017-12-01T14:27:53.454223Z" />
      <CommentPart Author="Zoltán Lehóczky" SiteName="https://lombiq.com" Email="zoltan.lehoczky@lombiq.com" Position="3446.00000" Status="Approved" CommentDateUtc="2017-12-01T14:27:53Z" CommentText="You may want to check out https://github.com/Lombiq/Orchard-Theme-Override for some inspiration. Not the same, but with similar aims." CommentedOn="/alias=thoughts-on-making-orchard-themes-a-dream-to-customize-and-develop" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=2059455f20514bd6b918230cc4ef3738" Status="Published">
      <IdentityPart Identifier="2059455f20514bd6b918230cc4ef3738" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2017-12-07T10:47:28.4792Z" PublishedUtc="2017-12-07T10:47:28.526Z" ModifiedUtc="2017-12-07T10:47:28.4948Z" />
      <CommentPart Author="admin" UserName="admin" Position="3464.00000" Status="Approved" CommentDateUtc="2017-12-07T10:47:28Z" CommentText="Yeah I love that module! Run it on near every site I've ever deployed. But while I find it handy, if you don't have any knowledge of CSS or placement, it's a bit daunting. But condensing something as complex as css into a bunch of input fields is not easy I suppose" CommentedOn="/alias=thoughts-on-making-orchard-themes-a-dream-to-customize-and-develop" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=44eb9333cfc94879914ddd82e8707e42" Status="Published">
      <IdentityPart Identifier="44eb9333cfc94879914ddd82e8707e42" />
      <CommonPart CreatedUtc="2018-01-05T09:02:06.5631124Z" PublishedUtc="2018-01-05T09:02:06.8907145Z" ModifiedUtc="2018-01-05T09:02:06.7035133Z" />
      <CommentPart Author="RDO" Email="none@none.com" Position="3530.00000" Status="Approved" CommentDateUtc="2018-01-05T09:02:06Z" CommentText="Thanks bro." CommentedOn="/alias=ctrl-shift-s-causing-red-lines-to-appear-at-right-angles-around-mouse" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=59a27314d2574dd2b90b6eaa30279dd3" Status="Published">
      <IdentityPart Identifier="59a27314d2574dd2b90b6eaa30279dd3" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2018-01-14T19:50:23.196Z" PublishedUtc="2018-01-14T19:50:23.5392Z" ModifiedUtc="2018-01-14T19:50:23.352Z" />
      <CommentPart Author="giannis kyrias" Email="giannkyrias@gmail.com" Position="3564.00000" Status="Approved" CommentDateUtc="2018-01-14T19:50:23Z" CommentText="Sounds interesting.&#xD;&#xA;Can you send me a copy or provide a download so i can give it a spin.&#xD;&#xA;Thanks&#xD;&#xA;Giannis&#xD;&#xA;" CommentedOn="/alias=thoughts-on-making-orchard-themes-a-dream-to-customize-and-develop" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=7dd10e13a2f94b57933a9bed41fc084f" Status="Published">
      <IdentityPart Identifier="7dd10e13a2f94b57933a9bed41fc084f" />
      <CommonPart CreatedUtc="2018-04-28T17:45:45.1703997Z" PublishedUtc="2018-04-28T17:45:45.2171997Z" ModifiedUtc="2018-04-28T17:45:45.1859997Z" />
      <CommentPart Author="David Smith" Email="luwunu_chuwunu@hotmail.com" Position="3801.00000" Status="Approved" CommentDateUtc="2018-04-28T17:45:45Z" CommentText="Great article but how do you create a CSR for a website hosted on Azure?" CommentedOn="/alias=buy-an-ssl-certificate-from-123-reg-and-install-it-on-azure-app-service" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=560caf459aad4e3381c2436438d2d11a" Status="Published">
      <IdentityPart Identifier="560caf459aad4e3381c2436438d2d11a" />
      <CommonPart CreatedUtc="2019-04-25T13:22:35.9886Z" PublishedUtc="2019-04-25T13:22:36.0354Z" ModifiedUtc="2019-04-25T13:22:36.0042Z" />
      <CommentPart Position="4354.00000" Status="Pending" CommentDateUtc="2019-04-25T13:22:36Z" CommentText="es ist zum kotzen du hast meine Zeit für nix verschwindet " CommentedOn="/alias=custom-tokens-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=619d797a461049abb7df8a98b2c727e7" Status="Published">
      <IdentityPart Identifier="619d797a461049abb7df8a98b2c727e7" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2019-04-25T13:23:00.7146Z" PublishedUtc="2019-04-25T13:23:00.7458Z" ModifiedUtc="2019-05-13T11:10:57.0648Z" />
      <CommentPart Author="Herman" Position="4355.00000" Status="Approved" CommentDateUtc="2019-04-25T13:23:00Z" CommentText="es ist zum kotzen du hast meine Zeit für nix verschwindet " CommentedOn="/alias=custom-tokens-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=3f0e73c0c7b44456a56b3e56dd5197ba" Status="Published">
      <IdentityPart Identifier="3f0e73c0c7b44456a56b3e56dd5197ba" />
      <CommonPart CreatedUtc="2019-05-12T15:45:05.3388Z" PublishedUtc="2019-05-12T15:45:05.6508Z" ModifiedUtc="2019-05-12T15:45:05.4636Z" />
      <CommentPart Author="not RDO" Email="paradonym@gmail.com" Position="4393.00000" Status="Approved" CommentDateUtc="2019-05-12T15:45:05Z" CommentText="Thanks bro." CommentedOn="/alias=ctrl-shift-s-causing-red-lines-to-appear-at-right-angles-around-mouse" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=3721655f29c94dad821f971b90428e01" Status="Published">
      <IdentityPart Identifier="3721655f29c94dad821f971b90428e01" />
      <CommonPart Owner="/User.UserName=admin" CreatedUtc="2019-05-13T11:11:44.6916Z" PublishedUtc="2019-05-13T11:11:44.8476Z" ModifiedUtc="2019-05-13T11:11:44.7696Z" />
      <CommentPart Author="admin" UserName="admin" Position="4395.00000" Status="Approved" CommentDateUtc="2019-05-13T11:11:44Z" CommentText="According to Google translate this means &quot;it sucks you have my time for nothing disappears&quot;. Sorry Herman!" CommentedOn="/alias=custom-tokens-in-orchard-cms" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=4c8294afc64f4a8788f54ac26d1c5075" Status="Published">
      <IdentityPart Identifier="4c8294afc64f4a8788f54ac26d1c5075" />
      <CommonPart CreatedUtc="2019-12-25T14:29:57.206Z" PublishedUtc="2019-12-25T14:29:57.5024Z" ModifiedUtc="2019-12-25T14:29:57.3308Z" />
      <CommentPart Author="emma" Email="avaemma085@gmail.com" Position="4919.00000" Status="Pending" CommentDateUtc="2019-12-25T14:29:57Z" CommentText="i like it and keep update us with more good stuff.&lt;a href=&quot;http://www.nbsdisplays.com/contact-us/&quot;&gt;Retail Counter Displays Services Amityville&lt;/a&gt;&#xD;&#xA;" CommentedOn="/alias=display-comment-information-for-a-blog-on-orchard-cms-sites-with-multiple-blogs" CommentedOnContainer="/alias=" />
    </Comment>
    <Comment Id="/Identifier=3fcf2b13cff64712ba63a14943a2273c" Status="Published">
      <IdentityPart Identifier="3fcf2b13cff64712ba63a14943a2273c" />
      <CommonPart CreatedUtc="2020-01-01T17:16:01.9742Z" PublishedUtc="2020-01-01T17:16:02.0054Z" ModifiedUtc="2020-01-01T17:16:01.9742Z" />
      <CommentPart Author="jimricherd" Email="jimricherd248@gmail.com" Position="4929.00000" Status="Pending" CommentDateUtc="2020-01-01T17:16:01Z" CommentText="we have best chiller truck in uae &lt;a href=&quot;https://freshandcooltransport.com/about-us/&quot;&gt;Chiller Transport Services in UAE&lt;/a&gt;&#xD;&#xA;" CommentedOn="/alias=display-comment-information-for-a-blog-on-orchard-cms-sites-with-multiple-blogs" CommentedOnContainer="/alias=" />
    </Comment>
  </Data>
</Orchard>